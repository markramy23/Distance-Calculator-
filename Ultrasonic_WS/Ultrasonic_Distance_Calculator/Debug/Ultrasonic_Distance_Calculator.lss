
Ultrasonic_Distance_Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000319e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  0000319e  00003232  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800178  00800178  0000334a  2**0
                  ALLOC
  3 .stab         0000207c  00000000  00000000  0000334c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000faa  00000000  00000000  000053c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001c0  00000000  00000000  00006372  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000214  00000000  00000000  00006532  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002612  00000000  00000000  00006746  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000014ce  00000000  00000000  00008d58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   0000130b  00000000  00000000  0000a226  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001e0  00000000  00000000  0000b534  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00000307  00000000  00000000  0000b714  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a1a  00000000  00000000  0000ba1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c435  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a7 00 	jmp	0x14e	; 0x14e <__ctors_end>
       4:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       8:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
       c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      10:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      14:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      18:	0c 94 65 0d 	jmp	0x1aca	; 0x1aca <__vector_6>
      1c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      20:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      24:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      28:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      2c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      30:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      34:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      38:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      3c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      40:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      44:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      48:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      4c:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      50:	0c 94 c4 00 	jmp	0x188	; 0x188 <__bad_interrupt>
      54:	00 40       	sbci	r16, 0x00	; 0
      56:	7a 10       	cpse	r7, r10
      58:	f3 5a       	subi	r31, 0xA3	; 163
      5a:	00 a0       	ldd	r0, Z+32	; 0x20
      5c:	72 4e       	sbci	r23, 0xE2	; 226
      5e:	18 09       	sbc	r17, r8
      60:	00 10       	cpse	r0, r0
      62:	a5 d4       	rcall	.+2378   	; 0x9ae <__floatsisf+0xa>
      64:	e8 00       	.word	0x00e8	; ????
      66:	00 e8       	ldi	r16, 0x80	; 128
      68:	76 48       	sbci	r23, 0x86	; 134
      6a:	17 00       	.word	0x0017	; ????
      6c:	00 e4       	ldi	r16, 0x40	; 64
      6e:	0b 54       	subi	r16, 0x4B	; 75
      70:	02 00       	.word	0x0002	; ????
      72:	00 ca       	rjmp	.-3072   	; 0xfffff474 <__eeprom_end+0xff7ef474>
      74:	9a 3b       	cpi	r25, 0xBA	; 186
      76:	00 00       	nop
      78:	00 e1       	ldi	r16, 0x10	; 16
      7a:	f5 05       	cpc	r31, r5
      7c:	00 00       	nop
      7e:	80 96       	adiw	r24, 0x20	; 32
      80:	98 00       	.word	0x0098	; ????
      82:	00 00       	nop
      84:	40 42       	sbci	r20, 0x20	; 32
      86:	0f 00       	.word	0x000f	; ????
      88:	00 00       	nop
      8a:	a0 86       	std	Z+8, r10	; 0x08
      8c:	01 00       	.word	0x0001	; ????
      8e:	00 00       	nop
      90:	10 27       	eor	r17, r16
      92:	00 00       	nop
      94:	00 00       	nop
      96:	e8 03       	fmulsu	r22, r16
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	64 00       	.word	0x0064	; ????
      9e:	00 00       	nop
      a0:	00 00       	nop
      a2:	0a 00       	.word	0x000a	; ????
      a4:	00 00       	nop
      a6:	00 00       	nop
      a8:	01 00       	.word	0x0001	; ????
      aa:	00 00       	nop
      ac:	00 00       	nop
      ae:	2c 76       	andi	r18, 0x6C	; 108
      b0:	d8 88       	ldd	r13, Y+16	; 0x10
      b2:	dc 67       	ori	r29, 0x7C	; 124
      b4:	4f 08       	sbc	r4, r15
      b6:	23 df       	rcall	.-442    	; 0xfffffefe <__eeprom_end+0xff7efefe>
      b8:	c1 df       	rcall	.-126    	; 0x3c <__CCP__+0x8>
      ba:	ae 59       	subi	r26, 0x9E	; 158
      bc:	e1 b1       	in	r30, 0x01	; 1
      be:	b7 96       	adiw	r30, 0x27	; 39
      c0:	e5 e3       	ldi	r30, 0x35	; 53
      c2:	e4 53       	subi	r30, 0x34	; 52
      c4:	c6 3a       	cpi	r28, 0xA6	; 166
      c6:	e6 51       	subi	r30, 0x16	; 22
      c8:	99 76       	andi	r25, 0x69	; 105
      ca:	96 e8       	ldi	r25, 0x86	; 134
      cc:	e6 c2       	rjmp	.+1484   	; 0x69a <__mulsf3+0x162>
      ce:	84 26       	eor	r8, r20
      d0:	eb 89       	ldd	r30, Y+19	; 0x13
      d2:	8c 9b       	sbis	0x11, 4	; 17
      d4:	62 ed       	ldi	r22, 0xD2	; 210
      d6:	40 7c       	andi	r20, 0xC0	; 192
      d8:	6f fc       	.word	0xfc6f	; ????
      da:	ef bc       	out	0x2f, r14	; 47
      dc:	9c 9f       	mul	r25, r28
      de:	40 f2       	brcs	.-112    	; 0x70 <__SREG__+0x31>
      e0:	ba a5       	ldd	r27, Y+42	; 0x2a
      e2:	6f a5       	ldd	r22, Y+47	; 0x2f
      e4:	f4 90       	lpm	r15, Z+
      e6:	05 5a       	subi	r16, 0xA5	; 165
      e8:	2a f7       	brpl	.-54     	; 0xb4 <__SREG__+0x75>
      ea:	5c 93       	st	X, r21
      ec:	6b 6c       	ori	r22, 0xCB	; 203
      ee:	f9 67       	ori	r31, 0x79	; 121
      f0:	6d c1       	rjmp	.+730    	; 0x3cc <_fpadd_parts+0x1e8>
      f2:	1b fc       	.word	0xfc1b	; ????
      f4:	e0 e4       	ldi	r30, 0x40	; 64
      f6:	0d 47       	sbci	r16, 0x7D	; 125
      f8:	fe f5       	brtc	.+126    	; 0x178 <.do_clear_bss_loop>
      fa:	20 e6       	ldi	r18, 0x60	; 96
      fc:	b5 00       	.word	0x00b5	; ????
      fe:	d0 ed       	ldi	r29, 0xD0	; 208
     100:	90 2e       	mov	r9, r16
     102:	03 00       	.word	0x0003	; ????
     104:	94 35       	cpi	r25, 0x54	; 84
     106:	77 05       	cpc	r23, r7
     108:	00 80       	ld	r0, Z
     10a:	84 1e       	adc	r8, r20
     10c:	08 00       	.word	0x0008	; ????
     10e:	00 20       	and	r0, r0
     110:	4e 0a       	sbc	r4, r30
     112:	00 00       	nop
     114:	00 c8       	rjmp	.-4096   	; 0xfffff116 <__eeprom_end+0xff7ef116>
     116:	0c 33       	cpi	r16, 0x3C	; 60
     118:	33 33       	cpi	r19, 0x33	; 51
     11a:	33 0f       	add	r19, r19
     11c:	98 6e       	ori	r25, 0xE8	; 232
     11e:	12 83       	std	Z+2, r17	; 0x02
     120:	11 41       	sbci	r17, 0x11	; 17
     122:	ef 8d       	ldd	r30, Y+31	; 0x1f
     124:	21 14       	cp	r2, r1
     126:	89 3b       	cpi	r24, 0xB9	; 185
     128:	e6 55       	subi	r30, 0x56	; 86
     12a:	16 cf       	rjmp	.-468    	; 0xffffff58 <__eeprom_end+0xff7eff58>
     12c:	fe e6       	ldi	r31, 0x6E	; 110
     12e:	db 18       	sub	r13, r11
     130:	d1 84       	ldd	r13, Z+9	; 0x09
     132:	4b 38       	cpi	r20, 0x8B	; 139
     134:	1b f7       	brvc	.-58     	; 0xfc <__SREG__+0xbd>
     136:	7c 1d       	adc	r23, r12
     138:	90 1d       	adc	r25, r0
     13a:	a4 bb       	out	0x14, r26	; 20
     13c:	e4 24       	eor	r14, r4
     13e:	20 32       	cpi	r18, 0x20	; 32
     140:	84 72       	andi	r24, 0x24	; 36
     142:	5e 22       	and	r5, r30
     144:	81 00       	.word	0x0081	; ????
     146:	c9 f1       	breq	.+114    	; 0x1ba <__fixunssfsi+0x2e>
     148:	24 ec       	ldi	r18, 0xC4	; 196
     14a:	a1 e5       	ldi	r26, 0x51	; 81
     14c:	3d 27       	eor	r19, r29

0000014e <__ctors_end>:
     14e:	11 24       	eor	r1, r1
     150:	1f be       	out	0x3f, r1	; 63
     152:	cf e5       	ldi	r28, 0x5F	; 95
     154:	d8 e0       	ldi	r29, 0x08	; 8
     156:	de bf       	out	0x3e, r29	; 62
     158:	cd bf       	out	0x3d, r28	; 61

0000015a <__do_copy_data>:
     15a:	11 e0       	ldi	r17, 0x01	; 1
     15c:	a0 e6       	ldi	r26, 0x60	; 96
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	ee e9       	ldi	r30, 0x9E	; 158
     162:	f1 e3       	ldi	r31, 0x31	; 49
     164:	02 c0       	rjmp	.+4      	; 0x16a <.do_copy_data_start>

00000166 <.do_copy_data_loop>:
     166:	05 90       	lpm	r0, Z+
     168:	0d 92       	st	X+, r0

0000016a <.do_copy_data_start>:
     16a:	a8 37       	cpi	r26, 0x78	; 120
     16c:	b1 07       	cpc	r27, r17
     16e:	d9 f7       	brne	.-10     	; 0x166 <.do_copy_data_loop>

00000170 <__do_clear_bss>:
     170:	11 e0       	ldi	r17, 0x01	; 1
     172:	a8 e7       	ldi	r26, 0x78	; 120
     174:	b1 e0       	ldi	r27, 0x01	; 1
     176:	01 c0       	rjmp	.+2      	; 0x17a <.do_clear_bss_start>

00000178 <.do_clear_bss_loop>:
     178:	1d 92       	st	X+, r1

0000017a <.do_clear_bss_start>:
     17a:	ad 37       	cpi	r26, 0x7D	; 125
     17c:	b1 07       	cpc	r27, r17
     17e:	e1 f7       	brne	.-8      	; 0x178 <.do_clear_bss_loop>
     180:	0e 94 df 09 	call	0x13be	; 0x13be <main>
     184:	0c 94 cd 18 	jmp	0x319a	; 0x319a <_exit>

00000188 <__bad_interrupt>:
     188:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000018c <__fixunssfsi>:
     18c:	ef 92       	push	r14
     18e:	ff 92       	push	r15
     190:	0f 93       	push	r16
     192:	1f 93       	push	r17
     194:	7b 01       	movw	r14, r22
     196:	8c 01       	movw	r16, r24
     198:	20 e0       	ldi	r18, 0x00	; 0
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	40 e0       	ldi	r20, 0x00	; 0
     19e:	5f e4       	ldi	r21, 0x4F	; 79
     1a0:	0e 94 72 04 	call	0x8e4	; 0x8e4 <__gesf2>
     1a4:	88 23       	and	r24, r24
     1a6:	8c f0       	brlt	.+34     	; 0x1ca <__fixunssfsi+0x3e>
     1a8:	c8 01       	movw	r24, r16
     1aa:	b7 01       	movw	r22, r14
     1ac:	20 e0       	ldi	r18, 0x00	; 0
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	5f e4       	ldi	r21, 0x4F	; 79
     1b4:	0e 94 3e 02 	call	0x47c	; 0x47c <__subsf3>
     1b8:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixsfsi>
     1bc:	9b 01       	movw	r18, r22
     1be:	ac 01       	movw	r20, r24
     1c0:	20 50       	subi	r18, 0x00	; 0
     1c2:	30 40       	sbci	r19, 0x00	; 0
     1c4:	40 40       	sbci	r20, 0x00	; 0
     1c6:	50 48       	sbci	r21, 0x80	; 128
     1c8:	06 c0       	rjmp	.+12     	; 0x1d6 <__fixunssfsi+0x4a>
     1ca:	c8 01       	movw	r24, r16
     1cc:	b7 01       	movw	r22, r14
     1ce:	0e 94 30 05 	call	0xa60	; 0xa60 <__fixsfsi>
     1d2:	9b 01       	movw	r18, r22
     1d4:	ac 01       	movw	r20, r24
     1d6:	b9 01       	movw	r22, r18
     1d8:	ca 01       	movw	r24, r20
     1da:	1f 91       	pop	r17
     1dc:	0f 91       	pop	r16
     1de:	ff 90       	pop	r15
     1e0:	ef 90       	pop	r14
     1e2:	08 95       	ret

000001e4 <_fpadd_parts>:
     1e4:	a0 e0       	ldi	r26, 0x00	; 0
     1e6:	b0 e0       	ldi	r27, 0x00	; 0
     1e8:	e8 ef       	ldi	r30, 0xF8	; 248
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__prologue_saves__>
     1f0:	dc 01       	movw	r26, r24
     1f2:	2b 01       	movw	r4, r22
     1f4:	fa 01       	movw	r30, r20
     1f6:	9c 91       	ld	r25, X
     1f8:	92 30       	cpi	r25, 0x02	; 2
     1fa:	08 f4       	brcc	.+2      	; 0x1fe <_fpadd_parts+0x1a>
     1fc:	39 c1       	rjmp	.+626    	; 0x470 <_fpadd_parts+0x28c>
     1fe:	eb 01       	movw	r28, r22
     200:	88 81       	ld	r24, Y
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	08 f4       	brcc	.+2      	; 0x208 <_fpadd_parts+0x24>
     206:	33 c1       	rjmp	.+614    	; 0x46e <_fpadd_parts+0x28a>
     208:	94 30       	cpi	r25, 0x04	; 4
     20a:	69 f4       	brne	.+26     	; 0x226 <_fpadd_parts+0x42>
     20c:	84 30       	cpi	r24, 0x04	; 4
     20e:	09 f0       	breq	.+2      	; 0x212 <_fpadd_parts+0x2e>
     210:	2f c1       	rjmp	.+606    	; 0x470 <_fpadd_parts+0x28c>
     212:	11 96       	adiw	r26, 0x01	; 1
     214:	9c 91       	ld	r25, X
     216:	11 97       	sbiw	r26, 0x01	; 1
     218:	89 81       	ldd	r24, Y+1	; 0x01
     21a:	98 17       	cp	r25, r24
     21c:	09 f4       	brne	.+2      	; 0x220 <_fpadd_parts+0x3c>
     21e:	28 c1       	rjmp	.+592    	; 0x470 <_fpadd_parts+0x28c>
     220:	a0 e7       	ldi	r26, 0x70	; 112
     222:	b0 e0       	ldi	r27, 0x00	; 0
     224:	25 c1       	rjmp	.+586    	; 0x470 <_fpadd_parts+0x28c>
     226:	84 30       	cpi	r24, 0x04	; 4
     228:	09 f4       	brne	.+2      	; 0x22c <_fpadd_parts+0x48>
     22a:	21 c1       	rjmp	.+578    	; 0x46e <_fpadd_parts+0x28a>
     22c:	82 30       	cpi	r24, 0x02	; 2
     22e:	a9 f4       	brne	.+42     	; 0x25a <_fpadd_parts+0x76>
     230:	92 30       	cpi	r25, 0x02	; 2
     232:	09 f0       	breq	.+2      	; 0x236 <_fpadd_parts+0x52>
     234:	1d c1       	rjmp	.+570    	; 0x470 <_fpadd_parts+0x28c>
     236:	9a 01       	movw	r18, r20
     238:	ad 01       	movw	r20, r26
     23a:	88 e0       	ldi	r24, 0x08	; 8
     23c:	ea 01       	movw	r28, r20
     23e:	09 90       	ld	r0, Y+
     240:	ae 01       	movw	r20, r28
     242:	e9 01       	movw	r28, r18
     244:	09 92       	st	Y+, r0
     246:	9e 01       	movw	r18, r28
     248:	81 50       	subi	r24, 0x01	; 1
     24a:	c1 f7       	brne	.-16     	; 0x23c <_fpadd_parts+0x58>
     24c:	e2 01       	movw	r28, r4
     24e:	89 81       	ldd	r24, Y+1	; 0x01
     250:	11 96       	adiw	r26, 0x01	; 1
     252:	9c 91       	ld	r25, X
     254:	89 23       	and	r24, r25
     256:	81 83       	std	Z+1, r24	; 0x01
     258:	08 c1       	rjmp	.+528    	; 0x46a <_fpadd_parts+0x286>
     25a:	92 30       	cpi	r25, 0x02	; 2
     25c:	09 f4       	brne	.+2      	; 0x260 <_fpadd_parts+0x7c>
     25e:	07 c1       	rjmp	.+526    	; 0x46e <_fpadd_parts+0x28a>
     260:	12 96       	adiw	r26, 0x02	; 2
     262:	2d 90       	ld	r2, X+
     264:	3c 90       	ld	r3, X
     266:	13 97       	sbiw	r26, 0x03	; 3
     268:	eb 01       	movw	r28, r22
     26a:	8a 81       	ldd	r24, Y+2	; 0x02
     26c:	9b 81       	ldd	r25, Y+3	; 0x03
     26e:	14 96       	adiw	r26, 0x04	; 4
     270:	ad 90       	ld	r10, X+
     272:	bd 90       	ld	r11, X+
     274:	cd 90       	ld	r12, X+
     276:	dc 90       	ld	r13, X
     278:	17 97       	sbiw	r26, 0x07	; 7
     27a:	ec 80       	ldd	r14, Y+4	; 0x04
     27c:	fd 80       	ldd	r15, Y+5	; 0x05
     27e:	0e 81       	ldd	r16, Y+6	; 0x06
     280:	1f 81       	ldd	r17, Y+7	; 0x07
     282:	91 01       	movw	r18, r2
     284:	28 1b       	sub	r18, r24
     286:	39 0b       	sbc	r19, r25
     288:	b9 01       	movw	r22, r18
     28a:	37 ff       	sbrs	r19, 7
     28c:	04 c0       	rjmp	.+8      	; 0x296 <_fpadd_parts+0xb2>
     28e:	66 27       	eor	r22, r22
     290:	77 27       	eor	r23, r23
     292:	62 1b       	sub	r22, r18
     294:	73 0b       	sbc	r23, r19
     296:	60 32       	cpi	r22, 0x20	; 32
     298:	71 05       	cpc	r23, r1
     29a:	0c f0       	brlt	.+2      	; 0x29e <_fpadd_parts+0xba>
     29c:	61 c0       	rjmp	.+194    	; 0x360 <_fpadd_parts+0x17c>
     29e:	12 16       	cp	r1, r18
     2a0:	13 06       	cpc	r1, r19
     2a2:	6c f5       	brge	.+90     	; 0x2fe <_fpadd_parts+0x11a>
     2a4:	37 01       	movw	r6, r14
     2a6:	48 01       	movw	r8, r16
     2a8:	06 2e       	mov	r0, r22
     2aa:	04 c0       	rjmp	.+8      	; 0x2b4 <_fpadd_parts+0xd0>
     2ac:	96 94       	lsr	r9
     2ae:	87 94       	ror	r8
     2b0:	77 94       	ror	r7
     2b2:	67 94       	ror	r6
     2b4:	0a 94       	dec	r0
     2b6:	d2 f7       	brpl	.-12     	; 0x2ac <_fpadd_parts+0xc8>
     2b8:	21 e0       	ldi	r18, 0x01	; 1
     2ba:	30 e0       	ldi	r19, 0x00	; 0
     2bc:	40 e0       	ldi	r20, 0x00	; 0
     2be:	50 e0       	ldi	r21, 0x00	; 0
     2c0:	04 c0       	rjmp	.+8      	; 0x2ca <_fpadd_parts+0xe6>
     2c2:	22 0f       	add	r18, r18
     2c4:	33 1f       	adc	r19, r19
     2c6:	44 1f       	adc	r20, r20
     2c8:	55 1f       	adc	r21, r21
     2ca:	6a 95       	dec	r22
     2cc:	d2 f7       	brpl	.-12     	; 0x2c2 <_fpadd_parts+0xde>
     2ce:	21 50       	subi	r18, 0x01	; 1
     2d0:	30 40       	sbci	r19, 0x00	; 0
     2d2:	40 40       	sbci	r20, 0x00	; 0
     2d4:	50 40       	sbci	r21, 0x00	; 0
     2d6:	2e 21       	and	r18, r14
     2d8:	3f 21       	and	r19, r15
     2da:	40 23       	and	r20, r16
     2dc:	51 23       	and	r21, r17
     2de:	21 15       	cp	r18, r1
     2e0:	31 05       	cpc	r19, r1
     2e2:	41 05       	cpc	r20, r1
     2e4:	51 05       	cpc	r21, r1
     2e6:	21 f0       	breq	.+8      	; 0x2f0 <_fpadd_parts+0x10c>
     2e8:	21 e0       	ldi	r18, 0x01	; 1
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	40 e0       	ldi	r20, 0x00	; 0
     2ee:	50 e0       	ldi	r21, 0x00	; 0
     2f0:	79 01       	movw	r14, r18
     2f2:	8a 01       	movw	r16, r20
     2f4:	e6 28       	or	r14, r6
     2f6:	f7 28       	or	r15, r7
     2f8:	08 29       	or	r16, r8
     2fa:	19 29       	or	r17, r9
     2fc:	3c c0       	rjmp	.+120    	; 0x376 <_fpadd_parts+0x192>
     2fe:	23 2b       	or	r18, r19
     300:	d1 f1       	breq	.+116    	; 0x376 <_fpadd_parts+0x192>
     302:	26 0e       	add	r2, r22
     304:	37 1e       	adc	r3, r23
     306:	35 01       	movw	r6, r10
     308:	46 01       	movw	r8, r12
     30a:	06 2e       	mov	r0, r22
     30c:	04 c0       	rjmp	.+8      	; 0x316 <_fpadd_parts+0x132>
     30e:	96 94       	lsr	r9
     310:	87 94       	ror	r8
     312:	77 94       	ror	r7
     314:	67 94       	ror	r6
     316:	0a 94       	dec	r0
     318:	d2 f7       	brpl	.-12     	; 0x30e <_fpadd_parts+0x12a>
     31a:	21 e0       	ldi	r18, 0x01	; 1
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	40 e0       	ldi	r20, 0x00	; 0
     320:	50 e0       	ldi	r21, 0x00	; 0
     322:	04 c0       	rjmp	.+8      	; 0x32c <_fpadd_parts+0x148>
     324:	22 0f       	add	r18, r18
     326:	33 1f       	adc	r19, r19
     328:	44 1f       	adc	r20, r20
     32a:	55 1f       	adc	r21, r21
     32c:	6a 95       	dec	r22
     32e:	d2 f7       	brpl	.-12     	; 0x324 <_fpadd_parts+0x140>
     330:	21 50       	subi	r18, 0x01	; 1
     332:	30 40       	sbci	r19, 0x00	; 0
     334:	40 40       	sbci	r20, 0x00	; 0
     336:	50 40       	sbci	r21, 0x00	; 0
     338:	2a 21       	and	r18, r10
     33a:	3b 21       	and	r19, r11
     33c:	4c 21       	and	r20, r12
     33e:	5d 21       	and	r21, r13
     340:	21 15       	cp	r18, r1
     342:	31 05       	cpc	r19, r1
     344:	41 05       	cpc	r20, r1
     346:	51 05       	cpc	r21, r1
     348:	21 f0       	breq	.+8      	; 0x352 <_fpadd_parts+0x16e>
     34a:	21 e0       	ldi	r18, 0x01	; 1
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	40 e0       	ldi	r20, 0x00	; 0
     350:	50 e0       	ldi	r21, 0x00	; 0
     352:	59 01       	movw	r10, r18
     354:	6a 01       	movw	r12, r20
     356:	a6 28       	or	r10, r6
     358:	b7 28       	or	r11, r7
     35a:	c8 28       	or	r12, r8
     35c:	d9 28       	or	r13, r9
     35e:	0b c0       	rjmp	.+22     	; 0x376 <_fpadd_parts+0x192>
     360:	82 15       	cp	r24, r2
     362:	93 05       	cpc	r25, r3
     364:	2c f0       	brlt	.+10     	; 0x370 <_fpadd_parts+0x18c>
     366:	1c 01       	movw	r2, r24
     368:	aa 24       	eor	r10, r10
     36a:	bb 24       	eor	r11, r11
     36c:	65 01       	movw	r12, r10
     36e:	03 c0       	rjmp	.+6      	; 0x376 <_fpadd_parts+0x192>
     370:	ee 24       	eor	r14, r14
     372:	ff 24       	eor	r15, r15
     374:	87 01       	movw	r16, r14
     376:	11 96       	adiw	r26, 0x01	; 1
     378:	9c 91       	ld	r25, X
     37a:	d2 01       	movw	r26, r4
     37c:	11 96       	adiw	r26, 0x01	; 1
     37e:	8c 91       	ld	r24, X
     380:	98 17       	cp	r25, r24
     382:	09 f4       	brne	.+2      	; 0x386 <_fpadd_parts+0x1a2>
     384:	45 c0       	rjmp	.+138    	; 0x410 <_fpadd_parts+0x22c>
     386:	99 23       	and	r25, r25
     388:	39 f0       	breq	.+14     	; 0x398 <_fpadd_parts+0x1b4>
     38a:	a8 01       	movw	r20, r16
     38c:	97 01       	movw	r18, r14
     38e:	2a 19       	sub	r18, r10
     390:	3b 09       	sbc	r19, r11
     392:	4c 09       	sbc	r20, r12
     394:	5d 09       	sbc	r21, r13
     396:	06 c0       	rjmp	.+12     	; 0x3a4 <_fpadd_parts+0x1c0>
     398:	a6 01       	movw	r20, r12
     39a:	95 01       	movw	r18, r10
     39c:	2e 19       	sub	r18, r14
     39e:	3f 09       	sbc	r19, r15
     3a0:	40 0b       	sbc	r20, r16
     3a2:	51 0b       	sbc	r21, r17
     3a4:	57 fd       	sbrc	r21, 7
     3a6:	08 c0       	rjmp	.+16     	; 0x3b8 <_fpadd_parts+0x1d4>
     3a8:	11 82       	std	Z+1, r1	; 0x01
     3aa:	33 82       	std	Z+3, r3	; 0x03
     3ac:	22 82       	std	Z+2, r2	; 0x02
     3ae:	24 83       	std	Z+4, r18	; 0x04
     3b0:	35 83       	std	Z+5, r19	; 0x05
     3b2:	46 83       	std	Z+6, r20	; 0x06
     3b4:	57 83       	std	Z+7, r21	; 0x07
     3b6:	1d c0       	rjmp	.+58     	; 0x3f2 <_fpadd_parts+0x20e>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	81 83       	std	Z+1, r24	; 0x01
     3bc:	33 82       	std	Z+3, r3	; 0x03
     3be:	22 82       	std	Z+2, r2	; 0x02
     3c0:	88 27       	eor	r24, r24
     3c2:	99 27       	eor	r25, r25
     3c4:	dc 01       	movw	r26, r24
     3c6:	82 1b       	sub	r24, r18
     3c8:	93 0b       	sbc	r25, r19
     3ca:	a4 0b       	sbc	r26, r20
     3cc:	b5 0b       	sbc	r27, r21
     3ce:	84 83       	std	Z+4, r24	; 0x04
     3d0:	95 83       	std	Z+5, r25	; 0x05
     3d2:	a6 83       	std	Z+6, r26	; 0x06
     3d4:	b7 83       	std	Z+7, r27	; 0x07
     3d6:	0d c0       	rjmp	.+26     	; 0x3f2 <_fpadd_parts+0x20e>
     3d8:	22 0f       	add	r18, r18
     3da:	33 1f       	adc	r19, r19
     3dc:	44 1f       	adc	r20, r20
     3de:	55 1f       	adc	r21, r21
     3e0:	24 83       	std	Z+4, r18	; 0x04
     3e2:	35 83       	std	Z+5, r19	; 0x05
     3e4:	46 83       	std	Z+6, r20	; 0x06
     3e6:	57 83       	std	Z+7, r21	; 0x07
     3e8:	82 81       	ldd	r24, Z+2	; 0x02
     3ea:	93 81       	ldd	r25, Z+3	; 0x03
     3ec:	01 97       	sbiw	r24, 0x01	; 1
     3ee:	93 83       	std	Z+3, r25	; 0x03
     3f0:	82 83       	std	Z+2, r24	; 0x02
     3f2:	24 81       	ldd	r18, Z+4	; 0x04
     3f4:	35 81       	ldd	r19, Z+5	; 0x05
     3f6:	46 81       	ldd	r20, Z+6	; 0x06
     3f8:	57 81       	ldd	r21, Z+7	; 0x07
     3fa:	da 01       	movw	r26, r20
     3fc:	c9 01       	movw	r24, r18
     3fe:	01 97       	sbiw	r24, 0x01	; 1
     400:	a1 09       	sbc	r26, r1
     402:	b1 09       	sbc	r27, r1
     404:	8f 5f       	subi	r24, 0xFF	; 255
     406:	9f 4f       	sbci	r25, 0xFF	; 255
     408:	af 4f       	sbci	r26, 0xFF	; 255
     40a:	bf 43       	sbci	r27, 0x3F	; 63
     40c:	28 f3       	brcs	.-54     	; 0x3d8 <_fpadd_parts+0x1f4>
     40e:	0b c0       	rjmp	.+22     	; 0x426 <_fpadd_parts+0x242>
     410:	91 83       	std	Z+1, r25	; 0x01
     412:	33 82       	std	Z+3, r3	; 0x03
     414:	22 82       	std	Z+2, r2	; 0x02
     416:	ea 0c       	add	r14, r10
     418:	fb 1c       	adc	r15, r11
     41a:	0c 1d       	adc	r16, r12
     41c:	1d 1d       	adc	r17, r13
     41e:	e4 82       	std	Z+4, r14	; 0x04
     420:	f5 82       	std	Z+5, r15	; 0x05
     422:	06 83       	std	Z+6, r16	; 0x06
     424:	17 83       	std	Z+7, r17	; 0x07
     426:	83 e0       	ldi	r24, 0x03	; 3
     428:	80 83       	st	Z, r24
     42a:	24 81       	ldd	r18, Z+4	; 0x04
     42c:	35 81       	ldd	r19, Z+5	; 0x05
     42e:	46 81       	ldd	r20, Z+6	; 0x06
     430:	57 81       	ldd	r21, Z+7	; 0x07
     432:	57 ff       	sbrs	r21, 7
     434:	1a c0       	rjmp	.+52     	; 0x46a <_fpadd_parts+0x286>
     436:	c9 01       	movw	r24, r18
     438:	aa 27       	eor	r26, r26
     43a:	97 fd       	sbrc	r25, 7
     43c:	a0 95       	com	r26
     43e:	ba 2f       	mov	r27, r26
     440:	81 70       	andi	r24, 0x01	; 1
     442:	90 70       	andi	r25, 0x00	; 0
     444:	a0 70       	andi	r26, 0x00	; 0
     446:	b0 70       	andi	r27, 0x00	; 0
     448:	56 95       	lsr	r21
     44a:	47 95       	ror	r20
     44c:	37 95       	ror	r19
     44e:	27 95       	ror	r18
     450:	82 2b       	or	r24, r18
     452:	93 2b       	or	r25, r19
     454:	a4 2b       	or	r26, r20
     456:	b5 2b       	or	r27, r21
     458:	84 83       	std	Z+4, r24	; 0x04
     45a:	95 83       	std	Z+5, r25	; 0x05
     45c:	a6 83       	std	Z+6, r26	; 0x06
     45e:	b7 83       	std	Z+7, r27	; 0x07
     460:	82 81       	ldd	r24, Z+2	; 0x02
     462:	93 81       	ldd	r25, Z+3	; 0x03
     464:	01 96       	adiw	r24, 0x01	; 1
     466:	93 83       	std	Z+3, r25	; 0x03
     468:	82 83       	std	Z+2, r24	; 0x02
     46a:	df 01       	movw	r26, r30
     46c:	01 c0       	rjmp	.+2      	; 0x470 <_fpadd_parts+0x28c>
     46e:	d2 01       	movw	r26, r4
     470:	cd 01       	movw	r24, r26
     472:	cd b7       	in	r28, 0x3d	; 61
     474:	de b7       	in	r29, 0x3e	; 62
     476:	e2 e1       	ldi	r30, 0x12	; 18
     478:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__epilogue_restores__>

0000047c <__subsf3>:
     47c:	a0 e2       	ldi	r26, 0x20	; 32
     47e:	b0 e0       	ldi	r27, 0x00	; 0
     480:	e4 e4       	ldi	r30, 0x44	; 68
     482:	f2 e0       	ldi	r31, 0x02	; 2
     484:	0c 94 90 15 	jmp	0x2b20	; 0x2b20 <__prologue_saves__+0x18>
     488:	69 83       	std	Y+1, r22	; 0x01
     48a:	7a 83       	std	Y+2, r23	; 0x02
     48c:	8b 83       	std	Y+3, r24	; 0x03
     48e:	9c 83       	std	Y+4, r25	; 0x04
     490:	2d 83       	std	Y+5, r18	; 0x05
     492:	3e 83       	std	Y+6, r19	; 0x06
     494:	4f 83       	std	Y+7, r20	; 0x07
     496:	58 87       	std	Y+8, r21	; 0x08
     498:	e9 e0       	ldi	r30, 0x09	; 9
     49a:	ee 2e       	mov	r14, r30
     49c:	f1 2c       	mov	r15, r1
     49e:	ec 0e       	add	r14, r28
     4a0:	fd 1e       	adc	r15, r29
     4a2:	ce 01       	movw	r24, r28
     4a4:	01 96       	adiw	r24, 0x01	; 1
     4a6:	b7 01       	movw	r22, r14
     4a8:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     4ac:	8e 01       	movw	r16, r28
     4ae:	0f 5e       	subi	r16, 0xEF	; 239
     4b0:	1f 4f       	sbci	r17, 0xFF	; 255
     4b2:	ce 01       	movw	r24, r28
     4b4:	05 96       	adiw	r24, 0x05	; 5
     4b6:	b8 01       	movw	r22, r16
     4b8:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     4bc:	8a 89       	ldd	r24, Y+18	; 0x12
     4be:	91 e0       	ldi	r25, 0x01	; 1
     4c0:	89 27       	eor	r24, r25
     4c2:	8a 8b       	std	Y+18, r24	; 0x12
     4c4:	c7 01       	movw	r24, r14
     4c6:	b8 01       	movw	r22, r16
     4c8:	ae 01       	movw	r20, r28
     4ca:	47 5e       	subi	r20, 0xE7	; 231
     4cc:	5f 4f       	sbci	r21, 0xFF	; 255
     4ce:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     4d2:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     4d6:	a0 96       	adiw	r28, 0x20	; 32
     4d8:	e6 e0       	ldi	r30, 0x06	; 6
     4da:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <__epilogue_restores__+0x18>

000004de <__addsf3>:
     4de:	a0 e2       	ldi	r26, 0x20	; 32
     4e0:	b0 e0       	ldi	r27, 0x00	; 0
     4e2:	e5 e7       	ldi	r30, 0x75	; 117
     4e4:	f2 e0       	ldi	r31, 0x02	; 2
     4e6:	0c 94 90 15 	jmp	0x2b20	; 0x2b20 <__prologue_saves__+0x18>
     4ea:	69 83       	std	Y+1, r22	; 0x01
     4ec:	7a 83       	std	Y+2, r23	; 0x02
     4ee:	8b 83       	std	Y+3, r24	; 0x03
     4f0:	9c 83       	std	Y+4, r25	; 0x04
     4f2:	2d 83       	std	Y+5, r18	; 0x05
     4f4:	3e 83       	std	Y+6, r19	; 0x06
     4f6:	4f 83       	std	Y+7, r20	; 0x07
     4f8:	58 87       	std	Y+8, r21	; 0x08
     4fa:	f9 e0       	ldi	r31, 0x09	; 9
     4fc:	ef 2e       	mov	r14, r31
     4fe:	f1 2c       	mov	r15, r1
     500:	ec 0e       	add	r14, r28
     502:	fd 1e       	adc	r15, r29
     504:	ce 01       	movw	r24, r28
     506:	01 96       	adiw	r24, 0x01	; 1
     508:	b7 01       	movw	r22, r14
     50a:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     50e:	8e 01       	movw	r16, r28
     510:	0f 5e       	subi	r16, 0xEF	; 239
     512:	1f 4f       	sbci	r17, 0xFF	; 255
     514:	ce 01       	movw	r24, r28
     516:	05 96       	adiw	r24, 0x05	; 5
     518:	b8 01       	movw	r22, r16
     51a:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     51e:	c7 01       	movw	r24, r14
     520:	b8 01       	movw	r22, r16
     522:	ae 01       	movw	r20, r28
     524:	47 5e       	subi	r20, 0xE7	; 231
     526:	5f 4f       	sbci	r21, 0xFF	; 255
     528:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <_fpadd_parts>
     52c:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     530:	a0 96       	adiw	r28, 0x20	; 32
     532:	e6 e0       	ldi	r30, 0x06	; 6
     534:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <__epilogue_restores__+0x18>

00000538 <__mulsf3>:
     538:	a0 e2       	ldi	r26, 0x20	; 32
     53a:	b0 e0       	ldi	r27, 0x00	; 0
     53c:	e2 ea       	ldi	r30, 0xA2	; 162
     53e:	f2 e0       	ldi	r31, 0x02	; 2
     540:	0c 94 84 15 	jmp	0x2b08	; 0x2b08 <__prologue_saves__>
     544:	69 83       	std	Y+1, r22	; 0x01
     546:	7a 83       	std	Y+2, r23	; 0x02
     548:	8b 83       	std	Y+3, r24	; 0x03
     54a:	9c 83       	std	Y+4, r25	; 0x04
     54c:	2d 83       	std	Y+5, r18	; 0x05
     54e:	3e 83       	std	Y+6, r19	; 0x06
     550:	4f 83       	std	Y+7, r20	; 0x07
     552:	58 87       	std	Y+8, r21	; 0x08
     554:	ce 01       	movw	r24, r28
     556:	01 96       	adiw	r24, 0x01	; 1
     558:	be 01       	movw	r22, r28
     55a:	67 5f       	subi	r22, 0xF7	; 247
     55c:	7f 4f       	sbci	r23, 0xFF	; 255
     55e:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     562:	ce 01       	movw	r24, r28
     564:	05 96       	adiw	r24, 0x05	; 5
     566:	be 01       	movw	r22, r28
     568:	6f 5e       	subi	r22, 0xEF	; 239
     56a:	7f 4f       	sbci	r23, 0xFF	; 255
     56c:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     570:	99 85       	ldd	r25, Y+9	; 0x09
     572:	92 30       	cpi	r25, 0x02	; 2
     574:	88 f0       	brcs	.+34     	; 0x598 <__mulsf3+0x60>
     576:	89 89       	ldd	r24, Y+17	; 0x11
     578:	82 30       	cpi	r24, 0x02	; 2
     57a:	c8 f0       	brcs	.+50     	; 0x5ae <__mulsf3+0x76>
     57c:	94 30       	cpi	r25, 0x04	; 4
     57e:	19 f4       	brne	.+6      	; 0x586 <__mulsf3+0x4e>
     580:	82 30       	cpi	r24, 0x02	; 2
     582:	51 f4       	brne	.+20     	; 0x598 <__mulsf3+0x60>
     584:	04 c0       	rjmp	.+8      	; 0x58e <__mulsf3+0x56>
     586:	84 30       	cpi	r24, 0x04	; 4
     588:	29 f4       	brne	.+10     	; 0x594 <__mulsf3+0x5c>
     58a:	92 30       	cpi	r25, 0x02	; 2
     58c:	81 f4       	brne	.+32     	; 0x5ae <__mulsf3+0x76>
     58e:	80 e7       	ldi	r24, 0x70	; 112
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	c6 c0       	rjmp	.+396    	; 0x720 <__mulsf3+0x1e8>
     594:	92 30       	cpi	r25, 0x02	; 2
     596:	49 f4       	brne	.+18     	; 0x5aa <__mulsf3+0x72>
     598:	20 e0       	ldi	r18, 0x00	; 0
     59a:	9a 85       	ldd	r25, Y+10	; 0x0a
     59c:	8a 89       	ldd	r24, Y+18	; 0x12
     59e:	98 13       	cpse	r25, r24
     5a0:	21 e0       	ldi	r18, 0x01	; 1
     5a2:	2a 87       	std	Y+10, r18	; 0x0a
     5a4:	ce 01       	movw	r24, r28
     5a6:	09 96       	adiw	r24, 0x09	; 9
     5a8:	bb c0       	rjmp	.+374    	; 0x720 <__mulsf3+0x1e8>
     5aa:	82 30       	cpi	r24, 0x02	; 2
     5ac:	49 f4       	brne	.+18     	; 0x5c0 <__mulsf3+0x88>
     5ae:	20 e0       	ldi	r18, 0x00	; 0
     5b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b2:	8a 89       	ldd	r24, Y+18	; 0x12
     5b4:	98 13       	cpse	r25, r24
     5b6:	21 e0       	ldi	r18, 0x01	; 1
     5b8:	2a 8b       	std	Y+18, r18	; 0x12
     5ba:	ce 01       	movw	r24, r28
     5bc:	41 96       	adiw	r24, 0x11	; 17
     5be:	b0 c0       	rjmp	.+352    	; 0x720 <__mulsf3+0x1e8>
     5c0:	2d 84       	ldd	r2, Y+13	; 0x0d
     5c2:	3e 84       	ldd	r3, Y+14	; 0x0e
     5c4:	4f 84       	ldd	r4, Y+15	; 0x0f
     5c6:	58 88       	ldd	r5, Y+16	; 0x10
     5c8:	6d 88       	ldd	r6, Y+21	; 0x15
     5ca:	7e 88       	ldd	r7, Y+22	; 0x16
     5cc:	8f 88       	ldd	r8, Y+23	; 0x17
     5ce:	98 8c       	ldd	r9, Y+24	; 0x18
     5d0:	ee 24       	eor	r14, r14
     5d2:	ff 24       	eor	r15, r15
     5d4:	87 01       	movw	r16, r14
     5d6:	aa 24       	eor	r10, r10
     5d8:	bb 24       	eor	r11, r11
     5da:	65 01       	movw	r12, r10
     5dc:	40 e0       	ldi	r20, 0x00	; 0
     5de:	50 e0       	ldi	r21, 0x00	; 0
     5e0:	60 e0       	ldi	r22, 0x00	; 0
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	e0 e0       	ldi	r30, 0x00	; 0
     5e6:	f0 e0       	ldi	r31, 0x00	; 0
     5e8:	c1 01       	movw	r24, r2
     5ea:	81 70       	andi	r24, 0x01	; 1
     5ec:	90 70       	andi	r25, 0x00	; 0
     5ee:	89 2b       	or	r24, r25
     5f0:	e9 f0       	breq	.+58     	; 0x62c <__mulsf3+0xf4>
     5f2:	e6 0c       	add	r14, r6
     5f4:	f7 1c       	adc	r15, r7
     5f6:	08 1d       	adc	r16, r8
     5f8:	19 1d       	adc	r17, r9
     5fa:	9a 01       	movw	r18, r20
     5fc:	ab 01       	movw	r20, r22
     5fe:	2a 0d       	add	r18, r10
     600:	3b 1d       	adc	r19, r11
     602:	4c 1d       	adc	r20, r12
     604:	5d 1d       	adc	r21, r13
     606:	80 e0       	ldi	r24, 0x00	; 0
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	a0 e0       	ldi	r26, 0x00	; 0
     60c:	b0 e0       	ldi	r27, 0x00	; 0
     60e:	e6 14       	cp	r14, r6
     610:	f7 04       	cpc	r15, r7
     612:	08 05       	cpc	r16, r8
     614:	19 05       	cpc	r17, r9
     616:	20 f4       	brcc	.+8      	; 0x620 <__mulsf3+0xe8>
     618:	81 e0       	ldi	r24, 0x01	; 1
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	a0 e0       	ldi	r26, 0x00	; 0
     61e:	b0 e0       	ldi	r27, 0x00	; 0
     620:	ba 01       	movw	r22, r20
     622:	a9 01       	movw	r20, r18
     624:	48 0f       	add	r20, r24
     626:	59 1f       	adc	r21, r25
     628:	6a 1f       	adc	r22, r26
     62a:	7b 1f       	adc	r23, r27
     62c:	aa 0c       	add	r10, r10
     62e:	bb 1c       	adc	r11, r11
     630:	cc 1c       	adc	r12, r12
     632:	dd 1c       	adc	r13, r13
     634:	97 fe       	sbrs	r9, 7
     636:	08 c0       	rjmp	.+16     	; 0x648 <__mulsf3+0x110>
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	a0 e0       	ldi	r26, 0x00	; 0
     63e:	b0 e0       	ldi	r27, 0x00	; 0
     640:	a8 2a       	or	r10, r24
     642:	b9 2a       	or	r11, r25
     644:	ca 2a       	or	r12, r26
     646:	db 2a       	or	r13, r27
     648:	31 96       	adiw	r30, 0x01	; 1
     64a:	e0 32       	cpi	r30, 0x20	; 32
     64c:	f1 05       	cpc	r31, r1
     64e:	49 f0       	breq	.+18     	; 0x662 <__mulsf3+0x12a>
     650:	66 0c       	add	r6, r6
     652:	77 1c       	adc	r7, r7
     654:	88 1c       	adc	r8, r8
     656:	99 1c       	adc	r9, r9
     658:	56 94       	lsr	r5
     65a:	47 94       	ror	r4
     65c:	37 94       	ror	r3
     65e:	27 94       	ror	r2
     660:	c3 cf       	rjmp	.-122    	; 0x5e8 <__mulsf3+0xb0>
     662:	fa 85       	ldd	r31, Y+10	; 0x0a
     664:	ea 89       	ldd	r30, Y+18	; 0x12
     666:	2b 89       	ldd	r18, Y+19	; 0x13
     668:	3c 89       	ldd	r19, Y+20	; 0x14
     66a:	8b 85       	ldd	r24, Y+11	; 0x0b
     66c:	9c 85       	ldd	r25, Y+12	; 0x0c
     66e:	28 0f       	add	r18, r24
     670:	39 1f       	adc	r19, r25
     672:	2e 5f       	subi	r18, 0xFE	; 254
     674:	3f 4f       	sbci	r19, 0xFF	; 255
     676:	17 c0       	rjmp	.+46     	; 0x6a6 <__mulsf3+0x16e>
     678:	ca 01       	movw	r24, r20
     67a:	81 70       	andi	r24, 0x01	; 1
     67c:	90 70       	andi	r25, 0x00	; 0
     67e:	89 2b       	or	r24, r25
     680:	61 f0       	breq	.+24     	; 0x69a <__mulsf3+0x162>
     682:	16 95       	lsr	r17
     684:	07 95       	ror	r16
     686:	f7 94       	ror	r15
     688:	e7 94       	ror	r14
     68a:	80 e0       	ldi	r24, 0x00	; 0
     68c:	90 e0       	ldi	r25, 0x00	; 0
     68e:	a0 e0       	ldi	r26, 0x00	; 0
     690:	b0 e8       	ldi	r27, 0x80	; 128
     692:	e8 2a       	or	r14, r24
     694:	f9 2a       	or	r15, r25
     696:	0a 2b       	or	r16, r26
     698:	1b 2b       	or	r17, r27
     69a:	76 95       	lsr	r23
     69c:	67 95       	ror	r22
     69e:	57 95       	ror	r21
     6a0:	47 95       	ror	r20
     6a2:	2f 5f       	subi	r18, 0xFF	; 255
     6a4:	3f 4f       	sbci	r19, 0xFF	; 255
     6a6:	77 fd       	sbrc	r23, 7
     6a8:	e7 cf       	rjmp	.-50     	; 0x678 <__mulsf3+0x140>
     6aa:	0c c0       	rjmp	.+24     	; 0x6c4 <__mulsf3+0x18c>
     6ac:	44 0f       	add	r20, r20
     6ae:	55 1f       	adc	r21, r21
     6b0:	66 1f       	adc	r22, r22
     6b2:	77 1f       	adc	r23, r23
     6b4:	17 fd       	sbrc	r17, 7
     6b6:	41 60       	ori	r20, 0x01	; 1
     6b8:	ee 0c       	add	r14, r14
     6ba:	ff 1c       	adc	r15, r15
     6bc:	00 1f       	adc	r16, r16
     6be:	11 1f       	adc	r17, r17
     6c0:	21 50       	subi	r18, 0x01	; 1
     6c2:	30 40       	sbci	r19, 0x00	; 0
     6c4:	40 30       	cpi	r20, 0x00	; 0
     6c6:	90 e0       	ldi	r25, 0x00	; 0
     6c8:	59 07       	cpc	r21, r25
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	69 07       	cpc	r22, r25
     6ce:	90 e4       	ldi	r25, 0x40	; 64
     6d0:	79 07       	cpc	r23, r25
     6d2:	60 f3       	brcs	.-40     	; 0x6ac <__mulsf3+0x174>
     6d4:	2b 8f       	std	Y+27, r18	; 0x1b
     6d6:	3c 8f       	std	Y+28, r19	; 0x1c
     6d8:	db 01       	movw	r26, r22
     6da:	ca 01       	movw	r24, r20
     6dc:	8f 77       	andi	r24, 0x7F	; 127
     6de:	90 70       	andi	r25, 0x00	; 0
     6e0:	a0 70       	andi	r26, 0x00	; 0
     6e2:	b0 70       	andi	r27, 0x00	; 0
     6e4:	80 34       	cpi	r24, 0x40	; 64
     6e6:	91 05       	cpc	r25, r1
     6e8:	a1 05       	cpc	r26, r1
     6ea:	b1 05       	cpc	r27, r1
     6ec:	61 f4       	brne	.+24     	; 0x706 <__mulsf3+0x1ce>
     6ee:	47 fd       	sbrc	r20, 7
     6f0:	0a c0       	rjmp	.+20     	; 0x706 <__mulsf3+0x1ce>
     6f2:	e1 14       	cp	r14, r1
     6f4:	f1 04       	cpc	r15, r1
     6f6:	01 05       	cpc	r16, r1
     6f8:	11 05       	cpc	r17, r1
     6fa:	29 f0       	breq	.+10     	; 0x706 <__mulsf3+0x1ce>
     6fc:	40 5c       	subi	r20, 0xC0	; 192
     6fe:	5f 4f       	sbci	r21, 0xFF	; 255
     700:	6f 4f       	sbci	r22, 0xFF	; 255
     702:	7f 4f       	sbci	r23, 0xFF	; 255
     704:	40 78       	andi	r20, 0x80	; 128
     706:	1a 8e       	std	Y+26, r1	; 0x1a
     708:	fe 17       	cp	r31, r30
     70a:	11 f0       	breq	.+4      	; 0x710 <__mulsf3+0x1d8>
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	8a 8f       	std	Y+26, r24	; 0x1a
     710:	4d 8f       	std	Y+29, r20	; 0x1d
     712:	5e 8f       	std	Y+30, r21	; 0x1e
     714:	6f 8f       	std	Y+31, r22	; 0x1f
     716:	78 a3       	std	Y+32, r23	; 0x20
     718:	83 e0       	ldi	r24, 0x03	; 3
     71a:	89 8f       	std	Y+25, r24	; 0x19
     71c:	ce 01       	movw	r24, r28
     71e:	49 96       	adiw	r24, 0x19	; 25
     720:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     724:	a0 96       	adiw	r28, 0x20	; 32
     726:	e2 e1       	ldi	r30, 0x12	; 18
     728:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__epilogue_restores__>

0000072c <__divsf3>:
     72c:	a8 e1       	ldi	r26, 0x18	; 24
     72e:	b0 e0       	ldi	r27, 0x00	; 0
     730:	ec e9       	ldi	r30, 0x9C	; 156
     732:	f3 e0       	ldi	r31, 0x03	; 3
     734:	0c 94 8c 15 	jmp	0x2b18	; 0x2b18 <__prologue_saves__+0x10>
     738:	69 83       	std	Y+1, r22	; 0x01
     73a:	7a 83       	std	Y+2, r23	; 0x02
     73c:	8b 83       	std	Y+3, r24	; 0x03
     73e:	9c 83       	std	Y+4, r25	; 0x04
     740:	2d 83       	std	Y+5, r18	; 0x05
     742:	3e 83       	std	Y+6, r19	; 0x06
     744:	4f 83       	std	Y+7, r20	; 0x07
     746:	58 87       	std	Y+8, r21	; 0x08
     748:	b9 e0       	ldi	r27, 0x09	; 9
     74a:	eb 2e       	mov	r14, r27
     74c:	f1 2c       	mov	r15, r1
     74e:	ec 0e       	add	r14, r28
     750:	fd 1e       	adc	r15, r29
     752:	ce 01       	movw	r24, r28
     754:	01 96       	adiw	r24, 0x01	; 1
     756:	b7 01       	movw	r22, r14
     758:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     75c:	8e 01       	movw	r16, r28
     75e:	0f 5e       	subi	r16, 0xEF	; 239
     760:	1f 4f       	sbci	r17, 0xFF	; 255
     762:	ce 01       	movw	r24, r28
     764:	05 96       	adiw	r24, 0x05	; 5
     766:	b8 01       	movw	r22, r16
     768:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     76c:	29 85       	ldd	r18, Y+9	; 0x09
     76e:	22 30       	cpi	r18, 0x02	; 2
     770:	08 f4       	brcc	.+2      	; 0x774 <__divsf3+0x48>
     772:	7e c0       	rjmp	.+252    	; 0x870 <__stack+0x11>
     774:	39 89       	ldd	r19, Y+17	; 0x11
     776:	32 30       	cpi	r19, 0x02	; 2
     778:	10 f4       	brcc	.+4      	; 0x77e <__divsf3+0x52>
     77a:	b8 01       	movw	r22, r16
     77c:	7c c0       	rjmp	.+248    	; 0x876 <__stack+0x17>
     77e:	8a 85       	ldd	r24, Y+10	; 0x0a
     780:	9a 89       	ldd	r25, Y+18	; 0x12
     782:	89 27       	eor	r24, r25
     784:	8a 87       	std	Y+10, r24	; 0x0a
     786:	24 30       	cpi	r18, 0x04	; 4
     788:	11 f0       	breq	.+4      	; 0x78e <__divsf3+0x62>
     78a:	22 30       	cpi	r18, 0x02	; 2
     78c:	31 f4       	brne	.+12     	; 0x79a <__divsf3+0x6e>
     78e:	23 17       	cp	r18, r19
     790:	09 f0       	breq	.+2      	; 0x794 <__divsf3+0x68>
     792:	6e c0       	rjmp	.+220    	; 0x870 <__stack+0x11>
     794:	60 e7       	ldi	r22, 0x70	; 112
     796:	70 e0       	ldi	r23, 0x00	; 0
     798:	6e c0       	rjmp	.+220    	; 0x876 <__stack+0x17>
     79a:	34 30       	cpi	r19, 0x04	; 4
     79c:	39 f4       	brne	.+14     	; 0x7ac <__divsf3+0x80>
     79e:	1d 86       	std	Y+13, r1	; 0x0d
     7a0:	1e 86       	std	Y+14, r1	; 0x0e
     7a2:	1f 86       	std	Y+15, r1	; 0x0f
     7a4:	18 8a       	std	Y+16, r1	; 0x10
     7a6:	1c 86       	std	Y+12, r1	; 0x0c
     7a8:	1b 86       	std	Y+11, r1	; 0x0b
     7aa:	04 c0       	rjmp	.+8      	; 0x7b4 <__divsf3+0x88>
     7ac:	32 30       	cpi	r19, 0x02	; 2
     7ae:	21 f4       	brne	.+8      	; 0x7b8 <__divsf3+0x8c>
     7b0:	84 e0       	ldi	r24, 0x04	; 4
     7b2:	89 87       	std	Y+9, r24	; 0x09
     7b4:	b7 01       	movw	r22, r14
     7b6:	5f c0       	rjmp	.+190    	; 0x876 <__stack+0x17>
     7b8:	2b 85       	ldd	r18, Y+11	; 0x0b
     7ba:	3c 85       	ldd	r19, Y+12	; 0x0c
     7bc:	8b 89       	ldd	r24, Y+19	; 0x13
     7be:	9c 89       	ldd	r25, Y+20	; 0x14
     7c0:	28 1b       	sub	r18, r24
     7c2:	39 0b       	sbc	r19, r25
     7c4:	3c 87       	std	Y+12, r19	; 0x0c
     7c6:	2b 87       	std	Y+11, r18	; 0x0b
     7c8:	ed 84       	ldd	r14, Y+13	; 0x0d
     7ca:	fe 84       	ldd	r15, Y+14	; 0x0e
     7cc:	0f 85       	ldd	r16, Y+15	; 0x0f
     7ce:	18 89       	ldd	r17, Y+16	; 0x10
     7d0:	ad 88       	ldd	r10, Y+21	; 0x15
     7d2:	be 88       	ldd	r11, Y+22	; 0x16
     7d4:	cf 88       	ldd	r12, Y+23	; 0x17
     7d6:	d8 8c       	ldd	r13, Y+24	; 0x18
     7d8:	ea 14       	cp	r14, r10
     7da:	fb 04       	cpc	r15, r11
     7dc:	0c 05       	cpc	r16, r12
     7de:	1d 05       	cpc	r17, r13
     7e0:	40 f4       	brcc	.+16     	; 0x7f2 <__divsf3+0xc6>
     7e2:	ee 0c       	add	r14, r14
     7e4:	ff 1c       	adc	r15, r15
     7e6:	00 1f       	adc	r16, r16
     7e8:	11 1f       	adc	r17, r17
     7ea:	21 50       	subi	r18, 0x01	; 1
     7ec:	30 40       	sbci	r19, 0x00	; 0
     7ee:	3c 87       	std	Y+12, r19	; 0x0c
     7f0:	2b 87       	std	Y+11, r18	; 0x0b
     7f2:	20 e0       	ldi	r18, 0x00	; 0
     7f4:	30 e0       	ldi	r19, 0x00	; 0
     7f6:	40 e0       	ldi	r20, 0x00	; 0
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	a0 e0       	ldi	r26, 0x00	; 0
     800:	b0 e4       	ldi	r27, 0x40	; 64
     802:	60 e0       	ldi	r22, 0x00	; 0
     804:	70 e0       	ldi	r23, 0x00	; 0
     806:	ea 14       	cp	r14, r10
     808:	fb 04       	cpc	r15, r11
     80a:	0c 05       	cpc	r16, r12
     80c:	1d 05       	cpc	r17, r13
     80e:	40 f0       	brcs	.+16     	; 0x820 <__divsf3+0xf4>
     810:	28 2b       	or	r18, r24
     812:	39 2b       	or	r19, r25
     814:	4a 2b       	or	r20, r26
     816:	5b 2b       	or	r21, r27
     818:	ea 18       	sub	r14, r10
     81a:	fb 08       	sbc	r15, r11
     81c:	0c 09       	sbc	r16, r12
     81e:	1d 09       	sbc	r17, r13
     820:	b6 95       	lsr	r27
     822:	a7 95       	ror	r26
     824:	97 95       	ror	r25
     826:	87 95       	ror	r24
     828:	ee 0c       	add	r14, r14
     82a:	ff 1c       	adc	r15, r15
     82c:	00 1f       	adc	r16, r16
     82e:	11 1f       	adc	r17, r17
     830:	6f 5f       	subi	r22, 0xFF	; 255
     832:	7f 4f       	sbci	r23, 0xFF	; 255
     834:	6f 31       	cpi	r22, 0x1F	; 31
     836:	71 05       	cpc	r23, r1
     838:	31 f7       	brne	.-52     	; 0x806 <__divsf3+0xda>
     83a:	da 01       	movw	r26, r20
     83c:	c9 01       	movw	r24, r18
     83e:	8f 77       	andi	r24, 0x7F	; 127
     840:	90 70       	andi	r25, 0x00	; 0
     842:	a0 70       	andi	r26, 0x00	; 0
     844:	b0 70       	andi	r27, 0x00	; 0
     846:	80 34       	cpi	r24, 0x40	; 64
     848:	91 05       	cpc	r25, r1
     84a:	a1 05       	cpc	r26, r1
     84c:	b1 05       	cpc	r27, r1
     84e:	61 f4       	brne	.+24     	; 0x868 <__stack+0x9>
     850:	27 fd       	sbrc	r18, 7
     852:	0a c0       	rjmp	.+20     	; 0x868 <__stack+0x9>
     854:	e1 14       	cp	r14, r1
     856:	f1 04       	cpc	r15, r1
     858:	01 05       	cpc	r16, r1
     85a:	11 05       	cpc	r17, r1
     85c:	29 f0       	breq	.+10     	; 0x868 <__stack+0x9>
     85e:	20 5c       	subi	r18, 0xC0	; 192
     860:	3f 4f       	sbci	r19, 0xFF	; 255
     862:	4f 4f       	sbci	r20, 0xFF	; 255
     864:	5f 4f       	sbci	r21, 0xFF	; 255
     866:	20 78       	andi	r18, 0x80	; 128
     868:	2d 87       	std	Y+13, r18	; 0x0d
     86a:	3e 87       	std	Y+14, r19	; 0x0e
     86c:	4f 87       	std	Y+15, r20	; 0x0f
     86e:	58 8b       	std	Y+16, r21	; 0x10
     870:	be 01       	movw	r22, r28
     872:	67 5f       	subi	r22, 0xF7	; 247
     874:	7f 4f       	sbci	r23, 0xFF	; 255
     876:	cb 01       	movw	r24, r22
     878:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     87c:	68 96       	adiw	r28, 0x18	; 24
     87e:	ea e0       	ldi	r30, 0x0A	; 10
     880:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__epilogue_restores__+0x10>

00000884 <__gtsf2>:
     884:	a8 e1       	ldi	r26, 0x18	; 24
     886:	b0 e0       	ldi	r27, 0x00	; 0
     888:	e8 e4       	ldi	r30, 0x48	; 72
     88a:	f4 e0       	ldi	r31, 0x04	; 4
     88c:	0c 94 90 15 	jmp	0x2b20	; 0x2b20 <__prologue_saves__+0x18>
     890:	69 83       	std	Y+1, r22	; 0x01
     892:	7a 83       	std	Y+2, r23	; 0x02
     894:	8b 83       	std	Y+3, r24	; 0x03
     896:	9c 83       	std	Y+4, r25	; 0x04
     898:	2d 83       	std	Y+5, r18	; 0x05
     89a:	3e 83       	std	Y+6, r19	; 0x06
     89c:	4f 83       	std	Y+7, r20	; 0x07
     89e:	58 87       	std	Y+8, r21	; 0x08
     8a0:	89 e0       	ldi	r24, 0x09	; 9
     8a2:	e8 2e       	mov	r14, r24
     8a4:	f1 2c       	mov	r15, r1
     8a6:	ec 0e       	add	r14, r28
     8a8:	fd 1e       	adc	r15, r29
     8aa:	ce 01       	movw	r24, r28
     8ac:	01 96       	adiw	r24, 0x01	; 1
     8ae:	b7 01       	movw	r22, r14
     8b0:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     8b4:	8e 01       	movw	r16, r28
     8b6:	0f 5e       	subi	r16, 0xEF	; 239
     8b8:	1f 4f       	sbci	r17, 0xFF	; 255
     8ba:	ce 01       	movw	r24, r28
     8bc:	05 96       	adiw	r24, 0x05	; 5
     8be:	b8 01       	movw	r22, r16
     8c0:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     8c4:	89 85       	ldd	r24, Y+9	; 0x09
     8c6:	82 30       	cpi	r24, 0x02	; 2
     8c8:	40 f0       	brcs	.+16     	; 0x8da <__gtsf2+0x56>
     8ca:	89 89       	ldd	r24, Y+17	; 0x11
     8cc:	82 30       	cpi	r24, 0x02	; 2
     8ce:	28 f0       	brcs	.+10     	; 0x8da <__gtsf2+0x56>
     8d0:	c7 01       	movw	r24, r14
     8d2:	b8 01       	movw	r22, r16
     8d4:	0e 94 99 07 	call	0xf32	; 0xf32 <__fpcmp_parts_f>
     8d8:	01 c0       	rjmp	.+2      	; 0x8dc <__gtsf2+0x58>
     8da:	8f ef       	ldi	r24, 0xFF	; 255
     8dc:	68 96       	adiw	r28, 0x18	; 24
     8de:	e6 e0       	ldi	r30, 0x06	; 6
     8e0:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <__epilogue_restores__+0x18>

000008e4 <__gesf2>:
     8e4:	a8 e1       	ldi	r26, 0x18	; 24
     8e6:	b0 e0       	ldi	r27, 0x00	; 0
     8e8:	e8 e7       	ldi	r30, 0x78	; 120
     8ea:	f4 e0       	ldi	r31, 0x04	; 4
     8ec:	0c 94 90 15 	jmp	0x2b20	; 0x2b20 <__prologue_saves__+0x18>
     8f0:	69 83       	std	Y+1, r22	; 0x01
     8f2:	7a 83       	std	Y+2, r23	; 0x02
     8f4:	8b 83       	std	Y+3, r24	; 0x03
     8f6:	9c 83       	std	Y+4, r25	; 0x04
     8f8:	2d 83       	std	Y+5, r18	; 0x05
     8fa:	3e 83       	std	Y+6, r19	; 0x06
     8fc:	4f 83       	std	Y+7, r20	; 0x07
     8fe:	58 87       	std	Y+8, r21	; 0x08
     900:	89 e0       	ldi	r24, 0x09	; 9
     902:	e8 2e       	mov	r14, r24
     904:	f1 2c       	mov	r15, r1
     906:	ec 0e       	add	r14, r28
     908:	fd 1e       	adc	r15, r29
     90a:	ce 01       	movw	r24, r28
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	b7 01       	movw	r22, r14
     910:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     914:	8e 01       	movw	r16, r28
     916:	0f 5e       	subi	r16, 0xEF	; 239
     918:	1f 4f       	sbci	r17, 0xFF	; 255
     91a:	ce 01       	movw	r24, r28
     91c:	05 96       	adiw	r24, 0x05	; 5
     91e:	b8 01       	movw	r22, r16
     920:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     924:	89 85       	ldd	r24, Y+9	; 0x09
     926:	82 30       	cpi	r24, 0x02	; 2
     928:	40 f0       	brcs	.+16     	; 0x93a <__gesf2+0x56>
     92a:	89 89       	ldd	r24, Y+17	; 0x11
     92c:	82 30       	cpi	r24, 0x02	; 2
     92e:	28 f0       	brcs	.+10     	; 0x93a <__gesf2+0x56>
     930:	c7 01       	movw	r24, r14
     932:	b8 01       	movw	r22, r16
     934:	0e 94 99 07 	call	0xf32	; 0xf32 <__fpcmp_parts_f>
     938:	01 c0       	rjmp	.+2      	; 0x93c <__gesf2+0x58>
     93a:	8f ef       	ldi	r24, 0xFF	; 255
     93c:	68 96       	adiw	r28, 0x18	; 24
     93e:	e6 e0       	ldi	r30, 0x06	; 6
     940:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <__epilogue_restores__+0x18>

00000944 <__ltsf2>:
     944:	a8 e1       	ldi	r26, 0x18	; 24
     946:	b0 e0       	ldi	r27, 0x00	; 0
     948:	e8 ea       	ldi	r30, 0xA8	; 168
     94a:	f4 e0       	ldi	r31, 0x04	; 4
     94c:	0c 94 90 15 	jmp	0x2b20	; 0x2b20 <__prologue_saves__+0x18>
     950:	69 83       	std	Y+1, r22	; 0x01
     952:	7a 83       	std	Y+2, r23	; 0x02
     954:	8b 83       	std	Y+3, r24	; 0x03
     956:	9c 83       	std	Y+4, r25	; 0x04
     958:	2d 83       	std	Y+5, r18	; 0x05
     95a:	3e 83       	std	Y+6, r19	; 0x06
     95c:	4f 83       	std	Y+7, r20	; 0x07
     95e:	58 87       	std	Y+8, r21	; 0x08
     960:	89 e0       	ldi	r24, 0x09	; 9
     962:	e8 2e       	mov	r14, r24
     964:	f1 2c       	mov	r15, r1
     966:	ec 0e       	add	r14, r28
     968:	fd 1e       	adc	r15, r29
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	b7 01       	movw	r22, r14
     970:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     974:	8e 01       	movw	r16, r28
     976:	0f 5e       	subi	r16, 0xEF	; 239
     978:	1f 4f       	sbci	r17, 0xFF	; 255
     97a:	ce 01       	movw	r24, r28
     97c:	05 96       	adiw	r24, 0x05	; 5
     97e:	b8 01       	movw	r22, r16
     980:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     984:	89 85       	ldd	r24, Y+9	; 0x09
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	40 f0       	brcs	.+16     	; 0x99a <__ltsf2+0x56>
     98a:	89 89       	ldd	r24, Y+17	; 0x11
     98c:	82 30       	cpi	r24, 0x02	; 2
     98e:	28 f0       	brcs	.+10     	; 0x99a <__ltsf2+0x56>
     990:	c7 01       	movw	r24, r14
     992:	b8 01       	movw	r22, r16
     994:	0e 94 99 07 	call	0xf32	; 0xf32 <__fpcmp_parts_f>
     998:	01 c0       	rjmp	.+2      	; 0x99c <__ltsf2+0x58>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	68 96       	adiw	r28, 0x18	; 24
     99e:	e6 e0       	ldi	r30, 0x06	; 6
     9a0:	0c 94 ac 15 	jmp	0x2b58	; 0x2b58 <__epilogue_restores__+0x18>

000009a4 <__floatsisf>:
     9a4:	a8 e0       	ldi	r26, 0x08	; 8
     9a6:	b0 e0       	ldi	r27, 0x00	; 0
     9a8:	e8 ed       	ldi	r30, 0xD8	; 216
     9aa:	f4 e0       	ldi	r31, 0x04	; 4
     9ac:	0c 94 8d 15 	jmp	0x2b1a	; 0x2b1a <__prologue_saves__+0x12>
     9b0:	9b 01       	movw	r18, r22
     9b2:	ac 01       	movw	r20, r24
     9b4:	83 e0       	ldi	r24, 0x03	; 3
     9b6:	89 83       	std	Y+1, r24	; 0x01
     9b8:	da 01       	movw	r26, r20
     9ba:	c9 01       	movw	r24, r18
     9bc:	88 27       	eor	r24, r24
     9be:	b7 fd       	sbrc	r27, 7
     9c0:	83 95       	inc	r24
     9c2:	99 27       	eor	r25, r25
     9c4:	aa 27       	eor	r26, r26
     9c6:	bb 27       	eor	r27, r27
     9c8:	b8 2e       	mov	r11, r24
     9ca:	21 15       	cp	r18, r1
     9cc:	31 05       	cpc	r19, r1
     9ce:	41 05       	cpc	r20, r1
     9d0:	51 05       	cpc	r21, r1
     9d2:	19 f4       	brne	.+6      	; 0x9da <__floatsisf+0x36>
     9d4:	82 e0       	ldi	r24, 0x02	; 2
     9d6:	89 83       	std	Y+1, r24	; 0x01
     9d8:	3a c0       	rjmp	.+116    	; 0xa4e <__floatsisf+0xaa>
     9da:	88 23       	and	r24, r24
     9dc:	a9 f0       	breq	.+42     	; 0xa08 <__floatsisf+0x64>
     9de:	20 30       	cpi	r18, 0x00	; 0
     9e0:	80 e0       	ldi	r24, 0x00	; 0
     9e2:	38 07       	cpc	r19, r24
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	48 07       	cpc	r20, r24
     9e8:	80 e8       	ldi	r24, 0x80	; 128
     9ea:	58 07       	cpc	r21, r24
     9ec:	29 f4       	brne	.+10     	; 0x9f8 <__floatsisf+0x54>
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	70 e0       	ldi	r23, 0x00	; 0
     9f2:	80 e0       	ldi	r24, 0x00	; 0
     9f4:	9f ec       	ldi	r25, 0xCF	; 207
     9f6:	30 c0       	rjmp	.+96     	; 0xa58 <__floatsisf+0xb4>
     9f8:	ee 24       	eor	r14, r14
     9fa:	ff 24       	eor	r15, r15
     9fc:	87 01       	movw	r16, r14
     9fe:	e2 1a       	sub	r14, r18
     a00:	f3 0a       	sbc	r15, r19
     a02:	04 0b       	sbc	r16, r20
     a04:	15 0b       	sbc	r17, r21
     a06:	02 c0       	rjmp	.+4      	; 0xa0c <__floatsisf+0x68>
     a08:	79 01       	movw	r14, r18
     a0a:	8a 01       	movw	r16, r20
     a0c:	8e e1       	ldi	r24, 0x1E	; 30
     a0e:	c8 2e       	mov	r12, r24
     a10:	d1 2c       	mov	r13, r1
     a12:	dc 82       	std	Y+4, r13	; 0x04
     a14:	cb 82       	std	Y+3, r12	; 0x03
     a16:	ed 82       	std	Y+5, r14	; 0x05
     a18:	fe 82       	std	Y+6, r15	; 0x06
     a1a:	0f 83       	std	Y+7, r16	; 0x07
     a1c:	18 87       	std	Y+8, r17	; 0x08
     a1e:	c8 01       	movw	r24, r16
     a20:	b7 01       	movw	r22, r14
     a22:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__clzsi2>
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	18 16       	cp	r1, r24
     a2a:	19 06       	cpc	r1, r25
     a2c:	84 f4       	brge	.+32     	; 0xa4e <__floatsisf+0xaa>
     a2e:	08 2e       	mov	r0, r24
     a30:	04 c0       	rjmp	.+8      	; 0xa3a <__floatsisf+0x96>
     a32:	ee 0c       	add	r14, r14
     a34:	ff 1c       	adc	r15, r15
     a36:	00 1f       	adc	r16, r16
     a38:	11 1f       	adc	r17, r17
     a3a:	0a 94       	dec	r0
     a3c:	d2 f7       	brpl	.-12     	; 0xa32 <__floatsisf+0x8e>
     a3e:	ed 82       	std	Y+5, r14	; 0x05
     a40:	fe 82       	std	Y+6, r15	; 0x06
     a42:	0f 83       	std	Y+7, r16	; 0x07
     a44:	18 87       	std	Y+8, r17	; 0x08
     a46:	c8 1a       	sub	r12, r24
     a48:	d9 0a       	sbc	r13, r25
     a4a:	dc 82       	std	Y+4, r13	; 0x04
     a4c:	cb 82       	std	Y+3, r12	; 0x03
     a4e:	ba 82       	std	Y+2, r11	; 0x02
     a50:	ce 01       	movw	r24, r28
     a52:	01 96       	adiw	r24, 0x01	; 1
     a54:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     a58:	28 96       	adiw	r28, 0x08	; 8
     a5a:	e9 e0       	ldi	r30, 0x09	; 9
     a5c:	0c 94 a9 15 	jmp	0x2b52	; 0x2b52 <__epilogue_restores__+0x12>

00000a60 <__fixsfsi>:
     a60:	ac e0       	ldi	r26, 0x0C	; 12
     a62:	b0 e0       	ldi	r27, 0x00	; 0
     a64:	e6 e3       	ldi	r30, 0x36	; 54
     a66:	f5 e0       	ldi	r31, 0x05	; 5
     a68:	0c 94 94 15 	jmp	0x2b28	; 0x2b28 <__prologue_saves__+0x20>
     a6c:	69 83       	std	Y+1, r22	; 0x01
     a6e:	7a 83       	std	Y+2, r23	; 0x02
     a70:	8b 83       	std	Y+3, r24	; 0x03
     a72:	9c 83       	std	Y+4, r25	; 0x04
     a74:	ce 01       	movw	r24, r28
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	be 01       	movw	r22, r28
     a7a:	6b 5f       	subi	r22, 0xFB	; 251
     a7c:	7f 4f       	sbci	r23, 0xFF	; 255
     a7e:	0e 94 21 07 	call	0xe42	; 0xe42 <__unpack_f>
     a82:	8d 81       	ldd	r24, Y+5	; 0x05
     a84:	82 30       	cpi	r24, 0x02	; 2
     a86:	61 f1       	breq	.+88     	; 0xae0 <__fixsfsi+0x80>
     a88:	82 30       	cpi	r24, 0x02	; 2
     a8a:	50 f1       	brcs	.+84     	; 0xae0 <__fixsfsi+0x80>
     a8c:	84 30       	cpi	r24, 0x04	; 4
     a8e:	21 f4       	brne	.+8      	; 0xa98 <__fixsfsi+0x38>
     a90:	8e 81       	ldd	r24, Y+6	; 0x06
     a92:	88 23       	and	r24, r24
     a94:	51 f1       	breq	.+84     	; 0xaea <__fixsfsi+0x8a>
     a96:	2e c0       	rjmp	.+92     	; 0xaf4 <__fixsfsi+0x94>
     a98:	2f 81       	ldd	r18, Y+7	; 0x07
     a9a:	38 85       	ldd	r19, Y+8	; 0x08
     a9c:	37 fd       	sbrc	r19, 7
     a9e:	20 c0       	rjmp	.+64     	; 0xae0 <__fixsfsi+0x80>
     aa0:	6e 81       	ldd	r22, Y+6	; 0x06
     aa2:	2f 31       	cpi	r18, 0x1F	; 31
     aa4:	31 05       	cpc	r19, r1
     aa6:	1c f0       	brlt	.+6      	; 0xaae <__fixsfsi+0x4e>
     aa8:	66 23       	and	r22, r22
     aaa:	f9 f0       	breq	.+62     	; 0xaea <__fixsfsi+0x8a>
     aac:	23 c0       	rjmp	.+70     	; 0xaf4 <__fixsfsi+0x94>
     aae:	8e e1       	ldi	r24, 0x1E	; 30
     ab0:	90 e0       	ldi	r25, 0x00	; 0
     ab2:	82 1b       	sub	r24, r18
     ab4:	93 0b       	sbc	r25, r19
     ab6:	29 85       	ldd	r18, Y+9	; 0x09
     ab8:	3a 85       	ldd	r19, Y+10	; 0x0a
     aba:	4b 85       	ldd	r20, Y+11	; 0x0b
     abc:	5c 85       	ldd	r21, Y+12	; 0x0c
     abe:	04 c0       	rjmp	.+8      	; 0xac8 <__fixsfsi+0x68>
     ac0:	56 95       	lsr	r21
     ac2:	47 95       	ror	r20
     ac4:	37 95       	ror	r19
     ac6:	27 95       	ror	r18
     ac8:	8a 95       	dec	r24
     aca:	d2 f7       	brpl	.-12     	; 0xac0 <__fixsfsi+0x60>
     acc:	66 23       	and	r22, r22
     ace:	b1 f0       	breq	.+44     	; 0xafc <__fixsfsi+0x9c>
     ad0:	50 95       	com	r21
     ad2:	40 95       	com	r20
     ad4:	30 95       	com	r19
     ad6:	21 95       	neg	r18
     ad8:	3f 4f       	sbci	r19, 0xFF	; 255
     ada:	4f 4f       	sbci	r20, 0xFF	; 255
     adc:	5f 4f       	sbci	r21, 0xFF	; 255
     ade:	0e c0       	rjmp	.+28     	; 0xafc <__fixsfsi+0x9c>
     ae0:	20 e0       	ldi	r18, 0x00	; 0
     ae2:	30 e0       	ldi	r19, 0x00	; 0
     ae4:	40 e0       	ldi	r20, 0x00	; 0
     ae6:	50 e0       	ldi	r21, 0x00	; 0
     ae8:	09 c0       	rjmp	.+18     	; 0xafc <__fixsfsi+0x9c>
     aea:	2f ef       	ldi	r18, 0xFF	; 255
     aec:	3f ef       	ldi	r19, 0xFF	; 255
     aee:	4f ef       	ldi	r20, 0xFF	; 255
     af0:	5f e7       	ldi	r21, 0x7F	; 127
     af2:	04 c0       	rjmp	.+8      	; 0xafc <__fixsfsi+0x9c>
     af4:	20 e0       	ldi	r18, 0x00	; 0
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	40 e0       	ldi	r20, 0x00	; 0
     afa:	50 e8       	ldi	r21, 0x80	; 128
     afc:	b9 01       	movw	r22, r18
     afe:	ca 01       	movw	r24, r20
     b00:	2c 96       	adiw	r28, 0x0c	; 12
     b02:	e2 e0       	ldi	r30, 0x02	; 2
     b04:	0c 94 b0 15 	jmp	0x2b60	; 0x2b60 <__epilogue_restores__+0x20>

00000b08 <__floatunsisf>:
     b08:	a8 e0       	ldi	r26, 0x08	; 8
     b0a:	b0 e0       	ldi	r27, 0x00	; 0
     b0c:	ea e8       	ldi	r30, 0x8A	; 138
     b0e:	f5 e0       	ldi	r31, 0x05	; 5
     b10:	0c 94 8c 15 	jmp	0x2b18	; 0x2b18 <__prologue_saves__+0x10>
     b14:	7b 01       	movw	r14, r22
     b16:	8c 01       	movw	r16, r24
     b18:	61 15       	cp	r22, r1
     b1a:	71 05       	cpc	r23, r1
     b1c:	81 05       	cpc	r24, r1
     b1e:	91 05       	cpc	r25, r1
     b20:	19 f4       	brne	.+6      	; 0xb28 <__floatunsisf+0x20>
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	89 83       	std	Y+1, r24	; 0x01
     b26:	60 c0       	rjmp	.+192    	; 0xbe8 <__floatunsisf+0xe0>
     b28:	83 e0       	ldi	r24, 0x03	; 3
     b2a:	89 83       	std	Y+1, r24	; 0x01
     b2c:	8e e1       	ldi	r24, 0x1E	; 30
     b2e:	c8 2e       	mov	r12, r24
     b30:	d1 2c       	mov	r13, r1
     b32:	dc 82       	std	Y+4, r13	; 0x04
     b34:	cb 82       	std	Y+3, r12	; 0x03
     b36:	ed 82       	std	Y+5, r14	; 0x05
     b38:	fe 82       	std	Y+6, r15	; 0x06
     b3a:	0f 83       	std	Y+7, r16	; 0x07
     b3c:	18 87       	std	Y+8, r17	; 0x08
     b3e:	c8 01       	movw	r24, r16
     b40:	b7 01       	movw	r22, r14
     b42:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__clzsi2>
     b46:	fc 01       	movw	r30, r24
     b48:	31 97       	sbiw	r30, 0x01	; 1
     b4a:	f7 ff       	sbrs	r31, 7
     b4c:	3b c0       	rjmp	.+118    	; 0xbc4 <__floatunsisf+0xbc>
     b4e:	22 27       	eor	r18, r18
     b50:	33 27       	eor	r19, r19
     b52:	2e 1b       	sub	r18, r30
     b54:	3f 0b       	sbc	r19, r31
     b56:	57 01       	movw	r10, r14
     b58:	68 01       	movw	r12, r16
     b5a:	02 2e       	mov	r0, r18
     b5c:	04 c0       	rjmp	.+8      	; 0xb66 <__floatunsisf+0x5e>
     b5e:	d6 94       	lsr	r13
     b60:	c7 94       	ror	r12
     b62:	b7 94       	ror	r11
     b64:	a7 94       	ror	r10
     b66:	0a 94       	dec	r0
     b68:	d2 f7       	brpl	.-12     	; 0xb5e <__floatunsisf+0x56>
     b6a:	40 e0       	ldi	r20, 0x00	; 0
     b6c:	50 e0       	ldi	r21, 0x00	; 0
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	70 e0       	ldi	r23, 0x00	; 0
     b72:	81 e0       	ldi	r24, 0x01	; 1
     b74:	90 e0       	ldi	r25, 0x00	; 0
     b76:	a0 e0       	ldi	r26, 0x00	; 0
     b78:	b0 e0       	ldi	r27, 0x00	; 0
     b7a:	04 c0       	rjmp	.+8      	; 0xb84 <__floatunsisf+0x7c>
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	aa 1f       	adc	r26, r26
     b82:	bb 1f       	adc	r27, r27
     b84:	2a 95       	dec	r18
     b86:	d2 f7       	brpl	.-12     	; 0xb7c <__floatunsisf+0x74>
     b88:	01 97       	sbiw	r24, 0x01	; 1
     b8a:	a1 09       	sbc	r26, r1
     b8c:	b1 09       	sbc	r27, r1
     b8e:	8e 21       	and	r24, r14
     b90:	9f 21       	and	r25, r15
     b92:	a0 23       	and	r26, r16
     b94:	b1 23       	and	r27, r17
     b96:	00 97       	sbiw	r24, 0x00	; 0
     b98:	a1 05       	cpc	r26, r1
     b9a:	b1 05       	cpc	r27, r1
     b9c:	21 f0       	breq	.+8      	; 0xba6 <__floatunsisf+0x9e>
     b9e:	41 e0       	ldi	r20, 0x01	; 1
     ba0:	50 e0       	ldi	r21, 0x00	; 0
     ba2:	60 e0       	ldi	r22, 0x00	; 0
     ba4:	70 e0       	ldi	r23, 0x00	; 0
     ba6:	4a 29       	or	r20, r10
     ba8:	5b 29       	or	r21, r11
     baa:	6c 29       	or	r22, r12
     bac:	7d 29       	or	r23, r13
     bae:	4d 83       	std	Y+5, r20	; 0x05
     bb0:	5e 83       	std	Y+6, r21	; 0x06
     bb2:	6f 83       	std	Y+7, r22	; 0x07
     bb4:	78 87       	std	Y+8, r23	; 0x08
     bb6:	8e e1       	ldi	r24, 0x1E	; 30
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	8e 1b       	sub	r24, r30
     bbc:	9f 0b       	sbc	r25, r31
     bbe:	9c 83       	std	Y+4, r25	; 0x04
     bc0:	8b 83       	std	Y+3, r24	; 0x03
     bc2:	12 c0       	rjmp	.+36     	; 0xbe8 <__floatunsisf+0xe0>
     bc4:	30 97       	sbiw	r30, 0x00	; 0
     bc6:	81 f0       	breq	.+32     	; 0xbe8 <__floatunsisf+0xe0>
     bc8:	0e 2e       	mov	r0, r30
     bca:	04 c0       	rjmp	.+8      	; 0xbd4 <__floatunsisf+0xcc>
     bcc:	ee 0c       	add	r14, r14
     bce:	ff 1c       	adc	r15, r15
     bd0:	00 1f       	adc	r16, r16
     bd2:	11 1f       	adc	r17, r17
     bd4:	0a 94       	dec	r0
     bd6:	d2 f7       	brpl	.-12     	; 0xbcc <__floatunsisf+0xc4>
     bd8:	ed 82       	std	Y+5, r14	; 0x05
     bda:	fe 82       	std	Y+6, r15	; 0x06
     bdc:	0f 83       	std	Y+7, r16	; 0x07
     bde:	18 87       	std	Y+8, r17	; 0x08
     be0:	ce 1a       	sub	r12, r30
     be2:	df 0a       	sbc	r13, r31
     be4:	dc 82       	std	Y+4, r13	; 0x04
     be6:	cb 82       	std	Y+3, r12	; 0x03
     be8:	1a 82       	std	Y+2, r1	; 0x02
     bea:	ce 01       	movw	r24, r28
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	0e 94 4c 06 	call	0xc98	; 0xc98 <__pack_f>
     bf2:	28 96       	adiw	r28, 0x08	; 8
     bf4:	ea e0       	ldi	r30, 0x0A	; 10
     bf6:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__epilogue_restores__+0x10>

00000bfa <__clzsi2>:
     bfa:	ef 92       	push	r14
     bfc:	ff 92       	push	r15
     bfe:	0f 93       	push	r16
     c00:	1f 93       	push	r17
     c02:	7b 01       	movw	r14, r22
     c04:	8c 01       	movw	r16, r24
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	e8 16       	cp	r14, r24
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	f8 06       	cpc	r15, r24
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	08 07       	cpc	r16, r24
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	18 07       	cpc	r17, r24
     c16:	88 f4       	brcc	.+34     	; 0xc3a <__clzsi2+0x40>
     c18:	8f ef       	ldi	r24, 0xFF	; 255
     c1a:	e8 16       	cp	r14, r24
     c1c:	f1 04       	cpc	r15, r1
     c1e:	01 05       	cpc	r16, r1
     c20:	11 05       	cpc	r17, r1
     c22:	31 f0       	breq	.+12     	; 0xc30 <__clzsi2+0x36>
     c24:	28 f0       	brcs	.+10     	; 0xc30 <__clzsi2+0x36>
     c26:	88 e0       	ldi	r24, 0x08	; 8
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	17 c0       	rjmp	.+46     	; 0xc5e <__clzsi2+0x64>
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	90 e0       	ldi	r25, 0x00	; 0
     c34:	a0 e0       	ldi	r26, 0x00	; 0
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	12 c0       	rjmp	.+36     	; 0xc5e <__clzsi2+0x64>
     c3a:	80 e0       	ldi	r24, 0x00	; 0
     c3c:	e8 16       	cp	r14, r24
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	f8 06       	cpc	r15, r24
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	08 07       	cpc	r16, r24
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	18 07       	cpc	r17, r24
     c4a:	28 f0       	brcs	.+10     	; 0xc56 <__clzsi2+0x5c>
     c4c:	88 e1       	ldi	r24, 0x18	; 24
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	a0 e0       	ldi	r26, 0x00	; 0
     c52:	b0 e0       	ldi	r27, 0x00	; 0
     c54:	04 c0       	rjmp	.+8      	; 0xc5e <__clzsi2+0x64>
     c56:	80 e1       	ldi	r24, 0x10	; 16
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	a0 e0       	ldi	r26, 0x00	; 0
     c5c:	b0 e0       	ldi	r27, 0x00	; 0
     c5e:	20 e2       	ldi	r18, 0x20	; 32
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	40 e0       	ldi	r20, 0x00	; 0
     c64:	50 e0       	ldi	r21, 0x00	; 0
     c66:	28 1b       	sub	r18, r24
     c68:	39 0b       	sbc	r19, r25
     c6a:	4a 0b       	sbc	r20, r26
     c6c:	5b 0b       	sbc	r21, r27
     c6e:	04 c0       	rjmp	.+8      	; 0xc78 <__clzsi2+0x7e>
     c70:	16 95       	lsr	r17
     c72:	07 95       	ror	r16
     c74:	f7 94       	ror	r15
     c76:	e7 94       	ror	r14
     c78:	8a 95       	dec	r24
     c7a:	d2 f7       	brpl	.-12     	; 0xc70 <__clzsi2+0x76>
     c7c:	f7 01       	movw	r30, r14
     c7e:	e8 58       	subi	r30, 0x88	; 136
     c80:	ff 4f       	sbci	r31, 0xFF	; 255
     c82:	80 81       	ld	r24, Z
     c84:	28 1b       	sub	r18, r24
     c86:	31 09       	sbc	r19, r1
     c88:	41 09       	sbc	r20, r1
     c8a:	51 09       	sbc	r21, r1
     c8c:	c9 01       	movw	r24, r18
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	08 95       	ret

00000c98 <__pack_f>:
     c98:	df 92       	push	r13
     c9a:	ef 92       	push	r14
     c9c:	ff 92       	push	r15
     c9e:	0f 93       	push	r16
     ca0:	1f 93       	push	r17
     ca2:	fc 01       	movw	r30, r24
     ca4:	e4 80       	ldd	r14, Z+4	; 0x04
     ca6:	f5 80       	ldd	r15, Z+5	; 0x05
     ca8:	06 81       	ldd	r16, Z+6	; 0x06
     caa:	17 81       	ldd	r17, Z+7	; 0x07
     cac:	d1 80       	ldd	r13, Z+1	; 0x01
     cae:	80 81       	ld	r24, Z
     cb0:	82 30       	cpi	r24, 0x02	; 2
     cb2:	48 f4       	brcc	.+18     	; 0xcc6 <__pack_f+0x2e>
     cb4:	80 e0       	ldi	r24, 0x00	; 0
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e1       	ldi	r26, 0x10	; 16
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	e8 2a       	or	r14, r24
     cbe:	f9 2a       	or	r15, r25
     cc0:	0a 2b       	or	r16, r26
     cc2:	1b 2b       	or	r17, r27
     cc4:	a5 c0       	rjmp	.+330    	; 0xe10 <__pack_f+0x178>
     cc6:	84 30       	cpi	r24, 0x04	; 4
     cc8:	09 f4       	brne	.+2      	; 0xccc <__pack_f+0x34>
     cca:	9f c0       	rjmp	.+318    	; 0xe0a <__pack_f+0x172>
     ccc:	82 30       	cpi	r24, 0x02	; 2
     cce:	21 f4       	brne	.+8      	; 0xcd8 <__pack_f+0x40>
     cd0:	ee 24       	eor	r14, r14
     cd2:	ff 24       	eor	r15, r15
     cd4:	87 01       	movw	r16, r14
     cd6:	05 c0       	rjmp	.+10     	; 0xce2 <__pack_f+0x4a>
     cd8:	e1 14       	cp	r14, r1
     cda:	f1 04       	cpc	r15, r1
     cdc:	01 05       	cpc	r16, r1
     cde:	11 05       	cpc	r17, r1
     ce0:	19 f4       	brne	.+6      	; 0xce8 <__pack_f+0x50>
     ce2:	e0 e0       	ldi	r30, 0x00	; 0
     ce4:	f0 e0       	ldi	r31, 0x00	; 0
     ce6:	96 c0       	rjmp	.+300    	; 0xe14 <__pack_f+0x17c>
     ce8:	62 81       	ldd	r22, Z+2	; 0x02
     cea:	73 81       	ldd	r23, Z+3	; 0x03
     cec:	9f ef       	ldi	r25, 0xFF	; 255
     cee:	62 38       	cpi	r22, 0x82	; 130
     cf0:	79 07       	cpc	r23, r25
     cf2:	0c f0       	brlt	.+2      	; 0xcf6 <__pack_f+0x5e>
     cf4:	5b c0       	rjmp	.+182    	; 0xdac <__pack_f+0x114>
     cf6:	22 e8       	ldi	r18, 0x82	; 130
     cf8:	3f ef       	ldi	r19, 0xFF	; 255
     cfa:	26 1b       	sub	r18, r22
     cfc:	37 0b       	sbc	r19, r23
     cfe:	2a 31       	cpi	r18, 0x1A	; 26
     d00:	31 05       	cpc	r19, r1
     d02:	2c f0       	brlt	.+10     	; 0xd0e <__pack_f+0x76>
     d04:	20 e0       	ldi	r18, 0x00	; 0
     d06:	30 e0       	ldi	r19, 0x00	; 0
     d08:	40 e0       	ldi	r20, 0x00	; 0
     d0a:	50 e0       	ldi	r21, 0x00	; 0
     d0c:	2a c0       	rjmp	.+84     	; 0xd62 <__pack_f+0xca>
     d0e:	b8 01       	movw	r22, r16
     d10:	a7 01       	movw	r20, r14
     d12:	02 2e       	mov	r0, r18
     d14:	04 c0       	rjmp	.+8      	; 0xd1e <__pack_f+0x86>
     d16:	76 95       	lsr	r23
     d18:	67 95       	ror	r22
     d1a:	57 95       	ror	r21
     d1c:	47 95       	ror	r20
     d1e:	0a 94       	dec	r0
     d20:	d2 f7       	brpl	.-12     	; 0xd16 <__pack_f+0x7e>
     d22:	81 e0       	ldi	r24, 0x01	; 1
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a0 e0       	ldi	r26, 0x00	; 0
     d28:	b0 e0       	ldi	r27, 0x00	; 0
     d2a:	04 c0       	rjmp	.+8      	; 0xd34 <__pack_f+0x9c>
     d2c:	88 0f       	add	r24, r24
     d2e:	99 1f       	adc	r25, r25
     d30:	aa 1f       	adc	r26, r26
     d32:	bb 1f       	adc	r27, r27
     d34:	2a 95       	dec	r18
     d36:	d2 f7       	brpl	.-12     	; 0xd2c <__pack_f+0x94>
     d38:	01 97       	sbiw	r24, 0x01	; 1
     d3a:	a1 09       	sbc	r26, r1
     d3c:	b1 09       	sbc	r27, r1
     d3e:	8e 21       	and	r24, r14
     d40:	9f 21       	and	r25, r15
     d42:	a0 23       	and	r26, r16
     d44:	b1 23       	and	r27, r17
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	a1 05       	cpc	r26, r1
     d4a:	b1 05       	cpc	r27, r1
     d4c:	21 f0       	breq	.+8      	; 0xd56 <__pack_f+0xbe>
     d4e:	81 e0       	ldi	r24, 0x01	; 1
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	a0 e0       	ldi	r26, 0x00	; 0
     d54:	b0 e0       	ldi	r27, 0x00	; 0
     d56:	9a 01       	movw	r18, r20
     d58:	ab 01       	movw	r20, r22
     d5a:	28 2b       	or	r18, r24
     d5c:	39 2b       	or	r19, r25
     d5e:	4a 2b       	or	r20, r26
     d60:	5b 2b       	or	r21, r27
     d62:	da 01       	movw	r26, r20
     d64:	c9 01       	movw	r24, r18
     d66:	8f 77       	andi	r24, 0x7F	; 127
     d68:	90 70       	andi	r25, 0x00	; 0
     d6a:	a0 70       	andi	r26, 0x00	; 0
     d6c:	b0 70       	andi	r27, 0x00	; 0
     d6e:	80 34       	cpi	r24, 0x40	; 64
     d70:	91 05       	cpc	r25, r1
     d72:	a1 05       	cpc	r26, r1
     d74:	b1 05       	cpc	r27, r1
     d76:	39 f4       	brne	.+14     	; 0xd86 <__pack_f+0xee>
     d78:	27 ff       	sbrs	r18, 7
     d7a:	09 c0       	rjmp	.+18     	; 0xd8e <__pack_f+0xf6>
     d7c:	20 5c       	subi	r18, 0xC0	; 192
     d7e:	3f 4f       	sbci	r19, 0xFF	; 255
     d80:	4f 4f       	sbci	r20, 0xFF	; 255
     d82:	5f 4f       	sbci	r21, 0xFF	; 255
     d84:	04 c0       	rjmp	.+8      	; 0xd8e <__pack_f+0xf6>
     d86:	21 5c       	subi	r18, 0xC1	; 193
     d88:	3f 4f       	sbci	r19, 0xFF	; 255
     d8a:	4f 4f       	sbci	r20, 0xFF	; 255
     d8c:	5f 4f       	sbci	r21, 0xFF	; 255
     d8e:	e0 e0       	ldi	r30, 0x00	; 0
     d90:	f0 e0       	ldi	r31, 0x00	; 0
     d92:	20 30       	cpi	r18, 0x00	; 0
     d94:	a0 e0       	ldi	r26, 0x00	; 0
     d96:	3a 07       	cpc	r19, r26
     d98:	a0 e0       	ldi	r26, 0x00	; 0
     d9a:	4a 07       	cpc	r20, r26
     d9c:	a0 e4       	ldi	r26, 0x40	; 64
     d9e:	5a 07       	cpc	r21, r26
     da0:	10 f0       	brcs	.+4      	; 0xda6 <__pack_f+0x10e>
     da2:	e1 e0       	ldi	r30, 0x01	; 1
     da4:	f0 e0       	ldi	r31, 0x00	; 0
     da6:	79 01       	movw	r14, r18
     da8:	8a 01       	movw	r16, r20
     daa:	27 c0       	rjmp	.+78     	; 0xdfa <__pack_f+0x162>
     dac:	60 38       	cpi	r22, 0x80	; 128
     dae:	71 05       	cpc	r23, r1
     db0:	64 f5       	brge	.+88     	; 0xe0a <__pack_f+0x172>
     db2:	fb 01       	movw	r30, r22
     db4:	e1 58       	subi	r30, 0x81	; 129
     db6:	ff 4f       	sbci	r31, 0xFF	; 255
     db8:	d8 01       	movw	r26, r16
     dba:	c7 01       	movw	r24, r14
     dbc:	8f 77       	andi	r24, 0x7F	; 127
     dbe:	90 70       	andi	r25, 0x00	; 0
     dc0:	a0 70       	andi	r26, 0x00	; 0
     dc2:	b0 70       	andi	r27, 0x00	; 0
     dc4:	80 34       	cpi	r24, 0x40	; 64
     dc6:	91 05       	cpc	r25, r1
     dc8:	a1 05       	cpc	r26, r1
     dca:	b1 05       	cpc	r27, r1
     dcc:	39 f4       	brne	.+14     	; 0xddc <__pack_f+0x144>
     dce:	e7 fe       	sbrs	r14, 7
     dd0:	0d c0       	rjmp	.+26     	; 0xdec <__pack_f+0x154>
     dd2:	80 e4       	ldi	r24, 0x40	; 64
     dd4:	90 e0       	ldi	r25, 0x00	; 0
     dd6:	a0 e0       	ldi	r26, 0x00	; 0
     dd8:	b0 e0       	ldi	r27, 0x00	; 0
     dda:	04 c0       	rjmp	.+8      	; 0xde4 <__pack_f+0x14c>
     ddc:	8f e3       	ldi	r24, 0x3F	; 63
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	a0 e0       	ldi	r26, 0x00	; 0
     de2:	b0 e0       	ldi	r27, 0x00	; 0
     de4:	e8 0e       	add	r14, r24
     de6:	f9 1e       	adc	r15, r25
     de8:	0a 1f       	adc	r16, r26
     dea:	1b 1f       	adc	r17, r27
     dec:	17 ff       	sbrs	r17, 7
     dee:	05 c0       	rjmp	.+10     	; 0xdfa <__pack_f+0x162>
     df0:	16 95       	lsr	r17
     df2:	07 95       	ror	r16
     df4:	f7 94       	ror	r15
     df6:	e7 94       	ror	r14
     df8:	31 96       	adiw	r30, 0x01	; 1
     dfa:	87 e0       	ldi	r24, 0x07	; 7
     dfc:	16 95       	lsr	r17
     dfe:	07 95       	ror	r16
     e00:	f7 94       	ror	r15
     e02:	e7 94       	ror	r14
     e04:	8a 95       	dec	r24
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__pack_f+0x164>
     e08:	05 c0       	rjmp	.+10     	; 0xe14 <__pack_f+0x17c>
     e0a:	ee 24       	eor	r14, r14
     e0c:	ff 24       	eor	r15, r15
     e0e:	87 01       	movw	r16, r14
     e10:	ef ef       	ldi	r30, 0xFF	; 255
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	6e 2f       	mov	r22, r30
     e16:	67 95       	ror	r22
     e18:	66 27       	eor	r22, r22
     e1a:	67 95       	ror	r22
     e1c:	90 2f       	mov	r25, r16
     e1e:	9f 77       	andi	r25, 0x7F	; 127
     e20:	d7 94       	ror	r13
     e22:	dd 24       	eor	r13, r13
     e24:	d7 94       	ror	r13
     e26:	8e 2f       	mov	r24, r30
     e28:	86 95       	lsr	r24
     e2a:	49 2f       	mov	r20, r25
     e2c:	46 2b       	or	r20, r22
     e2e:	58 2f       	mov	r21, r24
     e30:	5d 29       	or	r21, r13
     e32:	b7 01       	movw	r22, r14
     e34:	ca 01       	movw	r24, r20
     e36:	1f 91       	pop	r17
     e38:	0f 91       	pop	r16
     e3a:	ff 90       	pop	r15
     e3c:	ef 90       	pop	r14
     e3e:	df 90       	pop	r13
     e40:	08 95       	ret

00000e42 <__unpack_f>:
     e42:	fc 01       	movw	r30, r24
     e44:	db 01       	movw	r26, r22
     e46:	40 81       	ld	r20, Z
     e48:	51 81       	ldd	r21, Z+1	; 0x01
     e4a:	22 81       	ldd	r18, Z+2	; 0x02
     e4c:	62 2f       	mov	r22, r18
     e4e:	6f 77       	andi	r22, 0x7F	; 127
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	22 1f       	adc	r18, r18
     e54:	22 27       	eor	r18, r18
     e56:	22 1f       	adc	r18, r18
     e58:	93 81       	ldd	r25, Z+3	; 0x03
     e5a:	89 2f       	mov	r24, r25
     e5c:	88 0f       	add	r24, r24
     e5e:	82 2b       	or	r24, r18
     e60:	28 2f       	mov	r18, r24
     e62:	30 e0       	ldi	r19, 0x00	; 0
     e64:	99 1f       	adc	r25, r25
     e66:	99 27       	eor	r25, r25
     e68:	99 1f       	adc	r25, r25
     e6a:	11 96       	adiw	r26, 0x01	; 1
     e6c:	9c 93       	st	X, r25
     e6e:	11 97       	sbiw	r26, 0x01	; 1
     e70:	21 15       	cp	r18, r1
     e72:	31 05       	cpc	r19, r1
     e74:	a9 f5       	brne	.+106    	; 0xee0 <__unpack_f+0x9e>
     e76:	41 15       	cp	r20, r1
     e78:	51 05       	cpc	r21, r1
     e7a:	61 05       	cpc	r22, r1
     e7c:	71 05       	cpc	r23, r1
     e7e:	11 f4       	brne	.+4      	; 0xe84 <__unpack_f+0x42>
     e80:	82 e0       	ldi	r24, 0x02	; 2
     e82:	37 c0       	rjmp	.+110    	; 0xef2 <__unpack_f+0xb0>
     e84:	82 e8       	ldi	r24, 0x82	; 130
     e86:	9f ef       	ldi	r25, 0xFF	; 255
     e88:	13 96       	adiw	r26, 0x03	; 3
     e8a:	9c 93       	st	X, r25
     e8c:	8e 93       	st	-X, r24
     e8e:	12 97       	sbiw	r26, 0x02	; 2
     e90:	9a 01       	movw	r18, r20
     e92:	ab 01       	movw	r20, r22
     e94:	67 e0       	ldi	r22, 0x07	; 7
     e96:	22 0f       	add	r18, r18
     e98:	33 1f       	adc	r19, r19
     e9a:	44 1f       	adc	r20, r20
     e9c:	55 1f       	adc	r21, r21
     e9e:	6a 95       	dec	r22
     ea0:	d1 f7       	brne	.-12     	; 0xe96 <__unpack_f+0x54>
     ea2:	83 e0       	ldi	r24, 0x03	; 3
     ea4:	8c 93       	st	X, r24
     ea6:	0d c0       	rjmp	.+26     	; 0xec2 <__unpack_f+0x80>
     ea8:	22 0f       	add	r18, r18
     eaa:	33 1f       	adc	r19, r19
     eac:	44 1f       	adc	r20, r20
     eae:	55 1f       	adc	r21, r21
     eb0:	12 96       	adiw	r26, 0x02	; 2
     eb2:	8d 91       	ld	r24, X+
     eb4:	9c 91       	ld	r25, X
     eb6:	13 97       	sbiw	r26, 0x03	; 3
     eb8:	01 97       	sbiw	r24, 0x01	; 1
     eba:	13 96       	adiw	r26, 0x03	; 3
     ebc:	9c 93       	st	X, r25
     ebe:	8e 93       	st	-X, r24
     ec0:	12 97       	sbiw	r26, 0x02	; 2
     ec2:	20 30       	cpi	r18, 0x00	; 0
     ec4:	80 e0       	ldi	r24, 0x00	; 0
     ec6:	38 07       	cpc	r19, r24
     ec8:	80 e0       	ldi	r24, 0x00	; 0
     eca:	48 07       	cpc	r20, r24
     ecc:	80 e4       	ldi	r24, 0x40	; 64
     ece:	58 07       	cpc	r21, r24
     ed0:	58 f3       	brcs	.-42     	; 0xea8 <__unpack_f+0x66>
     ed2:	14 96       	adiw	r26, 0x04	; 4
     ed4:	2d 93       	st	X+, r18
     ed6:	3d 93       	st	X+, r19
     ed8:	4d 93       	st	X+, r20
     eda:	5c 93       	st	X, r21
     edc:	17 97       	sbiw	r26, 0x07	; 7
     ede:	08 95       	ret
     ee0:	2f 3f       	cpi	r18, 0xFF	; 255
     ee2:	31 05       	cpc	r19, r1
     ee4:	79 f4       	brne	.+30     	; 0xf04 <__unpack_f+0xc2>
     ee6:	41 15       	cp	r20, r1
     ee8:	51 05       	cpc	r21, r1
     eea:	61 05       	cpc	r22, r1
     eec:	71 05       	cpc	r23, r1
     eee:	19 f4       	brne	.+6      	; 0xef6 <__unpack_f+0xb4>
     ef0:	84 e0       	ldi	r24, 0x04	; 4
     ef2:	8c 93       	st	X, r24
     ef4:	08 95       	ret
     ef6:	64 ff       	sbrs	r22, 4
     ef8:	03 c0       	rjmp	.+6      	; 0xf00 <__unpack_f+0xbe>
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	8c 93       	st	X, r24
     efe:	12 c0       	rjmp	.+36     	; 0xf24 <__unpack_f+0xe2>
     f00:	1c 92       	st	X, r1
     f02:	10 c0       	rjmp	.+32     	; 0xf24 <__unpack_f+0xe2>
     f04:	2f 57       	subi	r18, 0x7F	; 127
     f06:	30 40       	sbci	r19, 0x00	; 0
     f08:	13 96       	adiw	r26, 0x03	; 3
     f0a:	3c 93       	st	X, r19
     f0c:	2e 93       	st	-X, r18
     f0e:	12 97       	sbiw	r26, 0x02	; 2
     f10:	83 e0       	ldi	r24, 0x03	; 3
     f12:	8c 93       	st	X, r24
     f14:	87 e0       	ldi	r24, 0x07	; 7
     f16:	44 0f       	add	r20, r20
     f18:	55 1f       	adc	r21, r21
     f1a:	66 1f       	adc	r22, r22
     f1c:	77 1f       	adc	r23, r23
     f1e:	8a 95       	dec	r24
     f20:	d1 f7       	brne	.-12     	; 0xf16 <__unpack_f+0xd4>
     f22:	70 64       	ori	r23, 0x40	; 64
     f24:	14 96       	adiw	r26, 0x04	; 4
     f26:	4d 93       	st	X+, r20
     f28:	5d 93       	st	X+, r21
     f2a:	6d 93       	st	X+, r22
     f2c:	7c 93       	st	X, r23
     f2e:	17 97       	sbiw	r26, 0x07	; 7
     f30:	08 95       	ret

00000f32 <__fpcmp_parts_f>:
     f32:	1f 93       	push	r17
     f34:	dc 01       	movw	r26, r24
     f36:	fb 01       	movw	r30, r22
     f38:	9c 91       	ld	r25, X
     f3a:	92 30       	cpi	r25, 0x02	; 2
     f3c:	08 f4       	brcc	.+2      	; 0xf40 <__fpcmp_parts_f+0xe>
     f3e:	47 c0       	rjmp	.+142    	; 0xfce <__fpcmp_parts_f+0x9c>
     f40:	80 81       	ld	r24, Z
     f42:	82 30       	cpi	r24, 0x02	; 2
     f44:	08 f4       	brcc	.+2      	; 0xf48 <__fpcmp_parts_f+0x16>
     f46:	43 c0       	rjmp	.+134    	; 0xfce <__fpcmp_parts_f+0x9c>
     f48:	94 30       	cpi	r25, 0x04	; 4
     f4a:	51 f4       	brne	.+20     	; 0xf60 <__fpcmp_parts_f+0x2e>
     f4c:	11 96       	adiw	r26, 0x01	; 1
     f4e:	1c 91       	ld	r17, X
     f50:	84 30       	cpi	r24, 0x04	; 4
     f52:	99 f5       	brne	.+102    	; 0xfba <__fpcmp_parts_f+0x88>
     f54:	81 81       	ldd	r24, Z+1	; 0x01
     f56:	68 2f       	mov	r22, r24
     f58:	70 e0       	ldi	r23, 0x00	; 0
     f5a:	61 1b       	sub	r22, r17
     f5c:	71 09       	sbc	r23, r1
     f5e:	3f c0       	rjmp	.+126    	; 0xfde <__fpcmp_parts_f+0xac>
     f60:	84 30       	cpi	r24, 0x04	; 4
     f62:	21 f0       	breq	.+8      	; 0xf6c <__fpcmp_parts_f+0x3a>
     f64:	92 30       	cpi	r25, 0x02	; 2
     f66:	31 f4       	brne	.+12     	; 0xf74 <__fpcmp_parts_f+0x42>
     f68:	82 30       	cpi	r24, 0x02	; 2
     f6a:	b9 f1       	breq	.+110    	; 0xfda <__fpcmp_parts_f+0xa8>
     f6c:	81 81       	ldd	r24, Z+1	; 0x01
     f6e:	88 23       	and	r24, r24
     f70:	89 f1       	breq	.+98     	; 0xfd4 <__fpcmp_parts_f+0xa2>
     f72:	2d c0       	rjmp	.+90     	; 0xfce <__fpcmp_parts_f+0x9c>
     f74:	11 96       	adiw	r26, 0x01	; 1
     f76:	1c 91       	ld	r17, X
     f78:	11 97       	sbiw	r26, 0x01	; 1
     f7a:	82 30       	cpi	r24, 0x02	; 2
     f7c:	f1 f0       	breq	.+60     	; 0xfba <__fpcmp_parts_f+0x88>
     f7e:	81 81       	ldd	r24, Z+1	; 0x01
     f80:	18 17       	cp	r17, r24
     f82:	d9 f4       	brne	.+54     	; 0xfba <__fpcmp_parts_f+0x88>
     f84:	12 96       	adiw	r26, 0x02	; 2
     f86:	2d 91       	ld	r18, X+
     f88:	3c 91       	ld	r19, X
     f8a:	13 97       	sbiw	r26, 0x03	; 3
     f8c:	82 81       	ldd	r24, Z+2	; 0x02
     f8e:	93 81       	ldd	r25, Z+3	; 0x03
     f90:	82 17       	cp	r24, r18
     f92:	93 07       	cpc	r25, r19
     f94:	94 f0       	brlt	.+36     	; 0xfba <__fpcmp_parts_f+0x88>
     f96:	28 17       	cp	r18, r24
     f98:	39 07       	cpc	r19, r25
     f9a:	bc f0       	brlt	.+46     	; 0xfca <__fpcmp_parts_f+0x98>
     f9c:	14 96       	adiw	r26, 0x04	; 4
     f9e:	8d 91       	ld	r24, X+
     fa0:	9d 91       	ld	r25, X+
     fa2:	0d 90       	ld	r0, X+
     fa4:	bc 91       	ld	r27, X
     fa6:	a0 2d       	mov	r26, r0
     fa8:	24 81       	ldd	r18, Z+4	; 0x04
     faa:	35 81       	ldd	r19, Z+5	; 0x05
     fac:	46 81       	ldd	r20, Z+6	; 0x06
     fae:	57 81       	ldd	r21, Z+7	; 0x07
     fb0:	28 17       	cp	r18, r24
     fb2:	39 07       	cpc	r19, r25
     fb4:	4a 07       	cpc	r20, r26
     fb6:	5b 07       	cpc	r21, r27
     fb8:	18 f4       	brcc	.+6      	; 0xfc0 <__fpcmp_parts_f+0x8e>
     fba:	11 23       	and	r17, r17
     fbc:	41 f0       	breq	.+16     	; 0xfce <__fpcmp_parts_f+0x9c>
     fbe:	0a c0       	rjmp	.+20     	; 0xfd4 <__fpcmp_parts_f+0xa2>
     fc0:	82 17       	cp	r24, r18
     fc2:	93 07       	cpc	r25, r19
     fc4:	a4 07       	cpc	r26, r20
     fc6:	b5 07       	cpc	r27, r21
     fc8:	40 f4       	brcc	.+16     	; 0xfda <__fpcmp_parts_f+0xa8>
     fca:	11 23       	and	r17, r17
     fcc:	19 f0       	breq	.+6      	; 0xfd4 <__fpcmp_parts_f+0xa2>
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	70 e0       	ldi	r23, 0x00	; 0
     fd2:	05 c0       	rjmp	.+10     	; 0xfde <__fpcmp_parts_f+0xac>
     fd4:	6f ef       	ldi	r22, 0xFF	; 255
     fd6:	7f ef       	ldi	r23, 0xFF	; 255
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <__fpcmp_parts_f+0xac>
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	70 e0       	ldi	r23, 0x00	; 0
     fde:	cb 01       	movw	r24, r22
     fe0:	1f 91       	pop	r17
     fe2:	08 95       	ret

00000fe4 <Ultrasonic_init>:
 **************************************************************************************/

/*
 * initialize the ICU and ultrasonic trigger pin.
 */
void Ultrasonic_init(void){
     fe4:	df 93       	push	r29
     fe6:	cf 93       	push	r28
     fe8:	00 d0       	rcall	.+0      	; 0xfea <Ultrasonic_init+0x6>
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
	/*configure the icu to work with rising edge at first and the desired prescaler
	 * by creating a struct of type icu config type and initializing it with the
	 * required config*/
#if(ULTRASONIC_ICU_PRESCALER==8)
	ICU_ConfigType icu_config={F_CPU_8,RAISING};
     fee:	82 e0       	ldi	r24, 0x02	; 2
     ff0:	89 83       	std	Y+1, r24	; 0x01
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	8a 83       	std	Y+2, r24	; 0x02
	ICU_ConfigType icu_config={F_CPU_256,RAISING};
#elif(ULTRASONIC_ICU_PRESCALER==1024)
	ICU_ConfigType icu_config={F_CPU_1024,RAISING};
#endif

	ICU_init(&icu_config); /*initializing the icu with the required config*/
     ff6:	ce 01       	movw	r24, r28
     ff8:	01 96       	adiw	r24, 0x01	; 1
     ffa:	0e 94 98 0d 	call	0x1b30	; 0x1b30 <ICU_init>
	ICU_setCallBack(Ultrasonic_edgeProcessing); /*setting the call back function*/
     ffe:	88 ee       	ldi	r24, 0xE8	; 232
    1000:	98 e0       	ldi	r25, 0x08	; 8
    1002:	0e 94 e1 0d 	call	0x1bc2	; 0x1bc2 <ICU_setCallBack>

	/*configure the trigger pin as output pin*/
	GPIO_setupPinDirection(ULTRASONIC_TRIGGER_PORT,ULTRASONIC_TRIGGER_PIN,PIN_OUTPUT);
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	65 e0       	ldi	r22, 0x05	; 5
    100a:	41 e0       	ldi	r20, 0x01	; 1
    100c:	0e 94 27 0a 	call	0x144e	; 0x144e <GPIO_setupPinDirection>

}
    1010:	0f 90       	pop	r0
    1012:	0f 90       	pop	r0
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <Ultrasonic_Trigger>:

/*
 * to send a 10us pulse to the trigger pin.
 */

static void Ultrasonic_Trigger(void){
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
    1022:	68 97       	sbiw	r28, 0x18	; 24
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	de bf       	out	0x3e, r29	; 62
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	cd bf       	out	0x3d, r28	; 61
	/*writing logic high to the trigger pin*/
	GPIO_writePin(PORTB_ID,PIN5_ID,LOGIC_HIGH);
    102e:	81 e0       	ldi	r24, 0x01	; 1
    1030:	65 e0       	ldi	r22, 0x05	; 5
    1032:	41 e0       	ldi	r20, 0x01	; 1
    1034:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_writePin>
    1038:	80 e0       	ldi	r24, 0x00	; 0
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	a0 e2       	ldi	r26, 0x20	; 32
    103e:	b1 e4       	ldi	r27, 0x41	; 65
    1040:	8d 8b       	std	Y+21, r24	; 0x15
    1042:	9e 8b       	std	Y+22, r25	; 0x16
    1044:	af 8b       	std	Y+23, r26	; 0x17
    1046:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1048:	6d 89       	ldd	r22, Y+21	; 0x15
    104a:	7e 89       	ldd	r23, Y+22	; 0x16
    104c:	8f 89       	ldd	r24, Y+23	; 0x17
    104e:	98 8d       	ldd	r25, Y+24	; 0x18
    1050:	2b ea       	ldi	r18, 0xAB	; 171
    1052:	3a ea       	ldi	r19, 0xAA	; 170
    1054:	4a e2       	ldi	r20, 0x2A	; 42
    1056:	50 e4       	ldi	r21, 0x40	; 64
    1058:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    105c:	dc 01       	movw	r26, r24
    105e:	cb 01       	movw	r24, r22
    1060:	89 8b       	std	Y+17, r24	; 0x11
    1062:	9a 8b       	std	Y+18, r25	; 0x12
    1064:	ab 8b       	std	Y+19, r26	; 0x13
    1066:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    1068:	69 89       	ldd	r22, Y+17	; 0x11
    106a:	7a 89       	ldd	r23, Y+18	; 0x12
    106c:	8b 89       	ldd	r24, Y+19	; 0x13
    106e:	9c 89       	ldd	r25, Y+20	; 0x14
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	30 e0       	ldi	r19, 0x00	; 0
    1074:	40 e8       	ldi	r20, 0x80	; 128
    1076:	5f e3       	ldi	r21, 0x3F	; 63
    1078:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    107c:	88 23       	and	r24, r24
    107e:	1c f4       	brge	.+6      	; 0x1086 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	88 8b       	std	Y+16, r24	; 0x10
    1084:	91 c0       	rjmp	.+290    	; 0x11a8 <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    1086:	69 89       	ldd	r22, Y+17	; 0x11
    1088:	7a 89       	ldd	r23, Y+18	; 0x12
    108a:	8b 89       	ldd	r24, Y+19	; 0x13
    108c:	9c 89       	ldd	r25, Y+20	; 0x14
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	4f e7       	ldi	r20, 0x7F	; 127
    1094:	53 e4       	ldi	r21, 0x43	; 67
    1096:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    109a:	18 16       	cp	r1, r24
    109c:	0c f0       	brlt	.+2      	; 0x10a0 <Ultrasonic_Trigger+0x86>
    109e:	7b c0       	rjmp	.+246    	; 0x1196 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    10a0:	6d 89       	ldd	r22, Y+21	; 0x15
    10a2:	7e 89       	ldd	r23, Y+22	; 0x16
    10a4:	8f 89       	ldd	r24, Y+23	; 0x17
    10a6:	98 8d       	ldd	r25, Y+24	; 0x18
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	30 e0       	ldi	r19, 0x00	; 0
    10ac:	4a e7       	ldi	r20, 0x7A	; 122
    10ae:	54 e4       	ldi	r21, 0x44	; 68
    10b0:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	8c 87       	std	Y+12, r24	; 0x0c
    10ba:	9d 87       	std	Y+13, r25	; 0x0d
    10bc:	ae 87       	std	Y+14, r26	; 0x0e
    10be:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c0:	6c 85       	ldd	r22, Y+12	; 0x0c
    10c2:	7d 85       	ldd	r23, Y+13	; 0x0d
    10c4:	8e 85       	ldd	r24, Y+14	; 0x0e
    10c6:	9f 85       	ldd	r25, Y+15	; 0x0f
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	4a ef       	ldi	r20, 0xFA	; 250
    10ce:	54 e4       	ldi	r21, 0x44	; 68
    10d0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	88 87       	std	Y+8, r24	; 0x08
    10da:	99 87       	std	Y+9, r25	; 0x09
    10dc:	aa 87       	std	Y+10, r26	; 0x0a
    10de:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    10e0:	68 85       	ldd	r22, Y+8	; 0x08
    10e2:	79 85       	ldd	r23, Y+9	; 0x09
    10e4:	8a 85       	ldd	r24, Y+10	; 0x0a
    10e6:	9b 85       	ldd	r25, Y+11	; 0x0b
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	40 e8       	ldi	r20, 0x80	; 128
    10ee:	5f e3       	ldi	r21, 0x3F	; 63
    10f0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    10f4:	88 23       	and	r24, r24
    10f6:	2c f4       	brge	.+10     	; 0x1102 <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	9f 83       	std	Y+7, r25	; 0x07
    10fe:	8e 83       	std	Y+6, r24	; 0x06
    1100:	3f c0       	rjmp	.+126    	; 0x1180 <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    1102:	68 85       	ldd	r22, Y+8	; 0x08
    1104:	79 85       	ldd	r23, Y+9	; 0x09
    1106:	8a 85       	ldd	r24, Y+10	; 0x0a
    1108:	9b 85       	ldd	r25, Y+11	; 0x0b
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	3f ef       	ldi	r19, 0xFF	; 255
    110e:	4f e7       	ldi	r20, 0x7F	; 127
    1110:	57 e4       	ldi	r21, 0x47	; 71
    1112:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1116:	18 16       	cp	r1, r24
    1118:	4c f5       	brge	.+82     	; 0x116c <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    111a:	6c 85       	ldd	r22, Y+12	; 0x0c
    111c:	7d 85       	ldd	r23, Y+13	; 0x0d
    111e:	8e 85       	ldd	r24, Y+14	; 0x0e
    1120:	9f 85       	ldd	r25, Y+15	; 0x0f
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	40 e2       	ldi	r20, 0x20	; 32
    1128:	51 e4       	ldi	r21, 0x41	; 65
    112a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    112e:	dc 01       	movw	r26, r24
    1130:	cb 01       	movw	r24, r22
    1132:	bc 01       	movw	r22, r24
    1134:	cd 01       	movw	r24, r26
    1136:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    113a:	dc 01       	movw	r26, r24
    113c:	cb 01       	movw	r24, r22
    113e:	9f 83       	std	Y+7, r25	; 0x07
    1140:	8e 83       	std	Y+6, r24	; 0x06
    1142:	0f c0       	rjmp	.+30     	; 0x1162 <Ultrasonic_Trigger+0x148>
    1144:	88 ec       	ldi	r24, 0xC8	; 200
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	9d 83       	std	Y+5, r25	; 0x05
    114a:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    114c:	8c 81       	ldd	r24, Y+4	; 0x04
    114e:	9d 81       	ldd	r25, Y+5	; 0x05
    1150:	01 97       	sbiw	r24, 0x01	; 1
    1152:	f1 f7       	brne	.-4      	; 0x1150 <Ultrasonic_Trigger+0x136>
    1154:	9d 83       	std	Y+5, r25	; 0x05
    1156:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1158:	8e 81       	ldd	r24, Y+6	; 0x06
    115a:	9f 81       	ldd	r25, Y+7	; 0x07
    115c:	01 97       	sbiw	r24, 0x01	; 1
    115e:	9f 83       	std	Y+7, r25	; 0x07
    1160:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1162:	8e 81       	ldd	r24, Y+6	; 0x06
    1164:	9f 81       	ldd	r25, Y+7	; 0x07
    1166:	00 97       	sbiw	r24, 0x00	; 0
    1168:	69 f7       	brne	.-38     	; 0x1144 <Ultrasonic_Trigger+0x12a>
    116a:	24 c0       	rjmp	.+72     	; 0x11b4 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    116c:	68 85       	ldd	r22, Y+8	; 0x08
    116e:	79 85       	ldd	r23, Y+9	; 0x09
    1170:	8a 85       	ldd	r24, Y+10	; 0x0a
    1172:	9b 85       	ldd	r25, Y+11	; 0x0b
    1174:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1178:	dc 01       	movw	r26, r24
    117a:	cb 01       	movw	r24, r22
    117c:	9f 83       	std	Y+7, r25	; 0x07
    117e:	8e 83       	std	Y+6, r24	; 0x06
    1180:	8e 81       	ldd	r24, Y+6	; 0x06
    1182:	9f 81       	ldd	r25, Y+7	; 0x07
    1184:	9b 83       	std	Y+3, r25	; 0x03
    1186:	8a 83       	std	Y+2, r24	; 0x02
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	9b 81       	ldd	r25, Y+3	; 0x03
    118c:	01 97       	sbiw	r24, 0x01	; 1
    118e:	f1 f7       	brne	.-4      	; 0x118c <Ultrasonic_Trigger+0x172>
    1190:	9b 83       	std	Y+3, r25	; 0x03
    1192:	8a 83       	std	Y+2, r24	; 0x02
    1194:	0f c0       	rjmp	.+30     	; 0x11b4 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1196:	69 89       	ldd	r22, Y+17	; 0x11
    1198:	7a 89       	ldd	r23, Y+18	; 0x12
    119a:	8b 89       	ldd	r24, Y+19	; 0x13
    119c:	9c 89       	ldd	r25, Y+20	; 0x14
    119e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    11a2:	dc 01       	movw	r26, r24
    11a4:	cb 01       	movw	r24, r22
    11a6:	88 8b       	std	Y+16, r24	; 0x10
    11a8:	88 89       	ldd	r24, Y+16	; 0x10
    11aa:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    11ac:	89 81       	ldd	r24, Y+1	; 0x01
    11ae:	8a 95       	dec	r24
    11b0:	f1 f7       	brne	.-4      	; 0x11ae <Ultrasonic_Trigger+0x194>
    11b2:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10); /*maintaining the high logic for 10 us seconds*/
	GPIO_writePin(PORTB_ID,PIN5_ID,LOGIC_LOW); /*writing logic low to the pin to end the pulse*/
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	65 e0       	ldi	r22, 0x05	; 5
    11b8:	40 e0       	ldi	r20, 0x00	; 0
    11ba:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_writePin>
}
    11be:	68 96       	adiw	r28, 0x18	; 24
    11c0:	0f b6       	in	r0, 0x3f	; 63
    11c2:	f8 94       	cli
    11c4:	de bf       	out	0x3e, r29	; 62
    11c6:	0f be       	out	0x3f, r0	; 63
    11c8:	cd bf       	out	0x3d, r28	; 61
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <Ultrasonic_edgeProcessing>:


/*
 * this is the call back function to be called with each icu edge detection.
 */
static void Ultrasonic_edgeProcessing(void){
    11d0:	df 93       	push	r29
    11d2:	cf 93       	push	r28
    11d4:	cd b7       	in	r28, 0x3d	; 61
    11d6:	de b7       	in	r29, 0x3e	; 62
	g_edges++; /*increment edge every time the function is called*/
    11d8:	80 91 78 01 	lds	r24, 0x0178
    11dc:	8f 5f       	subi	r24, 0xFF	; 255
    11de:	80 93 78 01 	sts	0x0178, r24

	/*on first call that's when the icu should start counting for the next falling edge
	 * so reset the timer to start counting and set the icu to detect falling edge*/
	if(g_edges==1){
    11e2:	80 91 78 01 	lds	r24, 0x0178
    11e6:	81 30       	cpi	r24, 0x01	; 1
    11e8:	31 f4       	brne	.+12     	; 0x11f6 <Ultrasonic_edgeProcessing+0x26>
		ICU_clearTimerValue();
    11ea:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ICU_clearTimerValue>
		ICU_setEdgeDetectionType(FALLING);
    11ee:	80 e0       	ldi	r24, 0x00	; 0
    11f0:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <ICU_setEdgeDetectionType>
    11f4:	11 c0       	rjmp	.+34     	; 0x1218 <Ultrasonic_edgeProcessing+0x48>
	}

	/*the second call is when the falling edge is detected that's the high time of the echo
	 * pin that we need to calculate the distance.*/
	else if(g_edges==2){
    11f6:	80 91 78 01 	lds	r24, 0x0178
    11fa:	82 30       	cpi	r24, 0x02	; 2
    11fc:	69 f4       	brne	.+26     	; 0x1218 <Ultrasonic_edgeProcessing+0x48>
		g_captureValue=ICU_getInputCaptureValue();/*store the time value captured by he icu*/
    11fe:	0e 94 12 0e 	call	0x1c24	; 0x1c24 <ICU_getInputCaptureValue>
    1202:	90 93 7a 01 	sts	0x017A, r25
    1206:	80 93 79 01 	sts	0x0179, r24
		ICU_clearTimerValue(); /*clear the timer to get ready for the next edge*/
    120a:	0e 94 1d 0e 	call	0x1c3a	; 0x1c3a <ICU_clearTimerValue>
		ICU_setEdgeDetectionType(RAISING);/*set icu to detect rising edge again*/
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	0e 94 f3 0d 	call	0x1be6	; 0x1be6 <ICU_setEdgeDetectionType>
		g_edges=0; /*reset the number of edges to be ready for the comin rising edge*/
    1214:	10 92 78 01 	sts	0x0178, r1
	}
}
    1218:	cf 91       	pop	r28
    121a:	df 91       	pop	r29
    121c:	08 95       	ret

0000121e <Ultrasonic_readDistance>:

/*
 * the function that sends the trigger and uses the captured time value to calculate
 * the distance.
 */
uint16 Ultrasonic_readDistance(){
    121e:	ef 92       	push	r14
    1220:	ff 92       	push	r15
    1222:	0f 93       	push	r16
    1224:	1f 93       	push	r17
    1226:	df 93       	push	r29
    1228:	cf 93       	push	r28
    122a:	cd b7       	in	r28, 0x3d	; 61
    122c:	de b7       	in	r29, 0x3e	; 62
    122e:	64 97       	sbiw	r28, 0x14	; 20
    1230:	0f b6       	in	r0, 0x3f	; 63
    1232:	f8 94       	cli
    1234:	de bf       	out	0x3e, r29	; 62
    1236:	0f be       	out	0x3f, r0	; 63
    1238:	cd bf       	out	0x3d, r28	; 61
	Ultrasonic_Trigger(); /*send trigger to start the ultrasonic*/
    123a:	0e 94 0d 08 	call	0x101a	; 0x101a <Ultrasonic_Trigger>
    123e:	80 e0       	ldi	r24, 0x00	; 0
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	a0 e8       	ldi	r26, 0x80	; 128
    1244:	bf e3       	ldi	r27, 0x3F	; 63
    1246:	8b 87       	std	Y+11, r24	; 0x0b
    1248:	9c 87       	std	Y+12, r25	; 0x0c
    124a:	ad 87       	std	Y+13, r26	; 0x0d
    124c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    124e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1250:	7c 85       	ldd	r23, Y+12	; 0x0c
    1252:	8d 85       	ldd	r24, Y+13	; 0x0d
    1254:	9e 85       	ldd	r25, Y+14	; 0x0e
    1256:	20 e0       	ldi	r18, 0x00	; 0
    1258:	30 e0       	ldi	r19, 0x00	; 0
    125a:	4a ef       	ldi	r20, 0xFA	; 250
    125c:	54 e4       	ldi	r21, 0x44	; 68
    125e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1262:	dc 01       	movw	r26, r24
    1264:	cb 01       	movw	r24, r22
    1266:	8f 83       	std	Y+7, r24	; 0x07
    1268:	98 87       	std	Y+8, r25	; 0x08
    126a:	a9 87       	std	Y+9, r26	; 0x09
    126c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    126e:	6f 81       	ldd	r22, Y+7	; 0x07
    1270:	78 85       	ldd	r23, Y+8	; 0x08
    1272:	89 85       	ldd	r24, Y+9	; 0x09
    1274:	9a 85       	ldd	r25, Y+10	; 0x0a
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	40 e8       	ldi	r20, 0x80	; 128
    127c:	5f e3       	ldi	r21, 0x3F	; 63
    127e:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1282:	88 23       	and	r24, r24
    1284:	2c f4       	brge	.+10     	; 0x1290 <Ultrasonic_readDistance+0x72>
		__ticks = 1;
    1286:	81 e0       	ldi	r24, 0x01	; 1
    1288:	90 e0       	ldi	r25, 0x00	; 0
    128a:	9e 83       	std	Y+6, r25	; 0x06
    128c:	8d 83       	std	Y+5, r24	; 0x05
    128e:	3f c0       	rjmp	.+126    	; 0x130e <Ultrasonic_readDistance+0xf0>
	else if (__tmp > 65535)
    1290:	6f 81       	ldd	r22, Y+7	; 0x07
    1292:	78 85       	ldd	r23, Y+8	; 0x08
    1294:	89 85       	ldd	r24, Y+9	; 0x09
    1296:	9a 85       	ldd	r25, Y+10	; 0x0a
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	3f ef       	ldi	r19, 0xFF	; 255
    129c:	4f e7       	ldi	r20, 0x7F	; 127
    129e:	57 e4       	ldi	r21, 0x47	; 71
    12a0:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    12a4:	18 16       	cp	r1, r24
    12a6:	4c f5       	brge	.+82     	; 0x12fa <Ultrasonic_readDistance+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12a8:	6b 85       	ldd	r22, Y+11	; 0x0b
    12aa:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    12ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	40 e2       	ldi	r20, 0x20	; 32
    12b6:	51 e4       	ldi	r21, 0x41	; 65
    12b8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	bc 01       	movw	r22, r24
    12c2:	cd 01       	movw	r24, r26
    12c4:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    12c8:	dc 01       	movw	r26, r24
    12ca:	cb 01       	movw	r24, r22
    12cc:	9e 83       	std	Y+6, r25	; 0x06
    12ce:	8d 83       	std	Y+5, r24	; 0x05
    12d0:	0f c0       	rjmp	.+30     	; 0x12f0 <Ultrasonic_readDistance+0xd2>
    12d2:	88 ec       	ldi	r24, 0xC8	; 200
    12d4:	90 e0       	ldi	r25, 0x00	; 0
    12d6:	9c 83       	std	Y+4, r25	; 0x04
    12d8:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	9c 81       	ldd	r25, Y+4	; 0x04
    12de:	01 97       	sbiw	r24, 0x01	; 1
    12e0:	f1 f7       	brne	.-4      	; 0x12de <Ultrasonic_readDistance+0xc0>
    12e2:	9c 83       	std	Y+4, r25	; 0x04
    12e4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12e6:	8d 81       	ldd	r24, Y+5	; 0x05
    12e8:	9e 81       	ldd	r25, Y+6	; 0x06
    12ea:	01 97       	sbiw	r24, 0x01	; 1
    12ec:	9e 83       	std	Y+6, r25	; 0x06
    12ee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f0:	8d 81       	ldd	r24, Y+5	; 0x05
    12f2:	9e 81       	ldd	r25, Y+6	; 0x06
    12f4:	00 97       	sbiw	r24, 0x00	; 0
    12f6:	69 f7       	brne	.-38     	; 0x12d2 <Ultrasonic_readDistance+0xb4>
    12f8:	14 c0       	rjmp	.+40     	; 0x1322 <Ultrasonic_readDistance+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12fa:	6f 81       	ldd	r22, Y+7	; 0x07
    12fc:	78 85       	ldd	r23, Y+8	; 0x08
    12fe:	89 85       	ldd	r24, Y+9	; 0x09
    1300:	9a 85       	ldd	r25, Y+10	; 0x0a
    1302:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1306:	dc 01       	movw	r26, r24
    1308:	cb 01       	movw	r24, r22
    130a:	9e 83       	std	Y+6, r25	; 0x06
    130c:	8d 83       	std	Y+5, r24	; 0x05
    130e:	8d 81       	ldd	r24, Y+5	; 0x05
    1310:	9e 81       	ldd	r25, Y+6	; 0x06
    1312:	9a 83       	std	Y+2, r25	; 0x02
    1314:	89 83       	std	Y+1, r24	; 0x01
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	9a 81       	ldd	r25, Y+2	; 0x02
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	f1 f7       	brne	.-4      	; 0x131a <Ultrasonic_readDistance+0xfc>
    131e:	9a 83       	std	Y+2, r25	; 0x02
    1320:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /*delay for the signal to be sent*/
	uint16 distance=0;
    1322:	1c 8a       	std	Y+20, r1	; 0x14
    1324:	1b 8a       	std	Y+19, r1	; 0x13
	/*calculate time taken by the timer tick according to the frequemcy of the cpu and the ICU prescaler*/
	uint32 tick_time=F_CPU/ULTRASONIC_ICU_PRESCALER;
    1326:	80 e4       	ldi	r24, 0x40	; 64
    1328:	92 e4       	ldi	r25, 0x42	; 66
    132a:	af e0       	ldi	r26, 0x0F	; 15
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	8f 87       	std	Y+15, r24	; 0x0f
    1330:	98 8b       	std	Y+16, r25	; 0x10
    1332:	a9 8b       	std	Y+17, r26	; 0x11
    1334:	ba 8b       	std	Y+18, r27	; 0x12
	/*calculate the distance and round the result to the nearest integer*/
	 distance=round((double)(34000*(g_captureValue/2))/tick_time);
    1336:	80 91 79 01 	lds	r24, 0x0179
    133a:	90 91 7a 01 	lds	r25, 0x017A
    133e:	96 95       	lsr	r25
    1340:	87 95       	ror	r24
    1342:	cc 01       	movw	r24, r24
    1344:	a0 e0       	ldi	r26, 0x00	; 0
    1346:	b0 e0       	ldi	r27, 0x00	; 0
    1348:	20 ed       	ldi	r18, 0xD0	; 208
    134a:	34 e8       	ldi	r19, 0x84	; 132
    134c:	40 e0       	ldi	r20, 0x00	; 0
    134e:	50 e0       	ldi	r21, 0x00	; 0
    1350:	bc 01       	movw	r22, r24
    1352:	cd 01       	movw	r24, r26
    1354:	0e 94 65 15 	call	0x2aca	; 0x2aca <__mulsi3>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	bc 01       	movw	r22, r24
    135e:	cd 01       	movw	r24, r26
    1360:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__floatsisf>
    1364:	7b 01       	movw	r14, r22
    1366:	8c 01       	movw	r16, r24
    1368:	6f 85       	ldd	r22, Y+15	; 0x0f
    136a:	78 89       	ldd	r23, Y+16	; 0x10
    136c:	89 89       	ldd	r24, Y+17	; 0x11
    136e:	9a 89       	ldd	r25, Y+18	; 0x12
    1370:	0e 94 84 05 	call	0xb08	; 0xb08 <__floatunsisf>
    1374:	9b 01       	movw	r18, r22
    1376:	ac 01       	movw	r20, r24
    1378:	c8 01       	movw	r24, r16
    137a:	b7 01       	movw	r22, r14
    137c:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	bc 01       	movw	r22, r24
    1386:	cd 01       	movw	r24, r26
    1388:	0e 94 fd 15 	call	0x2bfa	; 0x2bfa <round>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	bc 01       	movw	r22, r24
    1392:	cd 01       	movw	r24, r26
    1394:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1398:	dc 01       	movw	r26, r24
    139a:	cb 01       	movw	r24, r22
    139c:	9c 8b       	std	Y+20, r25	; 0x14
    139e:	8b 8b       	std	Y+19, r24	; 0x13
	return distance;
    13a0:	8b 89       	ldd	r24, Y+19	; 0x13
    13a2:	9c 89       	ldd	r25, Y+20	; 0x14
}
    13a4:	64 96       	adiw	r28, 0x14	; 20
    13a6:	0f b6       	in	r0, 0x3f	; 63
    13a8:	f8 94       	cli
    13aa:	de bf       	out	0x3e, r29	; 62
    13ac:	0f be       	out	0x3f, r0	; 63
    13ae:	cd bf       	out	0x3d, r28	; 61
    13b0:	cf 91       	pop	r28
    13b2:	df 91       	pop	r29
    13b4:	1f 91       	pop	r17
    13b6:	0f 91       	pop	r16
    13b8:	ff 90       	pop	r15
    13ba:	ef 90       	pop	r14
    13bc:	08 95       	ret

000013be <main>:
 */
#include "Ultrasonic.h"
#include "my_lcd.h"
#include "util/delay.h"
#include "avr/io.h"
int main(void){
    13be:	df 93       	push	r29
    13c0:	cf 93       	push	r28
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <main+0x6>
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
	LCD_init(); /*initialize lcd*/
    13c8:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <LCD_init>
	LCD_displayString("Distance=    cm"); /*display the always displayed string */
    13cc:	80 e6       	ldi	r24, 0x60	; 96
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	0e 94 86 14 	call	0x290c	; 0x290c <LCD_displayString>
	Ultrasonic_init(); /*initialize ultrasonic*/
    13d4:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <Ultrasonic_init>
	SREG|=1<<7; /*enabling global interrupts*/
    13d8:	af e5       	ldi	r26, 0x5F	; 95
    13da:	b0 e0       	ldi	r27, 0x00	; 0
    13dc:	ef e5       	ldi	r30, 0x5F	; 95
    13de:	f0 e0       	ldi	r31, 0x00	; 0
    13e0:	80 81       	ld	r24, Z
    13e2:	80 68       	ori	r24, 0x80	; 128
    13e4:	8c 93       	st	X, r24
	uint16 distance;
	while(1){
		distance=Ultrasonic_readDistance(); /*read the distance and store it in distance variable*/
    13e6:	0e 94 0f 09 	call	0x121e	; 0x121e <Ultrasonic_readDistance>
    13ea:	9a 83       	std	Y+2, r25	; 0x02
    13ec:	89 83       	std	Y+1, r24	; 0x01
		LCD_moveCursor(0,10); /*every time move the cursor to the beginning of the space where to write the new distance*/
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	6a e0       	ldi	r22, 0x0A	; 10
    13f2:	0e 94 b1 14 	call	0x2962	; 0x2962 <LCD_moveCursor>
		/*display the distance*/
		if(distance>=100){
    13f6:	89 81       	ldd	r24, Y+1	; 0x01
    13f8:	9a 81       	ldd	r25, Y+2	; 0x02
    13fa:	84 36       	cpi	r24, 0x64	; 100
    13fc:	91 05       	cpc	r25, r1
    13fe:	28 f0       	brcs	.+10     	; 0x140a <main+0x4c>
			LCD_integerToString(distance);
    1400:	89 81       	ldd	r24, Y+1	; 0x01
    1402:	9a 81       	ldd	r25, Y+2	; 0x02
    1404:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <LCD_integerToString>
    1408:	ee cf       	rjmp	.-36     	; 0x13e6 <main+0x28>
		}
		/*if distance is two digits or 1 digit display spaces after the value to overwrite
		 * the old values on the lcd screen*/
		else if(distance<100&&distance>=10){
    140a:	89 81       	ldd	r24, Y+1	; 0x01
    140c:	9a 81       	ldd	r25, Y+2	; 0x02
    140e:	84 36       	cpi	r24, 0x64	; 100
    1410:	91 05       	cpc	r25, r1
    1412:	68 f4       	brcc	.+26     	; 0x142e <main+0x70>
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	9a 81       	ldd	r25, Y+2	; 0x02
    1418:	8a 30       	cpi	r24, 0x0A	; 10
    141a:	91 05       	cpc	r25, r1
    141c:	40 f0       	brcs	.+16     	; 0x142e <main+0x70>
			LCD_integerToString(distance);
    141e:	89 81       	ldd	r24, Y+1	; 0x01
    1420:	9a 81       	ldd	r25, Y+2	; 0x02
    1422:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <LCD_integerToString>
			LCD_displayChar(' ');
    1426:	80 e2       	ldi	r24, 0x20	; 32
    1428:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_displayChar>
    142c:	dc cf       	rjmp	.-72     	; 0x13e6 <main+0x28>

		}
		else if(distance<10){
    142e:	89 81       	ldd	r24, Y+1	; 0x01
    1430:	9a 81       	ldd	r25, Y+2	; 0x02
    1432:	8a 30       	cpi	r24, 0x0A	; 10
    1434:	91 05       	cpc	r25, r1
    1436:	b8 f6       	brcc	.-82     	; 0x13e6 <main+0x28>
			LCD_integerToString(distance);
    1438:	89 81       	ldd	r24, Y+1	; 0x01
    143a:	9a 81       	ldd	r25, Y+2	; 0x02
    143c:	0e 94 16 15 	call	0x2a2c	; 0x2a2c <LCD_integerToString>
			LCD_displayChar(' ');
    1440:	80 e2       	ldi	r24, 0x20	; 32
    1442:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_displayChar>
			LCD_displayChar(' ');
    1446:	80 e2       	ldi	r24, 0x20	; 32
    1448:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_displayChar>
    144c:	cc cf       	rjmp	.-104    	; 0x13e6 <main+0x28>

0000144e <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	00 d0       	rcall	.+0      	; 0x1454 <GPIO_setupPinDirection+0x6>
    1454:	00 d0       	rcall	.+0      	; 0x1456 <GPIO_setupPinDirection+0x8>
    1456:	0f 92       	push	r0
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	89 83       	std	Y+1, r24	; 0x01
    145e:	6a 83       	std	Y+2, r22	; 0x02
    1460:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	88 30       	cpi	r24, 0x08	; 8
    1466:	08 f0       	brcs	.+2      	; 0x146a <GPIO_setupPinDirection+0x1c>
    1468:	d5 c0       	rjmp	.+426    	; 0x1614 <GPIO_setupPinDirection+0x1c6>
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	84 30       	cpi	r24, 0x04	; 4
    146e:	08 f0       	brcs	.+2      	; 0x1472 <GPIO_setupPinDirection+0x24>
    1470:	d1 c0       	rjmp	.+418    	; 0x1614 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	28 2f       	mov	r18, r24
    1476:	30 e0       	ldi	r19, 0x00	; 0
    1478:	3d 83       	std	Y+5, r19	; 0x05
    147a:	2c 83       	std	Y+4, r18	; 0x04
    147c:	8c 81       	ldd	r24, Y+4	; 0x04
    147e:	9d 81       	ldd	r25, Y+5	; 0x05
    1480:	81 30       	cpi	r24, 0x01	; 1
    1482:	91 05       	cpc	r25, r1
    1484:	09 f4       	brne	.+2      	; 0x1488 <GPIO_setupPinDirection+0x3a>
    1486:	43 c0       	rjmp	.+134    	; 0x150e <GPIO_setupPinDirection+0xc0>
    1488:	2c 81       	ldd	r18, Y+4	; 0x04
    148a:	3d 81       	ldd	r19, Y+5	; 0x05
    148c:	22 30       	cpi	r18, 0x02	; 2
    148e:	31 05       	cpc	r19, r1
    1490:	2c f4       	brge	.+10     	; 0x149c <GPIO_setupPinDirection+0x4e>
    1492:	8c 81       	ldd	r24, Y+4	; 0x04
    1494:	9d 81       	ldd	r25, Y+5	; 0x05
    1496:	00 97       	sbiw	r24, 0x00	; 0
    1498:	71 f0       	breq	.+28     	; 0x14b6 <GPIO_setupPinDirection+0x68>
    149a:	bc c0       	rjmp	.+376    	; 0x1614 <GPIO_setupPinDirection+0x1c6>
    149c:	2c 81       	ldd	r18, Y+4	; 0x04
    149e:	3d 81       	ldd	r19, Y+5	; 0x05
    14a0:	22 30       	cpi	r18, 0x02	; 2
    14a2:	31 05       	cpc	r19, r1
    14a4:	09 f4       	brne	.+2      	; 0x14a8 <GPIO_setupPinDirection+0x5a>
    14a6:	5f c0       	rjmp	.+190    	; 0x1566 <GPIO_setupPinDirection+0x118>
    14a8:	8c 81       	ldd	r24, Y+4	; 0x04
    14aa:	9d 81       	ldd	r25, Y+5	; 0x05
    14ac:	83 30       	cpi	r24, 0x03	; 3
    14ae:	91 05       	cpc	r25, r1
    14b0:	09 f4       	brne	.+2      	; 0x14b4 <GPIO_setupPinDirection+0x66>
    14b2:	85 c0       	rjmp	.+266    	; 0x15be <GPIO_setupPinDirection+0x170>
    14b4:	af c0       	rjmp	.+350    	; 0x1614 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	81 30       	cpi	r24, 0x01	; 1
    14ba:	a1 f4       	brne	.+40     	; 0x14e4 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    14bc:	aa e3       	ldi	r26, 0x3A	; 58
    14be:	b0 e0       	ldi	r27, 0x00	; 0
    14c0:	ea e3       	ldi	r30, 0x3A	; 58
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	80 81       	ld	r24, Z
    14c6:	48 2f       	mov	r20, r24
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	28 2f       	mov	r18, r24
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	81 e0       	ldi	r24, 0x01	; 1
    14d0:	90 e0       	ldi	r25, 0x00	; 0
    14d2:	02 2e       	mov	r0, r18
    14d4:	02 c0       	rjmp	.+4      	; 0x14da <GPIO_setupPinDirection+0x8c>
    14d6:	88 0f       	add	r24, r24
    14d8:	99 1f       	adc	r25, r25
    14da:	0a 94       	dec	r0
    14dc:	e2 f7       	brpl	.-8      	; 0x14d6 <GPIO_setupPinDirection+0x88>
    14de:	84 2b       	or	r24, r20
    14e0:	8c 93       	st	X, r24
    14e2:	98 c0       	rjmp	.+304    	; 0x1614 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    14e4:	aa e3       	ldi	r26, 0x3A	; 58
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	ea e3       	ldi	r30, 0x3A	; 58
    14ea:	f0 e0       	ldi	r31, 0x00	; 0
    14ec:	80 81       	ld	r24, Z
    14ee:	48 2f       	mov	r20, r24
    14f0:	8a 81       	ldd	r24, Y+2	; 0x02
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	02 2e       	mov	r0, r18
    14fc:	02 c0       	rjmp	.+4      	; 0x1502 <GPIO_setupPinDirection+0xb4>
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	0a 94       	dec	r0
    1504:	e2 f7       	brpl	.-8      	; 0x14fe <GPIO_setupPinDirection+0xb0>
    1506:	80 95       	com	r24
    1508:	84 23       	and	r24, r20
    150a:	8c 93       	st	X, r24
    150c:	83 c0       	rjmp	.+262    	; 0x1614 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    150e:	8b 81       	ldd	r24, Y+3	; 0x03
    1510:	81 30       	cpi	r24, 0x01	; 1
    1512:	a1 f4       	brne	.+40     	; 0x153c <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1514:	a7 e3       	ldi	r26, 0x37	; 55
    1516:	b0 e0       	ldi	r27, 0x00	; 0
    1518:	e7 e3       	ldi	r30, 0x37	; 55
    151a:	f0 e0       	ldi	r31, 0x00	; 0
    151c:	80 81       	ld	r24, Z
    151e:	48 2f       	mov	r20, r24
    1520:	8a 81       	ldd	r24, Y+2	; 0x02
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	81 e0       	ldi	r24, 0x01	; 1
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	02 2e       	mov	r0, r18
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <GPIO_setupPinDirection+0xe4>
    152e:	88 0f       	add	r24, r24
    1530:	99 1f       	adc	r25, r25
    1532:	0a 94       	dec	r0
    1534:	e2 f7       	brpl	.-8      	; 0x152e <GPIO_setupPinDirection+0xe0>
    1536:	84 2b       	or	r24, r20
    1538:	8c 93       	st	X, r24
    153a:	6c c0       	rjmp	.+216    	; 0x1614 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    153c:	a7 e3       	ldi	r26, 0x37	; 55
    153e:	b0 e0       	ldi	r27, 0x00	; 0
    1540:	e7 e3       	ldi	r30, 0x37	; 55
    1542:	f0 e0       	ldi	r31, 0x00	; 0
    1544:	80 81       	ld	r24, Z
    1546:	48 2f       	mov	r20, r24
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	28 2f       	mov	r18, r24
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	81 e0       	ldi	r24, 0x01	; 1
    1550:	90 e0       	ldi	r25, 0x00	; 0
    1552:	02 2e       	mov	r0, r18
    1554:	02 c0       	rjmp	.+4      	; 0x155a <GPIO_setupPinDirection+0x10c>
    1556:	88 0f       	add	r24, r24
    1558:	99 1f       	adc	r25, r25
    155a:	0a 94       	dec	r0
    155c:	e2 f7       	brpl	.-8      	; 0x1556 <GPIO_setupPinDirection+0x108>
    155e:	80 95       	com	r24
    1560:	84 23       	and	r24, r20
    1562:	8c 93       	st	X, r24
    1564:	57 c0       	rjmp	.+174    	; 0x1614 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1566:	8b 81       	ldd	r24, Y+3	; 0x03
    1568:	81 30       	cpi	r24, 0x01	; 1
    156a:	a1 f4       	brne	.+40     	; 0x1594 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    156c:	a4 e3       	ldi	r26, 0x34	; 52
    156e:	b0 e0       	ldi	r27, 0x00	; 0
    1570:	e4 e3       	ldi	r30, 0x34	; 52
    1572:	f0 e0       	ldi	r31, 0x00	; 0
    1574:	80 81       	ld	r24, Z
    1576:	48 2f       	mov	r20, r24
    1578:	8a 81       	ldd	r24, Y+2	; 0x02
    157a:	28 2f       	mov	r18, r24
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	02 2e       	mov	r0, r18
    1584:	02 c0       	rjmp	.+4      	; 0x158a <GPIO_setupPinDirection+0x13c>
    1586:	88 0f       	add	r24, r24
    1588:	99 1f       	adc	r25, r25
    158a:	0a 94       	dec	r0
    158c:	e2 f7       	brpl	.-8      	; 0x1586 <GPIO_setupPinDirection+0x138>
    158e:	84 2b       	or	r24, r20
    1590:	8c 93       	st	X, r24
    1592:	40 c0       	rjmp	.+128    	; 0x1614 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1594:	a4 e3       	ldi	r26, 0x34	; 52
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e4 e3       	ldi	r30, 0x34	; 52
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	48 2f       	mov	r20, r24
    15a0:	8a 81       	ldd	r24, Y+2	; 0x02
    15a2:	28 2f       	mov	r18, r24
    15a4:	30 e0       	ldi	r19, 0x00	; 0
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	02 2e       	mov	r0, r18
    15ac:	02 c0       	rjmp	.+4      	; 0x15b2 <GPIO_setupPinDirection+0x164>
    15ae:	88 0f       	add	r24, r24
    15b0:	99 1f       	adc	r25, r25
    15b2:	0a 94       	dec	r0
    15b4:	e2 f7       	brpl	.-8      	; 0x15ae <GPIO_setupPinDirection+0x160>
    15b6:	80 95       	com	r24
    15b8:	84 23       	and	r24, r20
    15ba:	8c 93       	st	X, r24
    15bc:	2b c0       	rjmp	.+86     	; 0x1614 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    15be:	8b 81       	ldd	r24, Y+3	; 0x03
    15c0:	81 30       	cpi	r24, 0x01	; 1
    15c2:	a1 f4       	brne	.+40     	; 0x15ec <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    15c4:	a1 e3       	ldi	r26, 0x31	; 49
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	e1 e3       	ldi	r30, 0x31	; 49
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	80 81       	ld	r24, Z
    15ce:	48 2f       	mov	r20, r24
    15d0:	8a 81       	ldd	r24, Y+2	; 0x02
    15d2:	28 2f       	mov	r18, r24
    15d4:	30 e0       	ldi	r19, 0x00	; 0
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	90 e0       	ldi	r25, 0x00	; 0
    15da:	02 2e       	mov	r0, r18
    15dc:	02 c0       	rjmp	.+4      	; 0x15e2 <GPIO_setupPinDirection+0x194>
    15de:	88 0f       	add	r24, r24
    15e0:	99 1f       	adc	r25, r25
    15e2:	0a 94       	dec	r0
    15e4:	e2 f7       	brpl	.-8      	; 0x15de <GPIO_setupPinDirection+0x190>
    15e6:	84 2b       	or	r24, r20
    15e8:	8c 93       	st	X, r24
    15ea:	14 c0       	rjmp	.+40     	; 0x1614 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    15ec:	a1 e3       	ldi	r26, 0x31	; 49
    15ee:	b0 e0       	ldi	r27, 0x00	; 0
    15f0:	e1 e3       	ldi	r30, 0x31	; 49
    15f2:	f0 e0       	ldi	r31, 0x00	; 0
    15f4:	80 81       	ld	r24, Z
    15f6:	48 2f       	mov	r20, r24
    15f8:	8a 81       	ldd	r24, Y+2	; 0x02
    15fa:	28 2f       	mov	r18, r24
    15fc:	30 e0       	ldi	r19, 0x00	; 0
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	02 2e       	mov	r0, r18
    1604:	02 c0       	rjmp	.+4      	; 0x160a <GPIO_setupPinDirection+0x1bc>
    1606:	88 0f       	add	r24, r24
    1608:	99 1f       	adc	r25, r25
    160a:	0a 94       	dec	r0
    160c:	e2 f7       	brpl	.-8      	; 0x1606 <GPIO_setupPinDirection+0x1b8>
    160e:	80 95       	com	r24
    1610:	84 23       	and	r24, r20
    1612:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	0f 90       	pop	r0
    161c:	0f 90       	pop	r0
    161e:	cf 91       	pop	r28
    1620:	df 91       	pop	r29
    1622:	08 95       	ret

00001624 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1624:	df 93       	push	r29
    1626:	cf 93       	push	r28
    1628:	00 d0       	rcall	.+0      	; 0x162a <GPIO_writePin+0x6>
    162a:	00 d0       	rcall	.+0      	; 0x162c <GPIO_writePin+0x8>
    162c:	0f 92       	push	r0
    162e:	cd b7       	in	r28, 0x3d	; 61
    1630:	de b7       	in	r29, 0x3e	; 62
    1632:	89 83       	std	Y+1, r24	; 0x01
    1634:	6a 83       	std	Y+2, r22	; 0x02
    1636:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1638:	8a 81       	ldd	r24, Y+2	; 0x02
    163a:	88 30       	cpi	r24, 0x08	; 8
    163c:	08 f0       	brcs	.+2      	; 0x1640 <GPIO_writePin+0x1c>
    163e:	d5 c0       	rjmp	.+426    	; 0x17ea <GPIO_writePin+0x1c6>
    1640:	89 81       	ldd	r24, Y+1	; 0x01
    1642:	84 30       	cpi	r24, 0x04	; 4
    1644:	08 f0       	brcs	.+2      	; 0x1648 <GPIO_writePin+0x24>
    1646:	d1 c0       	rjmp	.+418    	; 0x17ea <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1648:	89 81       	ldd	r24, Y+1	; 0x01
    164a:	28 2f       	mov	r18, r24
    164c:	30 e0       	ldi	r19, 0x00	; 0
    164e:	3d 83       	std	Y+5, r19	; 0x05
    1650:	2c 83       	std	Y+4, r18	; 0x04
    1652:	8c 81       	ldd	r24, Y+4	; 0x04
    1654:	9d 81       	ldd	r25, Y+5	; 0x05
    1656:	81 30       	cpi	r24, 0x01	; 1
    1658:	91 05       	cpc	r25, r1
    165a:	09 f4       	brne	.+2      	; 0x165e <GPIO_writePin+0x3a>
    165c:	43 c0       	rjmp	.+134    	; 0x16e4 <GPIO_writePin+0xc0>
    165e:	2c 81       	ldd	r18, Y+4	; 0x04
    1660:	3d 81       	ldd	r19, Y+5	; 0x05
    1662:	22 30       	cpi	r18, 0x02	; 2
    1664:	31 05       	cpc	r19, r1
    1666:	2c f4       	brge	.+10     	; 0x1672 <GPIO_writePin+0x4e>
    1668:	8c 81       	ldd	r24, Y+4	; 0x04
    166a:	9d 81       	ldd	r25, Y+5	; 0x05
    166c:	00 97       	sbiw	r24, 0x00	; 0
    166e:	71 f0       	breq	.+28     	; 0x168c <GPIO_writePin+0x68>
    1670:	bc c0       	rjmp	.+376    	; 0x17ea <GPIO_writePin+0x1c6>
    1672:	2c 81       	ldd	r18, Y+4	; 0x04
    1674:	3d 81       	ldd	r19, Y+5	; 0x05
    1676:	22 30       	cpi	r18, 0x02	; 2
    1678:	31 05       	cpc	r19, r1
    167a:	09 f4       	brne	.+2      	; 0x167e <GPIO_writePin+0x5a>
    167c:	5f c0       	rjmp	.+190    	; 0x173c <GPIO_writePin+0x118>
    167e:	8c 81       	ldd	r24, Y+4	; 0x04
    1680:	9d 81       	ldd	r25, Y+5	; 0x05
    1682:	83 30       	cpi	r24, 0x03	; 3
    1684:	91 05       	cpc	r25, r1
    1686:	09 f4       	brne	.+2      	; 0x168a <GPIO_writePin+0x66>
    1688:	85 c0       	rjmp	.+266    	; 0x1794 <GPIO_writePin+0x170>
    168a:	af c0       	rjmp	.+350    	; 0x17ea <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	81 30       	cpi	r24, 0x01	; 1
    1690:	a1 f4       	brne	.+40     	; 0x16ba <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1692:	ab e3       	ldi	r26, 0x3B	; 59
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	eb e3       	ldi	r30, 0x3B	; 59
    1698:	f0 e0       	ldi	r31, 0x00	; 0
    169a:	80 81       	ld	r24, Z
    169c:	48 2f       	mov	r20, r24
    169e:	8a 81       	ldd	r24, Y+2	; 0x02
    16a0:	28 2f       	mov	r18, r24
    16a2:	30 e0       	ldi	r19, 0x00	; 0
    16a4:	81 e0       	ldi	r24, 0x01	; 1
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	02 2e       	mov	r0, r18
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <GPIO_writePin+0x8c>
    16ac:	88 0f       	add	r24, r24
    16ae:	99 1f       	adc	r25, r25
    16b0:	0a 94       	dec	r0
    16b2:	e2 f7       	brpl	.-8      	; 0x16ac <GPIO_writePin+0x88>
    16b4:	84 2b       	or	r24, r20
    16b6:	8c 93       	st	X, r24
    16b8:	98 c0       	rjmp	.+304    	; 0x17ea <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    16ba:	ab e3       	ldi	r26, 0x3B	; 59
    16bc:	b0 e0       	ldi	r27, 0x00	; 0
    16be:	eb e3       	ldi	r30, 0x3B	; 59
    16c0:	f0 e0       	ldi	r31, 0x00	; 0
    16c2:	80 81       	ld	r24, Z
    16c4:	48 2f       	mov	r20, r24
    16c6:	8a 81       	ldd	r24, Y+2	; 0x02
    16c8:	28 2f       	mov	r18, r24
    16ca:	30 e0       	ldi	r19, 0x00	; 0
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	02 2e       	mov	r0, r18
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <GPIO_writePin+0xb4>
    16d4:	88 0f       	add	r24, r24
    16d6:	99 1f       	adc	r25, r25
    16d8:	0a 94       	dec	r0
    16da:	e2 f7       	brpl	.-8      	; 0x16d4 <GPIO_writePin+0xb0>
    16dc:	80 95       	com	r24
    16de:	84 23       	and	r24, r20
    16e0:	8c 93       	st	X, r24
    16e2:	83 c0       	rjmp	.+262    	; 0x17ea <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    16e4:	8b 81       	ldd	r24, Y+3	; 0x03
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	a1 f4       	brne	.+40     	; 0x1712 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    16ea:	a8 e3       	ldi	r26, 0x38	; 56
    16ec:	b0 e0       	ldi	r27, 0x00	; 0
    16ee:	e8 e3       	ldi	r30, 0x38	; 56
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	48 2f       	mov	r20, r24
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	28 2f       	mov	r18, r24
    16fa:	30 e0       	ldi	r19, 0x00	; 0
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	02 2e       	mov	r0, r18
    1702:	02 c0       	rjmp	.+4      	; 0x1708 <GPIO_writePin+0xe4>
    1704:	88 0f       	add	r24, r24
    1706:	99 1f       	adc	r25, r25
    1708:	0a 94       	dec	r0
    170a:	e2 f7       	brpl	.-8      	; 0x1704 <GPIO_writePin+0xe0>
    170c:	84 2b       	or	r24, r20
    170e:	8c 93       	st	X, r24
    1710:	6c c0       	rjmp	.+216    	; 0x17ea <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1712:	a8 e3       	ldi	r26, 0x38	; 56
    1714:	b0 e0       	ldi	r27, 0x00	; 0
    1716:	e8 e3       	ldi	r30, 0x38	; 56
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 81       	ld	r24, Z
    171c:	48 2f       	mov	r20, r24
    171e:	8a 81       	ldd	r24, Y+2	; 0x02
    1720:	28 2f       	mov	r18, r24
    1722:	30 e0       	ldi	r19, 0x00	; 0
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	02 2e       	mov	r0, r18
    172a:	02 c0       	rjmp	.+4      	; 0x1730 <GPIO_writePin+0x10c>
    172c:	88 0f       	add	r24, r24
    172e:	99 1f       	adc	r25, r25
    1730:	0a 94       	dec	r0
    1732:	e2 f7       	brpl	.-8      	; 0x172c <GPIO_writePin+0x108>
    1734:	80 95       	com	r24
    1736:	84 23       	and	r24, r20
    1738:	8c 93       	st	X, r24
    173a:	57 c0       	rjmp	.+174    	; 0x17ea <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	81 30       	cpi	r24, 0x01	; 1
    1740:	a1 f4       	brne	.+40     	; 0x176a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1742:	a5 e3       	ldi	r26, 0x35	; 53
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	e5 e3       	ldi	r30, 0x35	; 53
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	48 2f       	mov	r20, r24
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	02 2e       	mov	r0, r18
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <GPIO_writePin+0x13c>
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	0a 94       	dec	r0
    1762:	e2 f7       	brpl	.-8      	; 0x175c <GPIO_writePin+0x138>
    1764:	84 2b       	or	r24, r20
    1766:	8c 93       	st	X, r24
    1768:	40 c0       	rjmp	.+128    	; 0x17ea <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    176a:	a5 e3       	ldi	r26, 0x35	; 53
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	e5 e3       	ldi	r30, 0x35	; 53
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	48 2f       	mov	r20, r24
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	28 2f       	mov	r18, r24
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	02 2e       	mov	r0, r18
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <GPIO_writePin+0x164>
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	0a 94       	dec	r0
    178a:	e2 f7       	brpl	.-8      	; 0x1784 <GPIO_writePin+0x160>
    178c:	80 95       	com	r24
    178e:	84 23       	and	r24, r20
    1790:	8c 93       	st	X, r24
    1792:	2b c0       	rjmp	.+86     	; 0x17ea <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1794:	8b 81       	ldd	r24, Y+3	; 0x03
    1796:	81 30       	cpi	r24, 0x01	; 1
    1798:	a1 f4       	brne	.+40     	; 0x17c2 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    179a:	a2 e3       	ldi	r26, 0x32	; 50
    179c:	b0 e0       	ldi	r27, 0x00	; 0
    179e:	e2 e3       	ldi	r30, 0x32	; 50
    17a0:	f0 e0       	ldi	r31, 0x00	; 0
    17a2:	80 81       	ld	r24, Z
    17a4:	48 2f       	mov	r20, r24
    17a6:	8a 81       	ldd	r24, Y+2	; 0x02
    17a8:	28 2f       	mov	r18, r24
    17aa:	30 e0       	ldi	r19, 0x00	; 0
    17ac:	81 e0       	ldi	r24, 0x01	; 1
    17ae:	90 e0       	ldi	r25, 0x00	; 0
    17b0:	02 2e       	mov	r0, r18
    17b2:	02 c0       	rjmp	.+4      	; 0x17b8 <GPIO_writePin+0x194>
    17b4:	88 0f       	add	r24, r24
    17b6:	99 1f       	adc	r25, r25
    17b8:	0a 94       	dec	r0
    17ba:	e2 f7       	brpl	.-8      	; 0x17b4 <GPIO_writePin+0x190>
    17bc:	84 2b       	or	r24, r20
    17be:	8c 93       	st	X, r24
    17c0:	14 c0       	rjmp	.+40     	; 0x17ea <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    17c2:	a2 e3       	ldi	r26, 0x32	; 50
    17c4:	b0 e0       	ldi	r27, 0x00	; 0
    17c6:	e2 e3       	ldi	r30, 0x32	; 50
    17c8:	f0 e0       	ldi	r31, 0x00	; 0
    17ca:	80 81       	ld	r24, Z
    17cc:	48 2f       	mov	r20, r24
    17ce:	8a 81       	ldd	r24, Y+2	; 0x02
    17d0:	28 2f       	mov	r18, r24
    17d2:	30 e0       	ldi	r19, 0x00	; 0
    17d4:	81 e0       	ldi	r24, 0x01	; 1
    17d6:	90 e0       	ldi	r25, 0x00	; 0
    17d8:	02 2e       	mov	r0, r18
    17da:	02 c0       	rjmp	.+4      	; 0x17e0 <GPIO_writePin+0x1bc>
    17dc:	88 0f       	add	r24, r24
    17de:	99 1f       	adc	r25, r25
    17e0:	0a 94       	dec	r0
    17e2:	e2 f7       	brpl	.-8      	; 0x17dc <GPIO_writePin+0x1b8>
    17e4:	80 95       	com	r24
    17e6:	84 23       	and	r24, r20
    17e8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    17ea:	0f 90       	pop	r0
    17ec:	0f 90       	pop	r0
    17ee:	0f 90       	pop	r0
    17f0:	0f 90       	pop	r0
    17f2:	0f 90       	pop	r0
    17f4:	cf 91       	pop	r28
    17f6:	df 91       	pop	r29
    17f8:	08 95       	ret

000017fa <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    17fa:	df 93       	push	r29
    17fc:	cf 93       	push	r28
    17fe:	00 d0       	rcall	.+0      	; 0x1800 <GPIO_readPin+0x6>
    1800:	00 d0       	rcall	.+0      	; 0x1802 <GPIO_readPin+0x8>
    1802:	0f 92       	push	r0
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	8a 83       	std	Y+2, r24	; 0x02
    180a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    180c:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    180e:	8b 81       	ldd	r24, Y+3	; 0x03
    1810:	88 30       	cpi	r24, 0x08	; 8
    1812:	08 f0       	brcs	.+2      	; 0x1816 <GPIO_readPin+0x1c>
    1814:	84 c0       	rjmp	.+264    	; 0x191e <GPIO_readPin+0x124>
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	84 30       	cpi	r24, 0x04	; 4
    181a:	08 f0       	brcs	.+2      	; 0x181e <GPIO_readPin+0x24>
    181c:	80 c0       	rjmp	.+256    	; 0x191e <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    181e:	8a 81       	ldd	r24, Y+2	; 0x02
    1820:	28 2f       	mov	r18, r24
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	3d 83       	std	Y+5, r19	; 0x05
    1826:	2c 83       	std	Y+4, r18	; 0x04
    1828:	4c 81       	ldd	r20, Y+4	; 0x04
    182a:	5d 81       	ldd	r21, Y+5	; 0x05
    182c:	41 30       	cpi	r20, 0x01	; 1
    182e:	51 05       	cpc	r21, r1
    1830:	79 f1       	breq	.+94     	; 0x1890 <GPIO_readPin+0x96>
    1832:	8c 81       	ldd	r24, Y+4	; 0x04
    1834:	9d 81       	ldd	r25, Y+5	; 0x05
    1836:	82 30       	cpi	r24, 0x02	; 2
    1838:	91 05       	cpc	r25, r1
    183a:	34 f4       	brge	.+12     	; 0x1848 <GPIO_readPin+0x4e>
    183c:	2c 81       	ldd	r18, Y+4	; 0x04
    183e:	3d 81       	ldd	r19, Y+5	; 0x05
    1840:	21 15       	cp	r18, r1
    1842:	31 05       	cpc	r19, r1
    1844:	69 f0       	breq	.+26     	; 0x1860 <GPIO_readPin+0x66>
    1846:	6b c0       	rjmp	.+214    	; 0x191e <GPIO_readPin+0x124>
    1848:	4c 81       	ldd	r20, Y+4	; 0x04
    184a:	5d 81       	ldd	r21, Y+5	; 0x05
    184c:	42 30       	cpi	r20, 0x02	; 2
    184e:	51 05       	cpc	r21, r1
    1850:	b9 f1       	breq	.+110    	; 0x18c0 <GPIO_readPin+0xc6>
    1852:	8c 81       	ldd	r24, Y+4	; 0x04
    1854:	9d 81       	ldd	r25, Y+5	; 0x05
    1856:	83 30       	cpi	r24, 0x03	; 3
    1858:	91 05       	cpc	r25, r1
    185a:	09 f4       	brne	.+2      	; 0x185e <GPIO_readPin+0x64>
    185c:	49 c0       	rjmp	.+146    	; 0x18f0 <GPIO_readPin+0xf6>
    185e:	5f c0       	rjmp	.+190    	; 0x191e <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1860:	e9 e3       	ldi	r30, 0x39	; 57
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 81       	ld	r24, Z
    1866:	28 2f       	mov	r18, r24
    1868:	30 e0       	ldi	r19, 0x00	; 0
    186a:	8b 81       	ldd	r24, Y+3	; 0x03
    186c:	88 2f       	mov	r24, r24
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	a9 01       	movw	r20, r18
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <GPIO_readPin+0x7e>
    1874:	55 95       	asr	r21
    1876:	47 95       	ror	r20
    1878:	8a 95       	dec	r24
    187a:	e2 f7       	brpl	.-8      	; 0x1874 <GPIO_readPin+0x7a>
    187c:	ca 01       	movw	r24, r20
    187e:	81 70       	andi	r24, 0x01	; 1
    1880:	90 70       	andi	r25, 0x00	; 0
    1882:	88 23       	and	r24, r24
    1884:	19 f0       	breq	.+6      	; 0x188c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1886:	81 e0       	ldi	r24, 0x01	; 1
    1888:	89 83       	std	Y+1, r24	; 0x01
    188a:	49 c0       	rjmp	.+146    	; 0x191e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    188c:	19 82       	std	Y+1, r1	; 0x01
    188e:	47 c0       	rjmp	.+142    	; 0x191e <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1890:	e6 e3       	ldi	r30, 0x36	; 54
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	28 2f       	mov	r18, r24
    1898:	30 e0       	ldi	r19, 0x00	; 0
    189a:	8b 81       	ldd	r24, Y+3	; 0x03
    189c:	88 2f       	mov	r24, r24
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	a9 01       	movw	r20, r18
    18a2:	02 c0       	rjmp	.+4      	; 0x18a8 <GPIO_readPin+0xae>
    18a4:	55 95       	asr	r21
    18a6:	47 95       	ror	r20
    18a8:	8a 95       	dec	r24
    18aa:	e2 f7       	brpl	.-8      	; 0x18a4 <GPIO_readPin+0xaa>
    18ac:	ca 01       	movw	r24, r20
    18ae:	81 70       	andi	r24, 0x01	; 1
    18b0:	90 70       	andi	r25, 0x00	; 0
    18b2:	88 23       	and	r24, r24
    18b4:	19 f0       	breq	.+6      	; 0x18bc <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    18b6:	81 e0       	ldi	r24, 0x01	; 1
    18b8:	89 83       	std	Y+1, r24	; 0x01
    18ba:	31 c0       	rjmp	.+98     	; 0x191e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18bc:	19 82       	std	Y+1, r1	; 0x01
    18be:	2f c0       	rjmp	.+94     	; 0x191e <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    18c0:	e3 e3       	ldi	r30, 0x33	; 51
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	80 81       	ld	r24, Z
    18c6:	28 2f       	mov	r18, r24
    18c8:	30 e0       	ldi	r19, 0x00	; 0
    18ca:	8b 81       	ldd	r24, Y+3	; 0x03
    18cc:	88 2f       	mov	r24, r24
    18ce:	90 e0       	ldi	r25, 0x00	; 0
    18d0:	a9 01       	movw	r20, r18
    18d2:	02 c0       	rjmp	.+4      	; 0x18d8 <GPIO_readPin+0xde>
    18d4:	55 95       	asr	r21
    18d6:	47 95       	ror	r20
    18d8:	8a 95       	dec	r24
    18da:	e2 f7       	brpl	.-8      	; 0x18d4 <GPIO_readPin+0xda>
    18dc:	ca 01       	movw	r24, r20
    18de:	81 70       	andi	r24, 0x01	; 1
    18e0:	90 70       	andi	r25, 0x00	; 0
    18e2:	88 23       	and	r24, r24
    18e4:	19 f0       	breq	.+6      	; 0x18ec <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    18e6:	81 e0       	ldi	r24, 0x01	; 1
    18e8:	89 83       	std	Y+1, r24	; 0x01
    18ea:	19 c0       	rjmp	.+50     	; 0x191e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18ec:	19 82       	std	Y+1, r1	; 0x01
    18ee:	17 c0       	rjmp	.+46     	; 0x191e <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    18f0:	e0 e3       	ldi	r30, 0x30	; 48
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	88 2f       	mov	r24, r24
    18fe:	90 e0       	ldi	r25, 0x00	; 0
    1900:	a9 01       	movw	r20, r18
    1902:	02 c0       	rjmp	.+4      	; 0x1908 <GPIO_readPin+0x10e>
    1904:	55 95       	asr	r21
    1906:	47 95       	ror	r20
    1908:	8a 95       	dec	r24
    190a:	e2 f7       	brpl	.-8      	; 0x1904 <GPIO_readPin+0x10a>
    190c:	ca 01       	movw	r24, r20
    190e:	81 70       	andi	r24, 0x01	; 1
    1910:	90 70       	andi	r25, 0x00	; 0
    1912:	88 23       	and	r24, r24
    1914:	19 f0       	breq	.+6      	; 0x191c <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	89 83       	std	Y+1, r24	; 0x01
    191a:	01 c0       	rjmp	.+2      	; 0x191e <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    191c:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    191e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	0f 90       	pop	r0
    192a:	cf 91       	pop	r28
    192c:	df 91       	pop	r29
    192e:	08 95       	ret

00001930 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	00 d0       	rcall	.+0      	; 0x1936 <GPIO_setupPortDirection+0x6>
    1936:	00 d0       	rcall	.+0      	; 0x1938 <GPIO_setupPortDirection+0x8>
    1938:	cd b7       	in	r28, 0x3d	; 61
    193a:	de b7       	in	r29, 0x3e	; 62
    193c:	89 83       	std	Y+1, r24	; 0x01
    193e:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1940:	89 81       	ldd	r24, Y+1	; 0x01
    1942:	84 30       	cpi	r24, 0x04	; 4
    1944:	90 f5       	brcc	.+100    	; 0x19aa <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	28 2f       	mov	r18, r24
    194a:	30 e0       	ldi	r19, 0x00	; 0
    194c:	3c 83       	std	Y+4, r19	; 0x04
    194e:	2b 83       	std	Y+3, r18	; 0x03
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	9c 81       	ldd	r25, Y+4	; 0x04
    1954:	81 30       	cpi	r24, 0x01	; 1
    1956:	91 05       	cpc	r25, r1
    1958:	d1 f0       	breq	.+52     	; 0x198e <GPIO_setupPortDirection+0x5e>
    195a:	2b 81       	ldd	r18, Y+3	; 0x03
    195c:	3c 81       	ldd	r19, Y+4	; 0x04
    195e:	22 30       	cpi	r18, 0x02	; 2
    1960:	31 05       	cpc	r19, r1
    1962:	2c f4       	brge	.+10     	; 0x196e <GPIO_setupPortDirection+0x3e>
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	9c 81       	ldd	r25, Y+4	; 0x04
    1968:	00 97       	sbiw	r24, 0x00	; 0
    196a:	61 f0       	breq	.+24     	; 0x1984 <GPIO_setupPortDirection+0x54>
    196c:	1e c0       	rjmp	.+60     	; 0x19aa <GPIO_setupPortDirection+0x7a>
    196e:	2b 81       	ldd	r18, Y+3	; 0x03
    1970:	3c 81       	ldd	r19, Y+4	; 0x04
    1972:	22 30       	cpi	r18, 0x02	; 2
    1974:	31 05       	cpc	r19, r1
    1976:	81 f0       	breq	.+32     	; 0x1998 <GPIO_setupPortDirection+0x68>
    1978:	8b 81       	ldd	r24, Y+3	; 0x03
    197a:	9c 81       	ldd	r25, Y+4	; 0x04
    197c:	83 30       	cpi	r24, 0x03	; 3
    197e:	91 05       	cpc	r25, r1
    1980:	81 f0       	breq	.+32     	; 0x19a2 <GPIO_setupPortDirection+0x72>
    1982:	13 c0       	rjmp	.+38     	; 0x19aa <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1984:	ea e3       	ldi	r30, 0x3A	; 58
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	80 83       	st	Z, r24
    198c:	0e c0       	rjmp	.+28     	; 0x19aa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    198e:	e7 e3       	ldi	r30, 0x37	; 55
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	80 83       	st	Z, r24
    1996:	09 c0       	rjmp	.+18     	; 0x19aa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1998:	e4 e3       	ldi	r30, 0x34	; 52
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	8a 81       	ldd	r24, Y+2	; 0x02
    199e:	80 83       	st	Z, r24
    19a0:	04 c0       	rjmp	.+8      	; 0x19aa <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    19a2:	e1 e3       	ldi	r30, 0x31	; 49
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	8a 81       	ldd	r24, Y+2	; 0x02
    19a8:	80 83       	st	Z, r24
			break;
		}
	}
}
    19aa:	0f 90       	pop	r0
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	cf 91       	pop	r28
    19b4:	df 91       	pop	r29
    19b6:	08 95       	ret

000019b8 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    19b8:	df 93       	push	r29
    19ba:	cf 93       	push	r28
    19bc:	00 d0       	rcall	.+0      	; 0x19be <GPIO_writePort+0x6>
    19be:	00 d0       	rcall	.+0      	; 0x19c0 <GPIO_writePort+0x8>
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	89 83       	std	Y+1, r24	; 0x01
    19c6:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19c8:	89 81       	ldd	r24, Y+1	; 0x01
    19ca:	84 30       	cpi	r24, 0x04	; 4
    19cc:	90 f5       	brcc	.+100    	; 0x1a32 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    19ce:	89 81       	ldd	r24, Y+1	; 0x01
    19d0:	28 2f       	mov	r18, r24
    19d2:	30 e0       	ldi	r19, 0x00	; 0
    19d4:	3c 83       	std	Y+4, r19	; 0x04
    19d6:	2b 83       	std	Y+3, r18	; 0x03
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	9c 81       	ldd	r25, Y+4	; 0x04
    19dc:	81 30       	cpi	r24, 0x01	; 1
    19de:	91 05       	cpc	r25, r1
    19e0:	d1 f0       	breq	.+52     	; 0x1a16 <GPIO_writePort+0x5e>
    19e2:	2b 81       	ldd	r18, Y+3	; 0x03
    19e4:	3c 81       	ldd	r19, Y+4	; 0x04
    19e6:	22 30       	cpi	r18, 0x02	; 2
    19e8:	31 05       	cpc	r19, r1
    19ea:	2c f4       	brge	.+10     	; 0x19f6 <GPIO_writePort+0x3e>
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	00 97       	sbiw	r24, 0x00	; 0
    19f2:	61 f0       	breq	.+24     	; 0x1a0c <GPIO_writePort+0x54>
    19f4:	1e c0       	rjmp	.+60     	; 0x1a32 <GPIO_writePort+0x7a>
    19f6:	2b 81       	ldd	r18, Y+3	; 0x03
    19f8:	3c 81       	ldd	r19, Y+4	; 0x04
    19fa:	22 30       	cpi	r18, 0x02	; 2
    19fc:	31 05       	cpc	r19, r1
    19fe:	81 f0       	breq	.+32     	; 0x1a20 <GPIO_writePort+0x68>
    1a00:	8b 81       	ldd	r24, Y+3	; 0x03
    1a02:	9c 81       	ldd	r25, Y+4	; 0x04
    1a04:	83 30       	cpi	r24, 0x03	; 3
    1a06:	91 05       	cpc	r25, r1
    1a08:	81 f0       	breq	.+32     	; 0x1a2a <GPIO_writePort+0x72>
    1a0a:	13 c0       	rjmp	.+38     	; 0x1a32 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a0c:	eb e3       	ldi	r30, 0x3B	; 59
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	8a 81       	ldd	r24, Y+2	; 0x02
    1a12:	80 83       	st	Z, r24
    1a14:	0e c0       	rjmp	.+28     	; 0x1a32 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a16:	e8 e3       	ldi	r30, 0x38	; 56
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	80 83       	st	Z, r24
    1a1e:	09 c0       	rjmp	.+18     	; 0x1a32 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a20:	e5 e3       	ldi	r30, 0x35	; 53
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	8a 81       	ldd	r24, Y+2	; 0x02
    1a26:	80 83       	st	Z, r24
    1a28:	04 c0       	rjmp	.+8      	; 0x1a32 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1a2a:	e2 e3       	ldi	r30, 0x32	; 50
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a30:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a32:	0f 90       	pop	r0
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	00 d0       	rcall	.+0      	; 0x1a46 <GPIO_readPort+0x6>
    1a46:	00 d0       	rcall	.+0      	; 0x1a48 <GPIO_readPort+0x8>
    1a48:	cd b7       	in	r28, 0x3d	; 61
    1a4a:	de b7       	in	r29, 0x3e	; 62
    1a4c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1a4e:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a50:	8a 81       	ldd	r24, Y+2	; 0x02
    1a52:	84 30       	cpi	r24, 0x04	; 4
    1a54:	90 f5       	brcc	.+100    	; 0x1aba <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1a56:	8a 81       	ldd	r24, Y+2	; 0x02
    1a58:	28 2f       	mov	r18, r24
    1a5a:	30 e0       	ldi	r19, 0x00	; 0
    1a5c:	3c 83       	std	Y+4, r19	; 0x04
    1a5e:	2b 83       	std	Y+3, r18	; 0x03
    1a60:	8b 81       	ldd	r24, Y+3	; 0x03
    1a62:	9c 81       	ldd	r25, Y+4	; 0x04
    1a64:	81 30       	cpi	r24, 0x01	; 1
    1a66:	91 05       	cpc	r25, r1
    1a68:	d1 f0       	breq	.+52     	; 0x1a9e <GPIO_readPort+0x5e>
    1a6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1a6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1a6e:	22 30       	cpi	r18, 0x02	; 2
    1a70:	31 05       	cpc	r19, r1
    1a72:	2c f4       	brge	.+10     	; 0x1a7e <GPIO_readPort+0x3e>
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	9c 81       	ldd	r25, Y+4	; 0x04
    1a78:	00 97       	sbiw	r24, 0x00	; 0
    1a7a:	61 f0       	breq	.+24     	; 0x1a94 <GPIO_readPort+0x54>
    1a7c:	1e c0       	rjmp	.+60     	; 0x1aba <GPIO_readPort+0x7a>
    1a7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a80:	3c 81       	ldd	r19, Y+4	; 0x04
    1a82:	22 30       	cpi	r18, 0x02	; 2
    1a84:	31 05       	cpc	r19, r1
    1a86:	81 f0       	breq	.+32     	; 0x1aa8 <GPIO_readPort+0x68>
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8c:	83 30       	cpi	r24, 0x03	; 3
    1a8e:	91 05       	cpc	r25, r1
    1a90:	81 f0       	breq	.+32     	; 0x1ab2 <GPIO_readPort+0x72>
    1a92:	13 c0       	rjmp	.+38     	; 0x1aba <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1a94:	e9 e3       	ldi	r30, 0x39	; 57
    1a96:	f0 e0       	ldi	r31, 0x00	; 0
    1a98:	80 81       	ld	r24, Z
    1a9a:	89 83       	std	Y+1, r24	; 0x01
    1a9c:	0e c0       	rjmp	.+28     	; 0x1aba <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1a9e:	e6 e3       	ldi	r30, 0x36	; 54
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	89 83       	std	Y+1, r24	; 0x01
    1aa6:	09 c0       	rjmp	.+18     	; 0x1aba <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1aa8:	e3 e3       	ldi	r30, 0x33	; 51
    1aaa:	f0 e0       	ldi	r31, 0x00	; 0
    1aac:	80 81       	ld	r24, Z
    1aae:	89 83       	std	Y+1, r24	; 0x01
    1ab0:	04 c0       	rjmp	.+8      	; 0x1aba <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1ab2:	e0 e3       	ldi	r30, 0x30	; 48
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
}
    1abc:	0f 90       	pop	r0
    1abe:	0f 90       	pop	r0
    1ac0:	0f 90       	pop	r0
    1ac2:	0f 90       	pop	r0
    1ac4:	cf 91       	pop	r28
    1ac6:	df 91       	pop	r29
    1ac8:	08 95       	ret

00001aca <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    1aca:	1f 92       	push	r1
    1acc:	0f 92       	push	r0
    1ace:	0f b6       	in	r0, 0x3f	; 63
    1ad0:	0f 92       	push	r0
    1ad2:	11 24       	eor	r1, r1
    1ad4:	2f 93       	push	r18
    1ad6:	3f 93       	push	r19
    1ad8:	4f 93       	push	r20
    1ada:	5f 93       	push	r21
    1adc:	6f 93       	push	r22
    1ade:	7f 93       	push	r23
    1ae0:	8f 93       	push	r24
    1ae2:	9f 93       	push	r25
    1ae4:	af 93       	push	r26
    1ae6:	bf 93       	push	r27
    1ae8:	ef 93       	push	r30
    1aea:	ff 93       	push	r31
    1aec:	df 93       	push	r29
    1aee:	cf 93       	push	r28
    1af0:	cd b7       	in	r28, 0x3d	; 61
    1af2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1af4:	80 91 7b 01 	lds	r24, 0x017B
    1af8:	90 91 7c 01 	lds	r25, 0x017C
    1afc:	00 97       	sbiw	r24, 0x00	; 0
    1afe:	29 f0       	breq	.+10     	; 0x1b0a <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1b00:	e0 91 7b 01 	lds	r30, 0x017B
    1b04:	f0 91 7c 01 	lds	r31, 0x017C
    1b08:	09 95       	icall
	}
}
    1b0a:	cf 91       	pop	r28
    1b0c:	df 91       	pop	r29
    1b0e:	ff 91       	pop	r31
    1b10:	ef 91       	pop	r30
    1b12:	bf 91       	pop	r27
    1b14:	af 91       	pop	r26
    1b16:	9f 91       	pop	r25
    1b18:	8f 91       	pop	r24
    1b1a:	7f 91       	pop	r23
    1b1c:	6f 91       	pop	r22
    1b1e:	5f 91       	pop	r21
    1b20:	4f 91       	pop	r20
    1b22:	3f 91       	pop	r19
    1b24:	2f 91       	pop	r18
    1b26:	0f 90       	pop	r0
    1b28:	0f be       	out	0x3f, r0	; 63
    1b2a:	0f 90       	pop	r0
    1b2c:	1f 90       	pop	r1
    1b2e:	18 95       	reti

00001b30 <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    1b30:	df 93       	push	r29
    1b32:	cf 93       	push	r28
    1b34:	00 d0       	rcall	.+0      	; 0x1b36 <ICU_init+0x6>
    1b36:	cd b7       	in	r28, 0x3d	; 61
    1b38:	de b7       	in	r29, 0x3e	; 62
    1b3a:	9a 83       	std	Y+2, r25	; 0x02
    1b3c:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
    1b3e:	a1 e3       	ldi	r26, 0x31	; 49
    1b40:	b0 e0       	ldi	r27, 0x00	; 0
    1b42:	e1 e3       	ldi	r30, 0x31	; 49
    1b44:	f0 e0       	ldi	r31, 0x00	; 0
    1b46:	80 81       	ld	r24, Z
    1b48:	8f 7b       	andi	r24, 0xBF	; 191
    1b4a:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1b4c:	ef e4       	ldi	r30, 0x4F	; 79
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	8c e0       	ldi	r24, 0x0C	; 12
    1b52:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    1b54:	ae e4       	ldi	r26, 0x4E	; 78
    1b56:	b0 e0       	ldi	r27, 0x00	; 0
    1b58:	ee e4       	ldi	r30, 0x4E	; 78
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	80 81       	ld	r24, Z
    1b5e:	98 2f       	mov	r25, r24
    1b60:	98 7f       	andi	r25, 0xF8	; 248
    1b62:	e9 81       	ldd	r30, Y+1	; 0x01
    1b64:	fa 81       	ldd	r31, Y+2	; 0x02
    1b66:	80 81       	ld	r24, Z
    1b68:	89 2b       	or	r24, r25
    1b6a:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    1b6c:	ae e4       	ldi	r26, 0x4E	; 78
    1b6e:	b0 e0       	ldi	r27, 0x00	; 0
    1b70:	ee e4       	ldi	r30, 0x4E	; 78
    1b72:	f0 e0       	ldi	r31, 0x00	; 0
    1b74:	80 81       	ld	r24, Z
    1b76:	28 2f       	mov	r18, r24
    1b78:	2f 7b       	andi	r18, 0xBF	; 191
    1b7a:	e9 81       	ldd	r30, Y+1	; 0x01
    1b7c:	fa 81       	ldd	r31, Y+2	; 0x02
    1b7e:	81 81       	ldd	r24, Z+1	; 0x01
    1b80:	88 2f       	mov	r24, r24
    1b82:	90 e0       	ldi	r25, 0x00	; 0
    1b84:	00 24       	eor	r0, r0
    1b86:	96 95       	lsr	r25
    1b88:	87 95       	ror	r24
    1b8a:	07 94       	ror	r0
    1b8c:	96 95       	lsr	r25
    1b8e:	87 95       	ror	r24
    1b90:	07 94       	ror	r0
    1b92:	98 2f       	mov	r25, r24
    1b94:	80 2d       	mov	r24, r0
    1b96:	82 2b       	or	r24, r18
    1b98:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    1b9a:	ec e4       	ldi	r30, 0x4C	; 76
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	11 82       	std	Z+1, r1	; 0x01
    1ba0:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    1ba2:	e6 e4       	ldi	r30, 0x46	; 70
    1ba4:	f0 e0       	ldi	r31, 0x00	; 0
    1ba6:	11 82       	std	Z+1, r1	; 0x01
    1ba8:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    1baa:	a9 e5       	ldi	r26, 0x59	; 89
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	e9 e5       	ldi	r30, 0x59	; 89
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	80 62       	ori	r24, 0x20	; 32
    1bb6:	8c 93       	st	X, r24
}
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	cf 91       	pop	r28
    1bbe:	df 91       	pop	r29
    1bc0:	08 95       	ret

00001bc2 <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
    1bc2:	df 93       	push	r29
    1bc4:	cf 93       	push	r28
    1bc6:	00 d0       	rcall	.+0      	; 0x1bc8 <ICU_setCallBack+0x6>
    1bc8:	cd b7       	in	r28, 0x3d	; 61
    1bca:	de b7       	in	r29, 0x3e	; 62
    1bcc:	9a 83       	std	Y+2, r25	; 0x02
    1bce:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
    1bd2:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd4:	90 93 7c 01 	sts	0x017C, r25
    1bd8:	80 93 7b 01 	sts	0x017B, r24
}
    1bdc:	0f 90       	pop	r0
    1bde:	0f 90       	pop	r0
    1be0:	cf 91       	pop	r28
    1be2:	df 91       	pop	r29
    1be4:	08 95       	ret

00001be6 <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    1be6:	df 93       	push	r29
    1be8:	cf 93       	push	r28
    1bea:	0f 92       	push	r0
    1bec:	cd b7       	in	r28, 0x3d	; 61
    1bee:	de b7       	in	r29, 0x3e	; 62
    1bf0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    1bf2:	ae e4       	ldi	r26, 0x4E	; 78
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	ee e4       	ldi	r30, 0x4E	; 78
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	28 2f       	mov	r18, r24
    1bfe:	2f 7b       	andi	r18, 0xBF	; 191
    1c00:	89 81       	ldd	r24, Y+1	; 0x01
    1c02:	88 2f       	mov	r24, r24
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	00 24       	eor	r0, r0
    1c08:	96 95       	lsr	r25
    1c0a:	87 95       	ror	r24
    1c0c:	07 94       	ror	r0
    1c0e:	96 95       	lsr	r25
    1c10:	87 95       	ror	r24
    1c12:	07 94       	ror	r0
    1c14:	98 2f       	mov	r25, r24
    1c16:	80 2d       	mov	r24, r0
    1c18:	82 2b       	or	r24, r18
    1c1a:	8c 93       	st	X, r24
}
    1c1c:	0f 90       	pop	r0
    1c1e:	cf 91       	pop	r28
    1c20:	df 91       	pop	r29
    1c22:	08 95       	ret

00001c24 <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void)
{
    1c24:	df 93       	push	r29
    1c26:	cf 93       	push	r28
    1c28:	cd b7       	in	r28, 0x3d	; 61
    1c2a:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1c2c:	e6 e4       	ldi	r30, 0x46	; 70
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	80 81       	ld	r24, Z
    1c32:	91 81       	ldd	r25, Z+1	; 0x01
}
    1c34:	cf 91       	pop	r28
    1c36:	df 91       	pop	r29
    1c38:	08 95       	ret

00001c3a <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
    1c3a:	df 93       	push	r29
    1c3c:	cf 93       	push	r28
    1c3e:	cd b7       	in	r28, 0x3d	; 61
    1c40:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1c42:	ec e4       	ldi	r30, 0x4C	; 76
    1c44:	f0 e0       	ldi	r31, 0x00	; 0
    1c46:	11 82       	std	Z+1, r1	; 0x01
    1c48:	10 82       	st	Z, r1
}
    1c4a:	cf 91       	pop	r28
    1c4c:	df 91       	pop	r29
    1c4e:	08 95       	ret

00001c50 <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deInit(void)
{
    1c50:	df 93       	push	r29
    1c52:	cf 93       	push	r28
    1c54:	cd b7       	in	r28, 0x3d	; 61
    1c56:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
    1c58:	ef e4       	ldi	r30, 0x4F	; 79
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	10 82       	st	Z, r1
	TCCR1B = 0;
    1c5e:	ee e4       	ldi	r30, 0x4E	; 78
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	10 82       	st	Z, r1
	TCNT1 = 0;
    1c64:	ec e4       	ldi	r30, 0x4C	; 76
    1c66:	f0 e0       	ldi	r31, 0x00	; 0
    1c68:	11 82       	std	Z+1, r1	; 0x01
    1c6a:	10 82       	st	Z, r1
	ICR1 = 0;
    1c6c:	e6 e4       	ldi	r30, 0x46	; 70
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	11 82       	std	Z+1, r1	; 0x01
    1c72:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    1c74:	a9 e5       	ldi	r26, 0x59	; 89
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	e9 e5       	ldi	r30, 0x59	; 89
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	80 81       	ld	r24, Z
    1c7e:	8f 7d       	andi	r24, 0xDF	; 223
    1c80:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    1c82:	10 92 7c 01 	sts	0x017C, r1
    1c86:	10 92 7b 01 	sts	0x017B, r1
}
    1c8a:	cf 91       	pop	r28
    1c8c:	df 91       	pop	r29
    1c8e:	08 95       	ret

00001c90 <LCD_sendCommand>:


/*
 * send command to lcd
 */
void LCD_sendCommand(uint8 command){
    1c90:	0f 93       	push	r16
    1c92:	1f 93       	push	r17
    1c94:	df 93       	push	r29
    1c96:	cf 93       	push	r28
    1c98:	cd b7       	in	r28, 0x3d	; 61
    1c9a:	de b7       	in	r29, 0x3e	; 62
    1c9c:	cd 54       	subi	r28, 0x4D	; 77
    1c9e:	d0 40       	sbci	r29, 0x00	; 0
    1ca0:	0f b6       	in	r0, 0x3f	; 63
    1ca2:	f8 94       	cli
    1ca4:	de bf       	out	0x3e, r29	; 62
    1ca6:	0f be       	out	0x3f, r0	; 63
    1ca8:	cd bf       	out	0x3d, r28	; 61
    1caa:	fe 01       	movw	r30, r28
    1cac:	e3 5b       	subi	r30, 0xB3	; 179
    1cae:	ff 4f       	sbci	r31, 0xFF	; 255
    1cb0:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT,LCD_RS,0);
    1cb2:	81 e0       	ldi	r24, 0x01	; 1
    1cb4:	60 e0       	ldi	r22, 0x00	; 0
    1cb6:	40 e0       	ldi	r20, 0x00	; 0
    1cb8:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_writePin>
    1cbc:	fe 01       	movw	r30, r28
    1cbe:	e7 5b       	subi	r30, 0xB7	; 183
    1cc0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc2:	80 e0       	ldi	r24, 0x00	; 0
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	a0 e8       	ldi	r26, 0x80	; 128
    1cc8:	bf e3       	ldi	r27, 0x3F	; 63
    1cca:	80 83       	st	Z, r24
    1ccc:	91 83       	std	Z+1, r25	; 0x01
    1cce:	a2 83       	std	Z+2, r26	; 0x02
    1cd0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd2:	8e 01       	movw	r16, r28
    1cd4:	0b 5b       	subi	r16, 0xBB	; 187
    1cd6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cd8:	fe 01       	movw	r30, r28
    1cda:	e7 5b       	subi	r30, 0xB7	; 183
    1cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cde:	60 81       	ld	r22, Z
    1ce0:	71 81       	ldd	r23, Z+1	; 0x01
    1ce2:	82 81       	ldd	r24, Z+2	; 0x02
    1ce4:	93 81       	ldd	r25, Z+3	; 0x03
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	30 e0       	ldi	r19, 0x00	; 0
    1cea:	4a ef       	ldi	r20, 0xFA	; 250
    1cec:	54 e4       	ldi	r21, 0x44	; 68
    1cee:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1cf2:	dc 01       	movw	r26, r24
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	f8 01       	movw	r30, r16
    1cf8:	80 83       	st	Z, r24
    1cfa:	91 83       	std	Z+1, r25	; 0x01
    1cfc:	a2 83       	std	Z+2, r26	; 0x02
    1cfe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d00:	fe 01       	movw	r30, r28
    1d02:	eb 5b       	subi	r30, 0xBB	; 187
    1d04:	ff 4f       	sbci	r31, 0xFF	; 255
    1d06:	60 81       	ld	r22, Z
    1d08:	71 81       	ldd	r23, Z+1	; 0x01
    1d0a:	82 81       	ldd	r24, Z+2	; 0x02
    1d0c:	93 81       	ldd	r25, Z+3	; 0x03
    1d0e:	20 e0       	ldi	r18, 0x00	; 0
    1d10:	30 e0       	ldi	r19, 0x00	; 0
    1d12:	40 e8       	ldi	r20, 0x80	; 128
    1d14:	5f e3       	ldi	r21, 0x3F	; 63
    1d16:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1d1a:	88 23       	and	r24, r24
    1d1c:	44 f4       	brge	.+16     	; 0x1d2e <LCD_sendCommand+0x9e>
		__ticks = 1;
    1d1e:	fe 01       	movw	r30, r28
    1d20:	ed 5b       	subi	r30, 0xBD	; 189
    1d22:	ff 4f       	sbci	r31, 0xFF	; 255
    1d24:	81 e0       	ldi	r24, 0x01	; 1
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	91 83       	std	Z+1, r25	; 0x01
    1d2a:	80 83       	st	Z, r24
    1d2c:	64 c0       	rjmp	.+200    	; 0x1df6 <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1d2e:	fe 01       	movw	r30, r28
    1d30:	eb 5b       	subi	r30, 0xBB	; 187
    1d32:	ff 4f       	sbci	r31, 0xFF	; 255
    1d34:	60 81       	ld	r22, Z
    1d36:	71 81       	ldd	r23, Z+1	; 0x01
    1d38:	82 81       	ldd	r24, Z+2	; 0x02
    1d3a:	93 81       	ldd	r25, Z+3	; 0x03
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	3f ef       	ldi	r19, 0xFF	; 255
    1d40:	4f e7       	ldi	r20, 0x7F	; 127
    1d42:	57 e4       	ldi	r21, 0x47	; 71
    1d44:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1d48:	18 16       	cp	r1, r24
    1d4a:	0c f0       	brlt	.+2      	; 0x1d4e <LCD_sendCommand+0xbe>
    1d4c:	43 c0       	rjmp	.+134    	; 0x1dd4 <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d4e:	fe 01       	movw	r30, r28
    1d50:	e7 5b       	subi	r30, 0xB7	; 183
    1d52:	ff 4f       	sbci	r31, 0xFF	; 255
    1d54:	60 81       	ld	r22, Z
    1d56:	71 81       	ldd	r23, Z+1	; 0x01
    1d58:	82 81       	ldd	r24, Z+2	; 0x02
    1d5a:	93 81       	ldd	r25, Z+3	; 0x03
    1d5c:	20 e0       	ldi	r18, 0x00	; 0
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	40 e2       	ldi	r20, 0x20	; 32
    1d62:	51 e4       	ldi	r21, 0x41	; 65
    1d64:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	8e 01       	movw	r16, r28
    1d6e:	0d 5b       	subi	r16, 0xBD	; 189
    1d70:	1f 4f       	sbci	r17, 0xFF	; 255
    1d72:	bc 01       	movw	r22, r24
    1d74:	cd 01       	movw	r24, r26
    1d76:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1d7a:	dc 01       	movw	r26, r24
    1d7c:	cb 01       	movw	r24, r22
    1d7e:	f8 01       	movw	r30, r16
    1d80:	91 83       	std	Z+1, r25	; 0x01
    1d82:	80 83       	st	Z, r24
    1d84:	1f c0       	rjmp	.+62     	; 0x1dc4 <LCD_sendCommand+0x134>
    1d86:	fe 01       	movw	r30, r28
    1d88:	ef 5b       	subi	r30, 0xBF	; 191
    1d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8c:	88 ec       	ldi	r24, 0xC8	; 200
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	91 83       	std	Z+1, r25	; 0x01
    1d92:	80 83       	st	Z, r24
    1d94:	fe 01       	movw	r30, r28
    1d96:	ef 5b       	subi	r30, 0xBF	; 191
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	80 81       	ld	r24, Z
    1d9c:	91 81       	ldd	r25, Z+1	; 0x01
    1d9e:	01 97       	sbiw	r24, 0x01	; 1
    1da0:	f1 f7       	brne	.-4      	; 0x1d9e <LCD_sendCommand+0x10e>
    1da2:	fe 01       	movw	r30, r28
    1da4:	ef 5b       	subi	r30, 0xBF	; 191
    1da6:	ff 4f       	sbci	r31, 0xFF	; 255
    1da8:	91 83       	std	Z+1, r25	; 0x01
    1daa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dac:	de 01       	movw	r26, r28
    1dae:	ad 5b       	subi	r26, 0xBD	; 189
    1db0:	bf 4f       	sbci	r27, 0xFF	; 255
    1db2:	fe 01       	movw	r30, r28
    1db4:	ed 5b       	subi	r30, 0xBD	; 189
    1db6:	ff 4f       	sbci	r31, 0xFF	; 255
    1db8:	80 81       	ld	r24, Z
    1dba:	91 81       	ldd	r25, Z+1	; 0x01
    1dbc:	01 97       	sbiw	r24, 0x01	; 1
    1dbe:	11 96       	adiw	r26, 0x01	; 1
    1dc0:	9c 93       	st	X, r25
    1dc2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dc4:	fe 01       	movw	r30, r28
    1dc6:	ed 5b       	subi	r30, 0xBD	; 189
    1dc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dca:	80 81       	ld	r24, Z
    1dcc:	91 81       	ldd	r25, Z+1	; 0x01
    1dce:	00 97       	sbiw	r24, 0x00	; 0
    1dd0:	d1 f6       	brne	.-76     	; 0x1d86 <LCD_sendCommand+0xf6>
    1dd2:	24 c0       	rjmp	.+72     	; 0x1e1c <LCD_sendCommand+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dd4:	8e 01       	movw	r16, r28
    1dd6:	0d 5b       	subi	r16, 0xBD	; 189
    1dd8:	1f 4f       	sbci	r17, 0xFF	; 255
    1dda:	fe 01       	movw	r30, r28
    1ddc:	eb 5b       	subi	r30, 0xBB	; 187
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	60 81       	ld	r22, Z
    1de2:	71 81       	ldd	r23, Z+1	; 0x01
    1de4:	82 81       	ldd	r24, Z+2	; 0x02
    1de6:	93 81       	ldd	r25, Z+3	; 0x03
    1de8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	f8 01       	movw	r30, r16
    1df2:	91 83       	std	Z+1, r25	; 0x01
    1df4:	80 83       	st	Z, r24
    1df6:	fe 01       	movw	r30, r28
    1df8:	ed 5b       	subi	r30, 0xBD	; 189
    1dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfc:	80 81       	ld	r24, Z
    1dfe:	91 81       	ldd	r25, Z+1	; 0x01
    1e00:	fe 01       	movw	r30, r28
    1e02:	ff 96       	adiw	r30, 0x3f	; 63
    1e04:	91 83       	std	Z+1, r25	; 0x01
    1e06:	80 83       	st	Z, r24
    1e08:	fe 01       	movw	r30, r28
    1e0a:	ff 96       	adiw	r30, 0x3f	; 63
    1e0c:	80 81       	ld	r24, Z
    1e0e:	91 81       	ldd	r25, Z+1	; 0x01
    1e10:	01 97       	sbiw	r24, 0x01	; 1
    1e12:	f1 f7       	brne	.-4      	; 0x1e10 <LCD_sendCommand+0x180>
    1e14:	fe 01       	movw	r30, r28
    1e16:	ff 96       	adiw	r30, 0x3f	; 63
    1e18:	91 83       	std	Z+1, r25	; 0x01
    1e1a:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT,LCD_ENABLE,1);
    1e1c:	81 e0       	ldi	r24, 0x01	; 1
    1e1e:	61 e0       	ldi	r22, 0x01	; 1
    1e20:	41 e0       	ldi	r20, 0x01	; 1
    1e22:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_writePin>
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	a0 e8       	ldi	r26, 0x80	; 128
    1e2c:	bf e3       	ldi	r27, 0x3F	; 63
    1e2e:	8b af       	std	Y+59, r24	; 0x3b
    1e30:	9c af       	std	Y+60, r25	; 0x3c
    1e32:	ad af       	std	Y+61, r26	; 0x3d
    1e34:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e36:	6b ad       	ldd	r22, Y+59	; 0x3b
    1e38:	7c ad       	ldd	r23, Y+60	; 0x3c
    1e3a:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e3c:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	4a ef       	ldi	r20, 0xFA	; 250
    1e44:	54 e4       	ldi	r21, 0x44	; 68
    1e46:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	8f ab       	std	Y+55, r24	; 0x37
    1e50:	98 af       	std	Y+56, r25	; 0x38
    1e52:	a9 af       	std	Y+57, r26	; 0x39
    1e54:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1e56:	6f a9       	ldd	r22, Y+55	; 0x37
    1e58:	78 ad       	ldd	r23, Y+56	; 0x38
    1e5a:	89 ad       	ldd	r24, Y+57	; 0x39
    1e5c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	40 e8       	ldi	r20, 0x80	; 128
    1e64:	5f e3       	ldi	r21, 0x3F	; 63
    1e66:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1e6a:	88 23       	and	r24, r24
    1e6c:	2c f4       	brge	.+10     	; 0x1e78 <LCD_sendCommand+0x1e8>
		__ticks = 1;
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	9e ab       	std	Y+54, r25	; 0x36
    1e74:	8d ab       	std	Y+53, r24	; 0x35
    1e76:	3f c0       	rjmp	.+126    	; 0x1ef6 <LCD_sendCommand+0x266>
	else if (__tmp > 65535)
    1e78:	6f a9       	ldd	r22, Y+55	; 0x37
    1e7a:	78 ad       	ldd	r23, Y+56	; 0x38
    1e7c:	89 ad       	ldd	r24, Y+57	; 0x39
    1e7e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	3f ef       	ldi	r19, 0xFF	; 255
    1e84:	4f e7       	ldi	r20, 0x7F	; 127
    1e86:	57 e4       	ldi	r21, 0x47	; 71
    1e88:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1e8c:	18 16       	cp	r1, r24
    1e8e:	4c f5       	brge	.+82     	; 0x1ee2 <LCD_sendCommand+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e90:	6b ad       	ldd	r22, Y+59	; 0x3b
    1e92:	7c ad       	ldd	r23, Y+60	; 0x3c
    1e94:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e96:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e2       	ldi	r20, 0x20	; 32
    1e9e:	51 e4       	ldi	r21, 0x41	; 65
    1ea0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	bc 01       	movw	r22, r24
    1eaa:	cd 01       	movw	r24, r26
    1eac:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	9e ab       	std	Y+54, r25	; 0x36
    1eb6:	8d ab       	std	Y+53, r24	; 0x35
    1eb8:	0f c0       	rjmp	.+30     	; 0x1ed8 <LCD_sendCommand+0x248>
    1eba:	88 ec       	ldi	r24, 0xC8	; 200
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	9c ab       	std	Y+52, r25	; 0x34
    1ec0:	8b ab       	std	Y+51, r24	; 0x33
    1ec2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ec4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ec6:	01 97       	sbiw	r24, 0x01	; 1
    1ec8:	f1 f7       	brne	.-4      	; 0x1ec6 <LCD_sendCommand+0x236>
    1eca:	9c ab       	std	Y+52, r25	; 0x34
    1ecc:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ece:	8d a9       	ldd	r24, Y+53	; 0x35
    1ed0:	9e a9       	ldd	r25, Y+54	; 0x36
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	9e ab       	std	Y+54, r25	; 0x36
    1ed6:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed8:	8d a9       	ldd	r24, Y+53	; 0x35
    1eda:	9e a9       	ldd	r25, Y+54	; 0x36
    1edc:	00 97       	sbiw	r24, 0x00	; 0
    1ede:	69 f7       	brne	.-38     	; 0x1eba <LCD_sendCommand+0x22a>
    1ee0:	14 c0       	rjmp	.+40     	; 0x1f0a <LCD_sendCommand+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee2:	6f a9       	ldd	r22, Y+55	; 0x37
    1ee4:	78 ad       	ldd	r23, Y+56	; 0x38
    1ee6:	89 ad       	ldd	r24, Y+57	; 0x39
    1ee8:	9a ad       	ldd	r25, Y+58	; 0x3a
    1eea:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	9e ab       	std	Y+54, r25	; 0x36
    1ef4:	8d ab       	std	Y+53, r24	; 0x35
    1ef6:	8d a9       	ldd	r24, Y+53	; 0x35
    1ef8:	9e a9       	ldd	r25, Y+54	; 0x36
    1efa:	9a ab       	std	Y+50, r25	; 0x32
    1efc:	89 ab       	std	Y+49, r24	; 0x31
    1efe:	89 a9       	ldd	r24, Y+49	; 0x31
    1f00:	9a a9       	ldd	r25, Y+50	; 0x32
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <LCD_sendCommand+0x272>
    1f06:	9a ab       	std	Y+50, r25	; 0x32
    1f08:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(1);
#if(LCD_BIT_MODE==8)

	GPIO_writePort(LCD_DATA_PORT,command);
    1f0a:	fe 01       	movw	r30, r28
    1f0c:	e3 5b       	subi	r30, 0xB3	; 179
    1f0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f10:	80 e0       	ldi	r24, 0x00	; 0
    1f12:	60 81       	ld	r22, Z
    1f14:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <GPIO_writePort>
    1f18:	80 e0       	ldi	r24, 0x00	; 0
    1f1a:	90 e0       	ldi	r25, 0x00	; 0
    1f1c:	a0 e8       	ldi	r26, 0x80	; 128
    1f1e:	bf e3       	ldi	r27, 0x3F	; 63
    1f20:	8d a7       	std	Y+45, r24	; 0x2d
    1f22:	9e a7       	std	Y+46, r25	; 0x2e
    1f24:	af a7       	std	Y+47, r26	; 0x2f
    1f26:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1f28:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f2a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f2c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f2e:	98 a9       	ldd	r25, Y+48	; 0x30
    1f30:	2b ea       	ldi	r18, 0xAB	; 171
    1f32:	3a ea       	ldi	r19, 0xAA	; 170
    1f34:	4a e2       	ldi	r20, 0x2A	; 42
    1f36:	50 e4       	ldi	r21, 0x40	; 64
    1f38:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	cb 01       	movw	r24, r22
    1f40:	89 a7       	std	Y+41, r24	; 0x29
    1f42:	9a a7       	std	Y+42, r25	; 0x2a
    1f44:	ab a7       	std	Y+43, r26	; 0x2b
    1f46:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1f48:	69 a5       	ldd	r22, Y+41	; 0x29
    1f4a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f4c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f4e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f50:	20 e0       	ldi	r18, 0x00	; 0
    1f52:	30 e0       	ldi	r19, 0x00	; 0
    1f54:	40 e8       	ldi	r20, 0x80	; 128
    1f56:	5f e3       	ldi	r21, 0x3F	; 63
    1f58:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1f5c:	88 23       	and	r24, r24
    1f5e:	1c f4       	brge	.+6      	; 0x1f66 <LCD_sendCommand+0x2d6>
		__ticks = 1;
    1f60:	81 e0       	ldi	r24, 0x01	; 1
    1f62:	88 a7       	std	Y+40, r24	; 0x28
    1f64:	91 c0       	rjmp	.+290    	; 0x2088 <LCD_sendCommand+0x3f8>
	else if (__tmp > 255)
    1f66:	69 a5       	ldd	r22, Y+41	; 0x29
    1f68:	7a a5       	ldd	r23, Y+42	; 0x2a
    1f6a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1f6c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	4f e7       	ldi	r20, 0x7F	; 127
    1f74:	53 e4       	ldi	r21, 0x43	; 67
    1f76:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1f7a:	18 16       	cp	r1, r24
    1f7c:	0c f0       	brlt	.+2      	; 0x1f80 <LCD_sendCommand+0x2f0>
    1f7e:	7b c0       	rjmp	.+246    	; 0x2076 <LCD_sendCommand+0x3e6>
	{
		_delay_ms(__us / 1000.0);
    1f80:	6d a5       	ldd	r22, Y+45	; 0x2d
    1f82:	7e a5       	ldd	r23, Y+46	; 0x2e
    1f84:	8f a5       	ldd	r24, Y+47	; 0x2f
    1f86:	98 a9       	ldd	r25, Y+48	; 0x30
    1f88:	20 e0       	ldi	r18, 0x00	; 0
    1f8a:	30 e0       	ldi	r19, 0x00	; 0
    1f8c:	4a e7       	ldi	r20, 0x7A	; 122
    1f8e:	54 e4       	ldi	r21, 0x44	; 68
    1f90:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	8c a3       	std	Y+36, r24	; 0x24
    1f9a:	9d a3       	std	Y+37, r25	; 0x25
    1f9c:	ae a3       	std	Y+38, r26	; 0x26
    1f9e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa0:	6c a1       	ldd	r22, Y+36	; 0x24
    1fa2:	7d a1       	ldd	r23, Y+37	; 0x25
    1fa4:	8e a1       	ldd	r24, Y+38	; 0x26
    1fa6:	9f a1       	ldd	r25, Y+39	; 0x27
    1fa8:	20 e0       	ldi	r18, 0x00	; 0
    1faa:	30 e0       	ldi	r19, 0x00	; 0
    1fac:	4a ef       	ldi	r20, 0xFA	; 250
    1fae:	54 e4       	ldi	r21, 0x44	; 68
    1fb0:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    1fb4:	dc 01       	movw	r26, r24
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	88 a3       	std	Y+32, r24	; 0x20
    1fba:	99 a3       	std	Y+33, r25	; 0x21
    1fbc:	aa a3       	std	Y+34, r26	; 0x22
    1fbe:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1fc0:	68 a1       	ldd	r22, Y+32	; 0x20
    1fc2:	79 a1       	ldd	r23, Y+33	; 0x21
    1fc4:	8a a1       	ldd	r24, Y+34	; 0x22
    1fc6:	9b a1       	ldd	r25, Y+35	; 0x23
    1fc8:	20 e0       	ldi	r18, 0x00	; 0
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	40 e8       	ldi	r20, 0x80	; 128
    1fce:	5f e3       	ldi	r21, 0x3F	; 63
    1fd0:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    1fd4:	88 23       	and	r24, r24
    1fd6:	2c f4       	brge	.+10     	; 0x1fe2 <LCD_sendCommand+0x352>
		__ticks = 1;
    1fd8:	81 e0       	ldi	r24, 0x01	; 1
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	9f 8f       	std	Y+31, r25	; 0x1f
    1fde:	8e 8f       	std	Y+30, r24	; 0x1e
    1fe0:	3f c0       	rjmp	.+126    	; 0x2060 <LCD_sendCommand+0x3d0>
	else if (__tmp > 65535)
    1fe2:	68 a1       	ldd	r22, Y+32	; 0x20
    1fe4:	79 a1       	ldd	r23, Y+33	; 0x21
    1fe6:	8a a1       	ldd	r24, Y+34	; 0x22
    1fe8:	9b a1       	ldd	r25, Y+35	; 0x23
    1fea:	20 e0       	ldi	r18, 0x00	; 0
    1fec:	3f ef       	ldi	r19, 0xFF	; 255
    1fee:	4f e7       	ldi	r20, 0x7F	; 127
    1ff0:	57 e4       	ldi	r21, 0x47	; 71
    1ff2:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    1ff6:	18 16       	cp	r1, r24
    1ff8:	4c f5       	brge	.+82     	; 0x204c <LCD_sendCommand+0x3bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ffa:	6c a1       	ldd	r22, Y+36	; 0x24
    1ffc:	7d a1       	ldd	r23, Y+37	; 0x25
    1ffe:	8e a1       	ldd	r24, Y+38	; 0x26
    2000:	9f a1       	ldd	r25, Y+39	; 0x27
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	40 e2       	ldi	r20, 0x20	; 32
    2008:	51 e4       	ldi	r21, 0x41	; 65
    200a:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	bc 01       	movw	r22, r24
    2014:	cd 01       	movw	r24, r26
    2016:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    201a:	dc 01       	movw	r26, r24
    201c:	cb 01       	movw	r24, r22
    201e:	9f 8f       	std	Y+31, r25	; 0x1f
    2020:	8e 8f       	std	Y+30, r24	; 0x1e
    2022:	0f c0       	rjmp	.+30     	; 0x2042 <LCD_sendCommand+0x3b2>
    2024:	88 ec       	ldi	r24, 0xC8	; 200
    2026:	90 e0       	ldi	r25, 0x00	; 0
    2028:	9d 8f       	std	Y+29, r25	; 0x1d
    202a:	8c 8f       	std	Y+28, r24	; 0x1c
    202c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    202e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2030:	01 97       	sbiw	r24, 0x01	; 1
    2032:	f1 f7       	brne	.-4      	; 0x2030 <LCD_sendCommand+0x3a0>
    2034:	9d 8f       	std	Y+29, r25	; 0x1d
    2036:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2038:	8e 8d       	ldd	r24, Y+30	; 0x1e
    203a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    203c:	01 97       	sbiw	r24, 0x01	; 1
    203e:	9f 8f       	std	Y+31, r25	; 0x1f
    2040:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2042:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2044:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2046:	00 97       	sbiw	r24, 0x00	; 0
    2048:	69 f7       	brne	.-38     	; 0x2024 <LCD_sendCommand+0x394>
    204a:	24 c0       	rjmp	.+72     	; 0x2094 <LCD_sendCommand+0x404>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    204c:	68 a1       	ldd	r22, Y+32	; 0x20
    204e:	79 a1       	ldd	r23, Y+33	; 0x21
    2050:	8a a1       	ldd	r24, Y+34	; 0x22
    2052:	9b a1       	ldd	r25, Y+35	; 0x23
    2054:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2058:	dc 01       	movw	r26, r24
    205a:	cb 01       	movw	r24, r22
    205c:	9f 8f       	std	Y+31, r25	; 0x1f
    205e:	8e 8f       	std	Y+30, r24	; 0x1e
    2060:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2062:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2064:	9b 8f       	std	Y+27, r25	; 0x1b
    2066:	8a 8f       	std	Y+26, r24	; 0x1a
    2068:	8a 8d       	ldd	r24, Y+26	; 0x1a
    206a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	f1 f7       	brne	.-4      	; 0x206c <LCD_sendCommand+0x3dc>
    2070:	9b 8f       	std	Y+27, r25	; 0x1b
    2072:	8a 8f       	std	Y+26, r24	; 0x1a
    2074:	0f c0       	rjmp	.+30     	; 0x2094 <LCD_sendCommand+0x404>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2076:	69 a5       	ldd	r22, Y+41	; 0x29
    2078:	7a a5       	ldd	r23, Y+42	; 0x2a
    207a:	8b a5       	ldd	r24, Y+43	; 0x2b
    207c:	9c a5       	ldd	r25, Y+44	; 0x2c
    207e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2082:	dc 01       	movw	r26, r24
    2084:	cb 01       	movw	r24, r22
    2086:	88 a7       	std	Y+40, r24	; 0x28
    2088:	88 a5       	ldd	r24, Y+40	; 0x28
    208a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    208c:	89 8d       	ldd	r24, Y+25	; 0x19
    208e:	8a 95       	dec	r24
    2090:	f1 f7       	brne	.-4      	; 0x208e <LCD_sendCommand+0x3fe>
    2092:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	GPIO_writePin(LCD_RS_PORT,LCD_ENABLE,0);
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	61 e0       	ldi	r22, 0x01	; 1
    2098:	40 e0       	ldi	r20, 0x00	; 0
    209a:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_writePin>
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	a0 e8       	ldi	r26, 0x80	; 128
    20a4:	bf e3       	ldi	r27, 0x3F	; 63
    20a6:	8d 8b       	std	Y+21, r24	; 0x15
    20a8:	9e 8b       	std	Y+22, r25	; 0x16
    20aa:	af 8b       	std	Y+23, r26	; 0x17
    20ac:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    20ae:	6d 89       	ldd	r22, Y+21	; 0x15
    20b0:	7e 89       	ldd	r23, Y+22	; 0x16
    20b2:	8f 89       	ldd	r24, Y+23	; 0x17
    20b4:	98 8d       	ldd	r25, Y+24	; 0x18
    20b6:	2b ea       	ldi	r18, 0xAB	; 171
    20b8:	3a ea       	ldi	r19, 0xAA	; 170
    20ba:	4a e2       	ldi	r20, 0x2A	; 42
    20bc:	50 e4       	ldi	r21, 0x40	; 64
    20be:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    20c2:	dc 01       	movw	r26, r24
    20c4:	cb 01       	movw	r24, r22
    20c6:	89 8b       	std	Y+17, r24	; 0x11
    20c8:	9a 8b       	std	Y+18, r25	; 0x12
    20ca:	ab 8b       	std	Y+19, r26	; 0x13
    20cc:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    20ce:	69 89       	ldd	r22, Y+17	; 0x11
    20d0:	7a 89       	ldd	r23, Y+18	; 0x12
    20d2:	8b 89       	ldd	r24, Y+19	; 0x13
    20d4:	9c 89       	ldd	r25, Y+20	; 0x14
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	40 e8       	ldi	r20, 0x80	; 128
    20dc:	5f e3       	ldi	r21, 0x3F	; 63
    20de:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    20e2:	88 23       	and	r24, r24
    20e4:	1c f4       	brge	.+6      	; 0x20ec <LCD_sendCommand+0x45c>
		__ticks = 1;
    20e6:	81 e0       	ldi	r24, 0x01	; 1
    20e8:	88 8b       	std	Y+16, r24	; 0x10
    20ea:	91 c0       	rjmp	.+290    	; 0x220e <LCD_sendCommand+0x57e>
	else if (__tmp > 255)
    20ec:	69 89       	ldd	r22, Y+17	; 0x11
    20ee:	7a 89       	ldd	r23, Y+18	; 0x12
    20f0:	8b 89       	ldd	r24, Y+19	; 0x13
    20f2:	9c 89       	ldd	r25, Y+20	; 0x14
    20f4:	20 e0       	ldi	r18, 0x00	; 0
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	4f e7       	ldi	r20, 0x7F	; 127
    20fa:	53 e4       	ldi	r21, 0x43	; 67
    20fc:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2100:	18 16       	cp	r1, r24
    2102:	0c f0       	brlt	.+2      	; 0x2106 <LCD_sendCommand+0x476>
    2104:	7b c0       	rjmp	.+246    	; 0x21fc <LCD_sendCommand+0x56c>
	{
		_delay_ms(__us / 1000.0);
    2106:	6d 89       	ldd	r22, Y+21	; 0x15
    2108:	7e 89       	ldd	r23, Y+22	; 0x16
    210a:	8f 89       	ldd	r24, Y+23	; 0x17
    210c:	98 8d       	ldd	r25, Y+24	; 0x18
    210e:	20 e0       	ldi	r18, 0x00	; 0
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	4a e7       	ldi	r20, 0x7A	; 122
    2114:	54 e4       	ldi	r21, 0x44	; 68
    2116:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	8c 87       	std	Y+12, r24	; 0x0c
    2120:	9d 87       	std	Y+13, r25	; 0x0d
    2122:	ae 87       	std	Y+14, r26	; 0x0e
    2124:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2126:	6c 85       	ldd	r22, Y+12	; 0x0c
    2128:	7d 85       	ldd	r23, Y+13	; 0x0d
    212a:	8e 85       	ldd	r24, Y+14	; 0x0e
    212c:	9f 85       	ldd	r25, Y+15	; 0x0f
    212e:	20 e0       	ldi	r18, 0x00	; 0
    2130:	30 e0       	ldi	r19, 0x00	; 0
    2132:	4a ef       	ldi	r20, 0xFA	; 250
    2134:	54 e4       	ldi	r21, 0x44	; 68
    2136:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    213a:	dc 01       	movw	r26, r24
    213c:	cb 01       	movw	r24, r22
    213e:	88 87       	std	Y+8, r24	; 0x08
    2140:	99 87       	std	Y+9, r25	; 0x09
    2142:	aa 87       	std	Y+10, r26	; 0x0a
    2144:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2146:	68 85       	ldd	r22, Y+8	; 0x08
    2148:	79 85       	ldd	r23, Y+9	; 0x09
    214a:	8a 85       	ldd	r24, Y+10	; 0x0a
    214c:	9b 85       	ldd	r25, Y+11	; 0x0b
    214e:	20 e0       	ldi	r18, 0x00	; 0
    2150:	30 e0       	ldi	r19, 0x00	; 0
    2152:	40 e8       	ldi	r20, 0x80	; 128
    2154:	5f e3       	ldi	r21, 0x3F	; 63
    2156:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    215a:	88 23       	and	r24, r24
    215c:	2c f4       	brge	.+10     	; 0x2168 <LCD_sendCommand+0x4d8>
		__ticks = 1;
    215e:	81 e0       	ldi	r24, 0x01	; 1
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	9f 83       	std	Y+7, r25	; 0x07
    2164:	8e 83       	std	Y+6, r24	; 0x06
    2166:	3f c0       	rjmp	.+126    	; 0x21e6 <LCD_sendCommand+0x556>
	else if (__tmp > 65535)
    2168:	68 85       	ldd	r22, Y+8	; 0x08
    216a:	79 85       	ldd	r23, Y+9	; 0x09
    216c:	8a 85       	ldd	r24, Y+10	; 0x0a
    216e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2170:	20 e0       	ldi	r18, 0x00	; 0
    2172:	3f ef       	ldi	r19, 0xFF	; 255
    2174:	4f e7       	ldi	r20, 0x7F	; 127
    2176:	57 e4       	ldi	r21, 0x47	; 71
    2178:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    217c:	18 16       	cp	r1, r24
    217e:	4c f5       	brge	.+82     	; 0x21d2 <LCD_sendCommand+0x542>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2180:	6c 85       	ldd	r22, Y+12	; 0x0c
    2182:	7d 85       	ldd	r23, Y+13	; 0x0d
    2184:	8e 85       	ldd	r24, Y+14	; 0x0e
    2186:	9f 85       	ldd	r25, Y+15	; 0x0f
    2188:	20 e0       	ldi	r18, 0x00	; 0
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e2       	ldi	r20, 0x20	; 32
    218e:	51 e4       	ldi	r21, 0x41	; 65
    2190:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2194:	dc 01       	movw	r26, r24
    2196:	cb 01       	movw	r24, r22
    2198:	bc 01       	movw	r22, r24
    219a:	cd 01       	movw	r24, r26
    219c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	9f 83       	std	Y+7, r25	; 0x07
    21a6:	8e 83       	std	Y+6, r24	; 0x06
    21a8:	0f c0       	rjmp	.+30     	; 0x21c8 <LCD_sendCommand+0x538>
    21aa:	88 ec       	ldi	r24, 0xC8	; 200
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	9d 83       	std	Y+5, r25	; 0x05
    21b0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21b2:	8c 81       	ldd	r24, Y+4	; 0x04
    21b4:	9d 81       	ldd	r25, Y+5	; 0x05
    21b6:	01 97       	sbiw	r24, 0x01	; 1
    21b8:	f1 f7       	brne	.-4      	; 0x21b6 <LCD_sendCommand+0x526>
    21ba:	9d 83       	std	Y+5, r25	; 0x05
    21bc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21be:	8e 81       	ldd	r24, Y+6	; 0x06
    21c0:	9f 81       	ldd	r25, Y+7	; 0x07
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	9f 83       	std	Y+7, r25	; 0x07
    21c6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21c8:	8e 81       	ldd	r24, Y+6	; 0x06
    21ca:	9f 81       	ldd	r25, Y+7	; 0x07
    21cc:	00 97       	sbiw	r24, 0x00	; 0
    21ce:	69 f7       	brne	.-38     	; 0x21aa <LCD_sendCommand+0x51a>
    21d0:	24 c0       	rjmp	.+72     	; 0x221a <LCD_sendCommand+0x58a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d2:	68 85       	ldd	r22, Y+8	; 0x08
    21d4:	79 85       	ldd	r23, Y+9	; 0x09
    21d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    21d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    21da:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    21de:	dc 01       	movw	r26, r24
    21e0:	cb 01       	movw	r24, r22
    21e2:	9f 83       	std	Y+7, r25	; 0x07
    21e4:	8e 83       	std	Y+6, r24	; 0x06
    21e6:	8e 81       	ldd	r24, Y+6	; 0x06
    21e8:	9f 81       	ldd	r25, Y+7	; 0x07
    21ea:	9b 83       	std	Y+3, r25	; 0x03
    21ec:	8a 83       	std	Y+2, r24	; 0x02
    21ee:	8a 81       	ldd	r24, Y+2	; 0x02
    21f0:	9b 81       	ldd	r25, Y+3	; 0x03
    21f2:	01 97       	sbiw	r24, 0x01	; 1
    21f4:	f1 f7       	brne	.-4      	; 0x21f2 <LCD_sendCommand+0x562>
    21f6:	9b 83       	std	Y+3, r25	; 0x03
    21f8:	8a 83       	std	Y+2, r24	; 0x02
    21fa:	0f c0       	rjmp	.+30     	; 0x221a <LCD_sendCommand+0x58a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    21fc:	69 89       	ldd	r22, Y+17	; 0x11
    21fe:	7a 89       	ldd	r23, Y+18	; 0x12
    2200:	8b 89       	ldd	r24, Y+19	; 0x13
    2202:	9c 89       	ldd	r25, Y+20	; 0x14
    2204:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	88 8b       	std	Y+16, r24	; 0x10
    220e:	88 89       	ldd	r24, Y+16	; 0x10
    2210:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	8a 95       	dec	r24
    2216:	f1 f7       	brne	.-4      	; 0x2214 <LCD_sendCommand+0x584>
    2218:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7,GET_BIT(command,3));
	_delay_ms(1);
	GPIO_writePin(LCD_RS_PORT,LCD_ENABLE,0);
	_delay_ms(1);
#endif
}
    221a:	c3 5b       	subi	r28, 0xB3	; 179
    221c:	df 4f       	sbci	r29, 0xFF	; 255
    221e:	0f b6       	in	r0, 0x3f	; 63
    2220:	f8 94       	cli
    2222:	de bf       	out	0x3e, r29	; 62
    2224:	0f be       	out	0x3f, r0	; 63
    2226:	cd bf       	out	0x3d, r28	; 61
    2228:	cf 91       	pop	r28
    222a:	df 91       	pop	r29
    222c:	1f 91       	pop	r17
    222e:	0f 91       	pop	r16
    2230:	08 95       	ret

00002232 <LCD_displayChar>:
/*
 * To Write Character on lcd
 */
void LCD_displayChar(uint8 character){
    2232:	0f 93       	push	r16
    2234:	1f 93       	push	r17
    2236:	df 93       	push	r29
    2238:	cf 93       	push	r28
    223a:	cd b7       	in	r28, 0x3d	; 61
    223c:	de b7       	in	r29, 0x3e	; 62
    223e:	cd 54       	subi	r28, 0x4D	; 77
    2240:	d0 40       	sbci	r29, 0x00	; 0
    2242:	0f b6       	in	r0, 0x3f	; 63
    2244:	f8 94       	cli
    2246:	de bf       	out	0x3e, r29	; 62
    2248:	0f be       	out	0x3f, r0	; 63
    224a:	cd bf       	out	0x3d, r28	; 61
    224c:	fe 01       	movw	r30, r28
    224e:	e3 5b       	subi	r30, 0xB3	; 179
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	80 83       	st	Z, r24
	GPIO_writePin(LCD_EN_PORT,LCD_RS,1);
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	60 e0       	ldi	r22, 0x00	; 0
    2258:	41 e0       	ldi	r20, 0x01	; 1
    225a:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_writePin>
    225e:	fe 01       	movw	r30, r28
    2260:	e7 5b       	subi	r30, 0xB7	; 183
    2262:	ff 4f       	sbci	r31, 0xFF	; 255
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	a0 e8       	ldi	r26, 0x80	; 128
    226a:	bf e3       	ldi	r27, 0x3F	; 63
    226c:	80 83       	st	Z, r24
    226e:	91 83       	std	Z+1, r25	; 0x01
    2270:	a2 83       	std	Z+2, r26	; 0x02
    2272:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2274:	8e 01       	movw	r16, r28
    2276:	0b 5b       	subi	r16, 0xBB	; 187
    2278:	1f 4f       	sbci	r17, 0xFF	; 255
    227a:	fe 01       	movw	r30, r28
    227c:	e7 5b       	subi	r30, 0xB7	; 183
    227e:	ff 4f       	sbci	r31, 0xFF	; 255
    2280:	60 81       	ld	r22, Z
    2282:	71 81       	ldd	r23, Z+1	; 0x01
    2284:	82 81       	ldd	r24, Z+2	; 0x02
    2286:	93 81       	ldd	r25, Z+3	; 0x03
    2288:	20 e0       	ldi	r18, 0x00	; 0
    228a:	30 e0       	ldi	r19, 0x00	; 0
    228c:	4a ef       	ldi	r20, 0xFA	; 250
    228e:	54 e4       	ldi	r21, 0x44	; 68
    2290:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2294:	dc 01       	movw	r26, r24
    2296:	cb 01       	movw	r24, r22
    2298:	f8 01       	movw	r30, r16
    229a:	80 83       	st	Z, r24
    229c:	91 83       	std	Z+1, r25	; 0x01
    229e:	a2 83       	std	Z+2, r26	; 0x02
    22a0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    22a2:	fe 01       	movw	r30, r28
    22a4:	eb 5b       	subi	r30, 0xBB	; 187
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	60 81       	ld	r22, Z
    22aa:	71 81       	ldd	r23, Z+1	; 0x01
    22ac:	82 81       	ldd	r24, Z+2	; 0x02
    22ae:	93 81       	ldd	r25, Z+3	; 0x03
    22b0:	20 e0       	ldi	r18, 0x00	; 0
    22b2:	30 e0       	ldi	r19, 0x00	; 0
    22b4:	40 e8       	ldi	r20, 0x80	; 128
    22b6:	5f e3       	ldi	r21, 0x3F	; 63
    22b8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    22bc:	88 23       	and	r24, r24
    22be:	44 f4       	brge	.+16     	; 0x22d0 <LCD_displayChar+0x9e>
		__ticks = 1;
    22c0:	fe 01       	movw	r30, r28
    22c2:	ed 5b       	subi	r30, 0xBD	; 189
    22c4:	ff 4f       	sbci	r31, 0xFF	; 255
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	90 e0       	ldi	r25, 0x00	; 0
    22ca:	91 83       	std	Z+1, r25	; 0x01
    22cc:	80 83       	st	Z, r24
    22ce:	64 c0       	rjmp	.+200    	; 0x2398 <LCD_displayChar+0x166>
	else if (__tmp > 65535)
    22d0:	fe 01       	movw	r30, r28
    22d2:	eb 5b       	subi	r30, 0xBB	; 187
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	60 81       	ld	r22, Z
    22d8:	71 81       	ldd	r23, Z+1	; 0x01
    22da:	82 81       	ldd	r24, Z+2	; 0x02
    22dc:	93 81       	ldd	r25, Z+3	; 0x03
    22de:	20 e0       	ldi	r18, 0x00	; 0
    22e0:	3f ef       	ldi	r19, 0xFF	; 255
    22e2:	4f e7       	ldi	r20, 0x7F	; 127
    22e4:	57 e4       	ldi	r21, 0x47	; 71
    22e6:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    22ea:	18 16       	cp	r1, r24
    22ec:	0c f0       	brlt	.+2      	; 0x22f0 <LCD_displayChar+0xbe>
    22ee:	43 c0       	rjmp	.+134    	; 0x2376 <LCD_displayChar+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f0:	fe 01       	movw	r30, r28
    22f2:	e7 5b       	subi	r30, 0xB7	; 183
    22f4:	ff 4f       	sbci	r31, 0xFF	; 255
    22f6:	60 81       	ld	r22, Z
    22f8:	71 81       	ldd	r23, Z+1	; 0x01
    22fa:	82 81       	ldd	r24, Z+2	; 0x02
    22fc:	93 81       	ldd	r25, Z+3	; 0x03
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	40 e2       	ldi	r20, 0x20	; 32
    2304:	51 e4       	ldi	r21, 0x41	; 65
    2306:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	8e 01       	movw	r16, r28
    2310:	0d 5b       	subi	r16, 0xBD	; 189
    2312:	1f 4f       	sbci	r17, 0xFF	; 255
    2314:	bc 01       	movw	r22, r24
    2316:	cd 01       	movw	r24, r26
    2318:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    231c:	dc 01       	movw	r26, r24
    231e:	cb 01       	movw	r24, r22
    2320:	f8 01       	movw	r30, r16
    2322:	91 83       	std	Z+1, r25	; 0x01
    2324:	80 83       	st	Z, r24
    2326:	1f c0       	rjmp	.+62     	; 0x2366 <LCD_displayChar+0x134>
    2328:	fe 01       	movw	r30, r28
    232a:	ef 5b       	subi	r30, 0xBF	; 191
    232c:	ff 4f       	sbci	r31, 0xFF	; 255
    232e:	88 ec       	ldi	r24, 0xC8	; 200
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	91 83       	std	Z+1, r25	; 0x01
    2334:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2336:	fe 01       	movw	r30, r28
    2338:	ef 5b       	subi	r30, 0xBF	; 191
    233a:	ff 4f       	sbci	r31, 0xFF	; 255
    233c:	80 81       	ld	r24, Z
    233e:	91 81       	ldd	r25, Z+1	; 0x01
    2340:	01 97       	sbiw	r24, 0x01	; 1
    2342:	f1 f7       	brne	.-4      	; 0x2340 <LCD_displayChar+0x10e>
    2344:	fe 01       	movw	r30, r28
    2346:	ef 5b       	subi	r30, 0xBF	; 191
    2348:	ff 4f       	sbci	r31, 0xFF	; 255
    234a:	91 83       	std	Z+1, r25	; 0x01
    234c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234e:	de 01       	movw	r26, r28
    2350:	ad 5b       	subi	r26, 0xBD	; 189
    2352:	bf 4f       	sbci	r27, 0xFF	; 255
    2354:	fe 01       	movw	r30, r28
    2356:	ed 5b       	subi	r30, 0xBD	; 189
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	80 81       	ld	r24, Z
    235c:	91 81       	ldd	r25, Z+1	; 0x01
    235e:	01 97       	sbiw	r24, 0x01	; 1
    2360:	11 96       	adiw	r26, 0x01	; 1
    2362:	9c 93       	st	X, r25
    2364:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2366:	fe 01       	movw	r30, r28
    2368:	ed 5b       	subi	r30, 0xBD	; 189
    236a:	ff 4f       	sbci	r31, 0xFF	; 255
    236c:	80 81       	ld	r24, Z
    236e:	91 81       	ldd	r25, Z+1	; 0x01
    2370:	00 97       	sbiw	r24, 0x00	; 0
    2372:	d1 f6       	brne	.-76     	; 0x2328 <LCD_displayChar+0xf6>
    2374:	24 c0       	rjmp	.+72     	; 0x23be <LCD_displayChar+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2376:	8e 01       	movw	r16, r28
    2378:	0d 5b       	subi	r16, 0xBD	; 189
    237a:	1f 4f       	sbci	r17, 0xFF	; 255
    237c:	fe 01       	movw	r30, r28
    237e:	eb 5b       	subi	r30, 0xBB	; 187
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	60 81       	ld	r22, Z
    2384:	71 81       	ldd	r23, Z+1	; 0x01
    2386:	82 81       	ldd	r24, Z+2	; 0x02
    2388:	93 81       	ldd	r25, Z+3	; 0x03
    238a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    238e:	dc 01       	movw	r26, r24
    2390:	cb 01       	movw	r24, r22
    2392:	f8 01       	movw	r30, r16
    2394:	91 83       	std	Z+1, r25	; 0x01
    2396:	80 83       	st	Z, r24
    2398:	fe 01       	movw	r30, r28
    239a:	ed 5b       	subi	r30, 0xBD	; 189
    239c:	ff 4f       	sbci	r31, 0xFF	; 255
    239e:	80 81       	ld	r24, Z
    23a0:	91 81       	ldd	r25, Z+1	; 0x01
    23a2:	fe 01       	movw	r30, r28
    23a4:	ff 96       	adiw	r30, 0x3f	; 63
    23a6:	91 83       	std	Z+1, r25	; 0x01
    23a8:	80 83       	st	Z, r24
    23aa:	fe 01       	movw	r30, r28
    23ac:	ff 96       	adiw	r30, 0x3f	; 63
    23ae:	80 81       	ld	r24, Z
    23b0:	91 81       	ldd	r25, Z+1	; 0x01
    23b2:	01 97       	sbiw	r24, 0x01	; 1
    23b4:	f1 f7       	brne	.-4      	; 0x23b2 <LCD_displayChar+0x180>
    23b6:	fe 01       	movw	r30, r28
    23b8:	ff 96       	adiw	r30, 0x3f	; 63
    23ba:	91 83       	std	Z+1, r25	; 0x01
    23bc:	80 83       	st	Z, r24
	_delay_ms(1);
	GPIO_writePin(LCD_EN_PORT,LCD_ENABLE,1);
    23be:	81 e0       	ldi	r24, 0x01	; 1
    23c0:	61 e0       	ldi	r22, 0x01	; 1
    23c2:	41 e0       	ldi	r20, 0x01	; 1
    23c4:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_writePin>
    23c8:	80 e0       	ldi	r24, 0x00	; 0
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	a0 e8       	ldi	r26, 0x80	; 128
    23ce:	bf e3       	ldi	r27, 0x3F	; 63
    23d0:	8b af       	std	Y+59, r24	; 0x3b
    23d2:	9c af       	std	Y+60, r25	; 0x3c
    23d4:	ad af       	std	Y+61, r26	; 0x3d
    23d6:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23d8:	6b ad       	ldd	r22, Y+59	; 0x3b
    23da:	7c ad       	ldd	r23, Y+60	; 0x3c
    23dc:	8d ad       	ldd	r24, Y+61	; 0x3d
    23de:	9e ad       	ldd	r25, Y+62	; 0x3e
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	4a ef       	ldi	r20, 0xFA	; 250
    23e6:	54 e4       	ldi	r21, 0x44	; 68
    23e8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	8f ab       	std	Y+55, r24	; 0x37
    23f2:	98 af       	std	Y+56, r25	; 0x38
    23f4:	a9 af       	std	Y+57, r26	; 0x39
    23f6:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    23f8:	6f a9       	ldd	r22, Y+55	; 0x37
    23fa:	78 ad       	ldd	r23, Y+56	; 0x38
    23fc:	89 ad       	ldd	r24, Y+57	; 0x39
    23fe:	9a ad       	ldd	r25, Y+58	; 0x3a
    2400:	20 e0       	ldi	r18, 0x00	; 0
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	40 e8       	ldi	r20, 0x80	; 128
    2406:	5f e3       	ldi	r21, 0x3F	; 63
    2408:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    240c:	88 23       	and	r24, r24
    240e:	2c f4       	brge	.+10     	; 0x241a <LCD_displayChar+0x1e8>
		__ticks = 1;
    2410:	81 e0       	ldi	r24, 0x01	; 1
    2412:	90 e0       	ldi	r25, 0x00	; 0
    2414:	9e ab       	std	Y+54, r25	; 0x36
    2416:	8d ab       	std	Y+53, r24	; 0x35
    2418:	3f c0       	rjmp	.+126    	; 0x2498 <LCD_displayChar+0x266>
	else if (__tmp > 65535)
    241a:	6f a9       	ldd	r22, Y+55	; 0x37
    241c:	78 ad       	ldd	r23, Y+56	; 0x38
    241e:	89 ad       	ldd	r24, Y+57	; 0x39
    2420:	9a ad       	ldd	r25, Y+58	; 0x3a
    2422:	20 e0       	ldi	r18, 0x00	; 0
    2424:	3f ef       	ldi	r19, 0xFF	; 255
    2426:	4f e7       	ldi	r20, 0x7F	; 127
    2428:	57 e4       	ldi	r21, 0x47	; 71
    242a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    242e:	18 16       	cp	r1, r24
    2430:	4c f5       	brge	.+82     	; 0x2484 <LCD_displayChar+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2432:	6b ad       	ldd	r22, Y+59	; 0x3b
    2434:	7c ad       	ldd	r23, Y+60	; 0x3c
    2436:	8d ad       	ldd	r24, Y+61	; 0x3d
    2438:	9e ad       	ldd	r25, Y+62	; 0x3e
    243a:	20 e0       	ldi	r18, 0x00	; 0
    243c:	30 e0       	ldi	r19, 0x00	; 0
    243e:	40 e2       	ldi	r20, 0x20	; 32
    2440:	51 e4       	ldi	r21, 0x41	; 65
    2442:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2446:	dc 01       	movw	r26, r24
    2448:	cb 01       	movw	r24, r22
    244a:	bc 01       	movw	r22, r24
    244c:	cd 01       	movw	r24, r26
    244e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2452:	dc 01       	movw	r26, r24
    2454:	cb 01       	movw	r24, r22
    2456:	9e ab       	std	Y+54, r25	; 0x36
    2458:	8d ab       	std	Y+53, r24	; 0x35
    245a:	0f c0       	rjmp	.+30     	; 0x247a <LCD_displayChar+0x248>
    245c:	88 ec       	ldi	r24, 0xC8	; 200
    245e:	90 e0       	ldi	r25, 0x00	; 0
    2460:	9c ab       	std	Y+52, r25	; 0x34
    2462:	8b ab       	std	Y+51, r24	; 0x33
    2464:	8b a9       	ldd	r24, Y+51	; 0x33
    2466:	9c a9       	ldd	r25, Y+52	; 0x34
    2468:	01 97       	sbiw	r24, 0x01	; 1
    246a:	f1 f7       	brne	.-4      	; 0x2468 <LCD_displayChar+0x236>
    246c:	9c ab       	std	Y+52, r25	; 0x34
    246e:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2470:	8d a9       	ldd	r24, Y+53	; 0x35
    2472:	9e a9       	ldd	r25, Y+54	; 0x36
    2474:	01 97       	sbiw	r24, 0x01	; 1
    2476:	9e ab       	std	Y+54, r25	; 0x36
    2478:	8d ab       	std	Y+53, r24	; 0x35
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247a:	8d a9       	ldd	r24, Y+53	; 0x35
    247c:	9e a9       	ldd	r25, Y+54	; 0x36
    247e:	00 97       	sbiw	r24, 0x00	; 0
    2480:	69 f7       	brne	.-38     	; 0x245c <LCD_displayChar+0x22a>
    2482:	14 c0       	rjmp	.+40     	; 0x24ac <LCD_displayChar+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2484:	6f a9       	ldd	r22, Y+55	; 0x37
    2486:	78 ad       	ldd	r23, Y+56	; 0x38
    2488:	89 ad       	ldd	r24, Y+57	; 0x39
    248a:	9a ad       	ldd	r25, Y+58	; 0x3a
    248c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2490:	dc 01       	movw	r26, r24
    2492:	cb 01       	movw	r24, r22
    2494:	9e ab       	std	Y+54, r25	; 0x36
    2496:	8d ab       	std	Y+53, r24	; 0x35
    2498:	8d a9       	ldd	r24, Y+53	; 0x35
    249a:	9e a9       	ldd	r25, Y+54	; 0x36
    249c:	9a ab       	std	Y+50, r25	; 0x32
    249e:	89 ab       	std	Y+49, r24	; 0x31
    24a0:	89 a9       	ldd	r24, Y+49	; 0x31
    24a2:	9a a9       	ldd	r25, Y+50	; 0x32
    24a4:	01 97       	sbiw	r24, 0x01	; 1
    24a6:	f1 f7       	brne	.-4      	; 0x24a4 <LCD_displayChar+0x272>
    24a8:	9a ab       	std	Y+50, r25	; 0x32
    24aa:	89 ab       	std	Y+49, r24	; 0x31
	_delay_ms(1);
#if(LCD_BIT_MODE==8)
	GPIO_writePort(LCD_DATA_PORT,character);
    24ac:	fe 01       	movw	r30, r28
    24ae:	e3 5b       	subi	r30, 0xB3	; 179
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	80 e0       	ldi	r24, 0x00	; 0
    24b4:	60 81       	ld	r22, Z
    24b6:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <GPIO_writePort>
    24ba:	80 e0       	ldi	r24, 0x00	; 0
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	a0 e8       	ldi	r26, 0x80	; 128
    24c0:	bf e3       	ldi	r27, 0x3F	; 63
    24c2:	8d a7       	std	Y+45, r24	; 0x2d
    24c4:	9e a7       	std	Y+46, r25	; 0x2e
    24c6:	af a7       	std	Y+47, r26	; 0x2f
    24c8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    24ca:	6d a5       	ldd	r22, Y+45	; 0x2d
    24cc:	7e a5       	ldd	r23, Y+46	; 0x2e
    24ce:	8f a5       	ldd	r24, Y+47	; 0x2f
    24d0:	98 a9       	ldd	r25, Y+48	; 0x30
    24d2:	2b ea       	ldi	r18, 0xAB	; 171
    24d4:	3a ea       	ldi	r19, 0xAA	; 170
    24d6:	4a e2       	ldi	r20, 0x2A	; 42
    24d8:	50 e4       	ldi	r21, 0x40	; 64
    24da:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    24de:	dc 01       	movw	r26, r24
    24e0:	cb 01       	movw	r24, r22
    24e2:	89 a7       	std	Y+41, r24	; 0x29
    24e4:	9a a7       	std	Y+42, r25	; 0x2a
    24e6:	ab a7       	std	Y+43, r26	; 0x2b
    24e8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    24ea:	69 a5       	ldd	r22, Y+41	; 0x29
    24ec:	7a a5       	ldd	r23, Y+42	; 0x2a
    24ee:	8b a5       	ldd	r24, Y+43	; 0x2b
    24f0:	9c a5       	ldd	r25, Y+44	; 0x2c
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	30 e0       	ldi	r19, 0x00	; 0
    24f6:	40 e8       	ldi	r20, 0x80	; 128
    24f8:	5f e3       	ldi	r21, 0x3F	; 63
    24fa:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    24fe:	88 23       	and	r24, r24
    2500:	1c f4       	brge	.+6      	; 0x2508 <LCD_displayChar+0x2d6>
		__ticks = 1;
    2502:	81 e0       	ldi	r24, 0x01	; 1
    2504:	88 a7       	std	Y+40, r24	; 0x28
    2506:	91 c0       	rjmp	.+290    	; 0x262a <LCD_displayChar+0x3f8>
	else if (__tmp > 255)
    2508:	69 a5       	ldd	r22, Y+41	; 0x29
    250a:	7a a5       	ldd	r23, Y+42	; 0x2a
    250c:	8b a5       	ldd	r24, Y+43	; 0x2b
    250e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	4f e7       	ldi	r20, 0x7F	; 127
    2516:	53 e4       	ldi	r21, 0x43	; 67
    2518:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    251c:	18 16       	cp	r1, r24
    251e:	0c f0       	brlt	.+2      	; 0x2522 <LCD_displayChar+0x2f0>
    2520:	7b c0       	rjmp	.+246    	; 0x2618 <LCD_displayChar+0x3e6>
	{
		_delay_ms(__us / 1000.0);
    2522:	6d a5       	ldd	r22, Y+45	; 0x2d
    2524:	7e a5       	ldd	r23, Y+46	; 0x2e
    2526:	8f a5       	ldd	r24, Y+47	; 0x2f
    2528:	98 a9       	ldd	r25, Y+48	; 0x30
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	4a e7       	ldi	r20, 0x7A	; 122
    2530:	54 e4       	ldi	r21, 0x44	; 68
    2532:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    2536:	dc 01       	movw	r26, r24
    2538:	cb 01       	movw	r24, r22
    253a:	8c a3       	std	Y+36, r24	; 0x24
    253c:	9d a3       	std	Y+37, r25	; 0x25
    253e:	ae a3       	std	Y+38, r26	; 0x26
    2540:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2542:	6c a1       	ldd	r22, Y+36	; 0x24
    2544:	7d a1       	ldd	r23, Y+37	; 0x25
    2546:	8e a1       	ldd	r24, Y+38	; 0x26
    2548:	9f a1       	ldd	r25, Y+39	; 0x27
    254a:	20 e0       	ldi	r18, 0x00	; 0
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	4a ef       	ldi	r20, 0xFA	; 250
    2550:	54 e4       	ldi	r21, 0x44	; 68
    2552:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2556:	dc 01       	movw	r26, r24
    2558:	cb 01       	movw	r24, r22
    255a:	88 a3       	std	Y+32, r24	; 0x20
    255c:	99 a3       	std	Y+33, r25	; 0x21
    255e:	aa a3       	std	Y+34, r26	; 0x22
    2560:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2562:	68 a1       	ldd	r22, Y+32	; 0x20
    2564:	79 a1       	ldd	r23, Y+33	; 0x21
    2566:	8a a1       	ldd	r24, Y+34	; 0x22
    2568:	9b a1       	ldd	r25, Y+35	; 0x23
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	40 e8       	ldi	r20, 0x80	; 128
    2570:	5f e3       	ldi	r21, 0x3F	; 63
    2572:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2576:	88 23       	and	r24, r24
    2578:	2c f4       	brge	.+10     	; 0x2584 <LCD_displayChar+0x352>
		__ticks = 1;
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	90 e0       	ldi	r25, 0x00	; 0
    257e:	9f 8f       	std	Y+31, r25	; 0x1f
    2580:	8e 8f       	std	Y+30, r24	; 0x1e
    2582:	3f c0       	rjmp	.+126    	; 0x2602 <LCD_displayChar+0x3d0>
	else if (__tmp > 65535)
    2584:	68 a1       	ldd	r22, Y+32	; 0x20
    2586:	79 a1       	ldd	r23, Y+33	; 0x21
    2588:	8a a1       	ldd	r24, Y+34	; 0x22
    258a:	9b a1       	ldd	r25, Y+35	; 0x23
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	3f ef       	ldi	r19, 0xFF	; 255
    2590:	4f e7       	ldi	r20, 0x7F	; 127
    2592:	57 e4       	ldi	r21, 0x47	; 71
    2594:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    2598:	18 16       	cp	r1, r24
    259a:	4c f5       	brge	.+82     	; 0x25ee <LCD_displayChar+0x3bc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    259c:	6c a1       	ldd	r22, Y+36	; 0x24
    259e:	7d a1       	ldd	r23, Y+37	; 0x25
    25a0:	8e a1       	ldd	r24, Y+38	; 0x26
    25a2:	9f a1       	ldd	r25, Y+39	; 0x27
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	40 e2       	ldi	r20, 0x20	; 32
    25aa:	51 e4       	ldi	r21, 0x41	; 65
    25ac:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    25b0:	dc 01       	movw	r26, r24
    25b2:	cb 01       	movw	r24, r22
    25b4:	bc 01       	movw	r22, r24
    25b6:	cd 01       	movw	r24, r26
    25b8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	9f 8f       	std	Y+31, r25	; 0x1f
    25c2:	8e 8f       	std	Y+30, r24	; 0x1e
    25c4:	0f c0       	rjmp	.+30     	; 0x25e4 <LCD_displayChar+0x3b2>
    25c6:	88 ec       	ldi	r24, 0xC8	; 200
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	9d 8f       	std	Y+29, r25	; 0x1d
    25cc:	8c 8f       	std	Y+28, r24	; 0x1c
    25ce:	8c 8d       	ldd	r24, Y+28	; 0x1c
    25d0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	f1 f7       	brne	.-4      	; 0x25d2 <LCD_displayChar+0x3a0>
    25d6:	9d 8f       	std	Y+29, r25	; 0x1d
    25d8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25da:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25dc:	9f 8d       	ldd	r25, Y+31	; 0x1f
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	9f 8f       	std	Y+31, r25	; 0x1f
    25e2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    25e6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    25e8:	00 97       	sbiw	r24, 0x00	; 0
    25ea:	69 f7       	brne	.-38     	; 0x25c6 <LCD_displayChar+0x394>
    25ec:	24 c0       	rjmp	.+72     	; 0x2636 <LCD_displayChar+0x404>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ee:	68 a1       	ldd	r22, Y+32	; 0x20
    25f0:	79 a1       	ldd	r23, Y+33	; 0x21
    25f2:	8a a1       	ldd	r24, Y+34	; 0x22
    25f4:	9b a1       	ldd	r25, Y+35	; 0x23
    25f6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	9f 8f       	std	Y+31, r25	; 0x1f
    2600:	8e 8f       	std	Y+30, r24	; 0x1e
    2602:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2604:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2606:	9b 8f       	std	Y+27, r25	; 0x1b
    2608:	8a 8f       	std	Y+26, r24	; 0x1a
    260a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    260c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    260e:	01 97       	sbiw	r24, 0x01	; 1
    2610:	f1 f7       	brne	.-4      	; 0x260e <LCD_displayChar+0x3dc>
    2612:	9b 8f       	std	Y+27, r25	; 0x1b
    2614:	8a 8f       	std	Y+26, r24	; 0x1a
    2616:	0f c0       	rjmp	.+30     	; 0x2636 <LCD_displayChar+0x404>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2618:	69 a5       	ldd	r22, Y+41	; 0x29
    261a:	7a a5       	ldd	r23, Y+42	; 0x2a
    261c:	8b a5       	ldd	r24, Y+43	; 0x2b
    261e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2620:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2624:	dc 01       	movw	r26, r24
    2626:	cb 01       	movw	r24, r22
    2628:	88 a7       	std	Y+40, r24	; 0x28
    262a:	88 a5       	ldd	r24, Y+40	; 0x28
    262c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    262e:	89 8d       	ldd	r24, Y+25	; 0x19
    2630:	8a 95       	dec	r24
    2632:	f1 f7       	brne	.-4      	; 0x2630 <LCD_displayChar+0x3fe>
    2634:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	GPIO_writePin(LCD_EN_PORT,LCD_ENABLE,0);
    2636:	81 e0       	ldi	r24, 0x01	; 1
    2638:	61 e0       	ldi	r22, 0x01	; 1
    263a:	40 e0       	ldi	r20, 0x00	; 0
    263c:	0e 94 12 0b 	call	0x1624	; 0x1624 <GPIO_writePin>
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	a0 e8       	ldi	r26, 0x80	; 128
    2646:	bf e3       	ldi	r27, 0x3F	; 63
    2648:	8d 8b       	std	Y+21, r24	; 0x15
    264a:	9e 8b       	std	Y+22, r25	; 0x16
    264c:	af 8b       	std	Y+23, r26	; 0x17
    264e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2650:	6d 89       	ldd	r22, Y+21	; 0x15
    2652:	7e 89       	ldd	r23, Y+22	; 0x16
    2654:	8f 89       	ldd	r24, Y+23	; 0x17
    2656:	98 8d       	ldd	r25, Y+24	; 0x18
    2658:	2b ea       	ldi	r18, 0xAB	; 171
    265a:	3a ea       	ldi	r19, 0xAA	; 170
    265c:	4a e2       	ldi	r20, 0x2A	; 42
    265e:	50 e4       	ldi	r21, 0x40	; 64
    2660:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2664:	dc 01       	movw	r26, r24
    2666:	cb 01       	movw	r24, r22
    2668:	89 8b       	std	Y+17, r24	; 0x11
    266a:	9a 8b       	std	Y+18, r25	; 0x12
    266c:	ab 8b       	std	Y+19, r26	; 0x13
    266e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2670:	69 89       	ldd	r22, Y+17	; 0x11
    2672:	7a 89       	ldd	r23, Y+18	; 0x12
    2674:	8b 89       	ldd	r24, Y+19	; 0x13
    2676:	9c 89       	ldd	r25, Y+20	; 0x14
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e8       	ldi	r20, 0x80	; 128
    267e:	5f e3       	ldi	r21, 0x3F	; 63
    2680:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2684:	88 23       	and	r24, r24
    2686:	1c f4       	brge	.+6      	; 0x268e <LCD_displayChar+0x45c>
		__ticks = 1;
    2688:	81 e0       	ldi	r24, 0x01	; 1
    268a:	88 8b       	std	Y+16, r24	; 0x10
    268c:	91 c0       	rjmp	.+290    	; 0x27b0 <LCD_displayChar+0x57e>
	else if (__tmp > 255)
    268e:	69 89       	ldd	r22, Y+17	; 0x11
    2690:	7a 89       	ldd	r23, Y+18	; 0x12
    2692:	8b 89       	ldd	r24, Y+19	; 0x13
    2694:	9c 89       	ldd	r25, Y+20	; 0x14
    2696:	20 e0       	ldi	r18, 0x00	; 0
    2698:	30 e0       	ldi	r19, 0x00	; 0
    269a:	4f e7       	ldi	r20, 0x7F	; 127
    269c:	53 e4       	ldi	r21, 0x43	; 67
    269e:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    26a2:	18 16       	cp	r1, r24
    26a4:	0c f0       	brlt	.+2      	; 0x26a8 <LCD_displayChar+0x476>
    26a6:	7b c0       	rjmp	.+246    	; 0x279e <LCD_displayChar+0x56c>
	{
		_delay_ms(__us / 1000.0);
    26a8:	6d 89       	ldd	r22, Y+21	; 0x15
    26aa:	7e 89       	ldd	r23, Y+22	; 0x16
    26ac:	8f 89       	ldd	r24, Y+23	; 0x17
    26ae:	98 8d       	ldd	r25, Y+24	; 0x18
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	4a e7       	ldi	r20, 0x7A	; 122
    26b6:	54 e4       	ldi	r21, 0x44	; 68
    26b8:	0e 94 96 03 	call	0x72c	; 0x72c <__divsf3>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	8c 87       	std	Y+12, r24	; 0x0c
    26c2:	9d 87       	std	Y+13, r25	; 0x0d
    26c4:	ae 87       	std	Y+14, r26	; 0x0e
    26c6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26c8:	6c 85       	ldd	r22, Y+12	; 0x0c
    26ca:	7d 85       	ldd	r23, Y+13	; 0x0d
    26cc:	8e 85       	ldd	r24, Y+14	; 0x0e
    26ce:	9f 85       	ldd	r25, Y+15	; 0x0f
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	4a ef       	ldi	r20, 0xFA	; 250
    26d6:	54 e4       	ldi	r21, 0x44	; 68
    26d8:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    26dc:	dc 01       	movw	r26, r24
    26de:	cb 01       	movw	r24, r22
    26e0:	88 87       	std	Y+8, r24	; 0x08
    26e2:	99 87       	std	Y+9, r25	; 0x09
    26e4:	aa 87       	std	Y+10, r26	; 0x0a
    26e6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    26e8:	68 85       	ldd	r22, Y+8	; 0x08
    26ea:	79 85       	ldd	r23, Y+9	; 0x09
    26ec:	8a 85       	ldd	r24, Y+10	; 0x0a
    26ee:	9b 85       	ldd	r25, Y+11	; 0x0b
    26f0:	20 e0       	ldi	r18, 0x00	; 0
    26f2:	30 e0       	ldi	r19, 0x00	; 0
    26f4:	40 e8       	ldi	r20, 0x80	; 128
    26f6:	5f e3       	ldi	r21, 0x3F	; 63
    26f8:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    26fc:	88 23       	and	r24, r24
    26fe:	2c f4       	brge	.+10     	; 0x270a <LCD_displayChar+0x4d8>
		__ticks = 1;
    2700:	81 e0       	ldi	r24, 0x01	; 1
    2702:	90 e0       	ldi	r25, 0x00	; 0
    2704:	9f 83       	std	Y+7, r25	; 0x07
    2706:	8e 83       	std	Y+6, r24	; 0x06
    2708:	3f c0       	rjmp	.+126    	; 0x2788 <LCD_displayChar+0x556>
	else if (__tmp > 65535)
    270a:	68 85       	ldd	r22, Y+8	; 0x08
    270c:	79 85       	ldd	r23, Y+9	; 0x09
    270e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2710:	9b 85       	ldd	r25, Y+11	; 0x0b
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	3f ef       	ldi	r19, 0xFF	; 255
    2716:	4f e7       	ldi	r20, 0x7F	; 127
    2718:	57 e4       	ldi	r21, 0x47	; 71
    271a:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    271e:	18 16       	cp	r1, r24
    2720:	4c f5       	brge	.+82     	; 0x2774 <LCD_displayChar+0x542>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2722:	6c 85       	ldd	r22, Y+12	; 0x0c
    2724:	7d 85       	ldd	r23, Y+13	; 0x0d
    2726:	8e 85       	ldd	r24, Y+14	; 0x0e
    2728:	9f 85       	ldd	r25, Y+15	; 0x0f
    272a:	20 e0       	ldi	r18, 0x00	; 0
    272c:	30 e0       	ldi	r19, 0x00	; 0
    272e:	40 e2       	ldi	r20, 0x20	; 32
    2730:	51 e4       	ldi	r21, 0x41	; 65
    2732:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2736:	dc 01       	movw	r26, r24
    2738:	cb 01       	movw	r24, r22
    273a:	bc 01       	movw	r22, r24
    273c:	cd 01       	movw	r24, r26
    273e:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	9f 83       	std	Y+7, r25	; 0x07
    2748:	8e 83       	std	Y+6, r24	; 0x06
    274a:	0f c0       	rjmp	.+30     	; 0x276a <LCD_displayChar+0x538>
    274c:	88 ec       	ldi	r24, 0xC8	; 200
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	9d 83       	std	Y+5, r25	; 0x05
    2752:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2754:	8c 81       	ldd	r24, Y+4	; 0x04
    2756:	9d 81       	ldd	r25, Y+5	; 0x05
    2758:	01 97       	sbiw	r24, 0x01	; 1
    275a:	f1 f7       	brne	.-4      	; 0x2758 <LCD_displayChar+0x526>
    275c:	9d 83       	std	Y+5, r25	; 0x05
    275e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2760:	8e 81       	ldd	r24, Y+6	; 0x06
    2762:	9f 81       	ldd	r25, Y+7	; 0x07
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	9f 83       	std	Y+7, r25	; 0x07
    2768:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    276a:	8e 81       	ldd	r24, Y+6	; 0x06
    276c:	9f 81       	ldd	r25, Y+7	; 0x07
    276e:	00 97       	sbiw	r24, 0x00	; 0
    2770:	69 f7       	brne	.-38     	; 0x274c <LCD_displayChar+0x51a>
    2772:	24 c0       	rjmp	.+72     	; 0x27bc <LCD_displayChar+0x58a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2774:	68 85       	ldd	r22, Y+8	; 0x08
    2776:	79 85       	ldd	r23, Y+9	; 0x09
    2778:	8a 85       	ldd	r24, Y+10	; 0x0a
    277a:	9b 85       	ldd	r25, Y+11	; 0x0b
    277c:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    2780:	dc 01       	movw	r26, r24
    2782:	cb 01       	movw	r24, r22
    2784:	9f 83       	std	Y+7, r25	; 0x07
    2786:	8e 83       	std	Y+6, r24	; 0x06
    2788:	8e 81       	ldd	r24, Y+6	; 0x06
    278a:	9f 81       	ldd	r25, Y+7	; 0x07
    278c:	9b 83       	std	Y+3, r25	; 0x03
    278e:	8a 83       	std	Y+2, r24	; 0x02
    2790:	8a 81       	ldd	r24, Y+2	; 0x02
    2792:	9b 81       	ldd	r25, Y+3	; 0x03
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	f1 f7       	brne	.-4      	; 0x2794 <LCD_displayChar+0x562>
    2798:	9b 83       	std	Y+3, r25	; 0x03
    279a:	8a 83       	std	Y+2, r24	; 0x02
    279c:	0f c0       	rjmp	.+30     	; 0x27bc <LCD_displayChar+0x58a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    279e:	69 89       	ldd	r22, Y+17	; 0x11
    27a0:	7a 89       	ldd	r23, Y+18	; 0x12
    27a2:	8b 89       	ldd	r24, Y+19	; 0x13
    27a4:	9c 89       	ldd	r25, Y+20	; 0x14
    27a6:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	88 8b       	std	Y+16, r24	; 0x10
    27b0:	88 89       	ldd	r24, Y+16	; 0x10
    27b2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    27b4:	89 81       	ldd	r24, Y+1	; 0x01
    27b6:	8a 95       	dec	r24
    27b8:	f1 f7       	brne	.-4      	; 0x27b6 <LCD_displayChar+0x584>
    27ba:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePin(LCD_DATA_PORT,LCD_DB7,GET_BIT(character,3));
	_delay_ms(1);
	GPIO_writePin(LCD_RS_PORT,LCD_ENABLE,0);
	_delay_ms(1);
#endif
}
    27bc:	c3 5b       	subi	r28, 0xB3	; 179
    27be:	df 4f       	sbci	r29, 0xFF	; 255
    27c0:	0f b6       	in	r0, 0x3f	; 63
    27c2:	f8 94       	cli
    27c4:	de bf       	out	0x3e, r29	; 62
    27c6:	0f be       	out	0x3f, r0	; 63
    27c8:	cd bf       	out	0x3d, r28	; 61
    27ca:	cf 91       	pop	r28
    27cc:	df 91       	pop	r29
    27ce:	1f 91       	pop	r17
    27d0:	0f 91       	pop	r16
    27d2:	08 95       	ret

000027d4 <LCD_init>:
/*
 * TO initialize lcd
 */
void LCD_init(void){
    27d4:	df 93       	push	r29
    27d6:	cf 93       	push	r28
    27d8:	cd b7       	in	r28, 0x3d	; 61
    27da:	de b7       	in	r29, 0x3e	; 62
    27dc:	2e 97       	sbiw	r28, 0x0e	; 14
    27de:	0f b6       	in	r0, 0x3f	; 63
    27e0:	f8 94       	cli
    27e2:	de bf       	out	0x3e, r29	; 62
    27e4:	0f be       	out	0x3f, r0	; 63
    27e6:	cd bf       	out	0x3d, r28	; 61
	GPIO_setupPinDirection(LCD_RS_PORT,LCD_RS,PIN_OUTPUT);
    27e8:	81 e0       	ldi	r24, 0x01	; 1
    27ea:	60 e0       	ldi	r22, 0x00	; 0
    27ec:	41 e0       	ldi	r20, 0x01	; 1
    27ee:	0e 94 27 0a 	call	0x144e	; 0x144e <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_EN_PORT,LCD_ENABLE,PIN_OUTPUT);
    27f2:	81 e0       	ldi	r24, 0x01	; 1
    27f4:	61 e0       	ldi	r22, 0x01	; 1
    27f6:	41 e0       	ldi	r20, 0x01	; 1
    27f8:	0e 94 27 0a 	call	0x144e	; 0x144e <GPIO_setupPinDirection>
#if(LCD_BIT_MODE==8)
	GPIO_setupPortDirection(LCD_DATA_PORT,PORT_OUTPUT);
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	6f ef       	ldi	r22, 0xFF	; 255
    2800:	0e 94 98 0c 	call	0x1930	; 0x1930 <GPIO_setupPortDirection>
    2804:	80 e0       	ldi	r24, 0x00	; 0
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	a0 ea       	ldi	r26, 0xA0	; 160
    280a:	b1 e4       	ldi	r27, 0x41	; 65
    280c:	8b 87       	std	Y+11, r24	; 0x0b
    280e:	9c 87       	std	Y+12, r25	; 0x0c
    2810:	ad 87       	std	Y+13, r26	; 0x0d
    2812:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2814:	6b 85       	ldd	r22, Y+11	; 0x0b
    2816:	7c 85       	ldd	r23, Y+12	; 0x0c
    2818:	8d 85       	ldd	r24, Y+13	; 0x0d
    281a:	9e 85       	ldd	r25, Y+14	; 0x0e
    281c:	20 e0       	ldi	r18, 0x00	; 0
    281e:	30 e0       	ldi	r19, 0x00	; 0
    2820:	4a ef       	ldi	r20, 0xFA	; 250
    2822:	54 e4       	ldi	r21, 0x44	; 68
    2824:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2828:	dc 01       	movw	r26, r24
    282a:	cb 01       	movw	r24, r22
    282c:	8f 83       	std	Y+7, r24	; 0x07
    282e:	98 87       	std	Y+8, r25	; 0x08
    2830:	a9 87       	std	Y+9, r26	; 0x09
    2832:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2834:	6f 81       	ldd	r22, Y+7	; 0x07
    2836:	78 85       	ldd	r23, Y+8	; 0x08
    2838:	89 85       	ldd	r24, Y+9	; 0x09
    283a:	9a 85       	ldd	r25, Y+10	; 0x0a
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e8       	ldi	r20, 0x80	; 128
    2842:	5f e3       	ldi	r21, 0x3F	; 63
    2844:	0e 94 a2 04 	call	0x944	; 0x944 <__ltsf2>
    2848:	88 23       	and	r24, r24
    284a:	2c f4       	brge	.+10     	; 0x2856 <LCD_init+0x82>
		__ticks = 1;
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	9e 83       	std	Y+6, r25	; 0x06
    2852:	8d 83       	std	Y+5, r24	; 0x05
    2854:	3f c0       	rjmp	.+126    	; 0x28d4 <LCD_init+0x100>
	else if (__tmp > 65535)
    2856:	6f 81       	ldd	r22, Y+7	; 0x07
    2858:	78 85       	ldd	r23, Y+8	; 0x08
    285a:	89 85       	ldd	r24, Y+9	; 0x09
    285c:	9a 85       	ldd	r25, Y+10	; 0x0a
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	3f ef       	ldi	r19, 0xFF	; 255
    2862:	4f e7       	ldi	r20, 0x7F	; 127
    2864:	57 e4       	ldi	r21, 0x47	; 71
    2866:	0e 94 42 04 	call	0x884	; 0x884 <__gtsf2>
    286a:	18 16       	cp	r1, r24
    286c:	4c f5       	brge	.+82     	; 0x28c0 <LCD_init+0xec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    286e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2870:	7c 85       	ldd	r23, Y+12	; 0x0c
    2872:	8d 85       	ldd	r24, Y+13	; 0x0d
    2874:	9e 85       	ldd	r25, Y+14	; 0x0e
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	40 e2       	ldi	r20, 0x20	; 32
    287c:	51 e4       	ldi	r21, 0x41	; 65
    287e:	0e 94 9c 02 	call	0x538	; 0x538 <__mulsf3>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	bc 01       	movw	r22, r24
    2888:	cd 01       	movw	r24, r26
    288a:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	9e 83       	std	Y+6, r25	; 0x06
    2894:	8d 83       	std	Y+5, r24	; 0x05
    2896:	0f c0       	rjmp	.+30     	; 0x28b6 <LCD_init+0xe2>
    2898:	88 ec       	ldi	r24, 0xC8	; 200
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	9c 83       	std	Y+4, r25	; 0x04
    289e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28a0:	8b 81       	ldd	r24, Y+3	; 0x03
    28a2:	9c 81       	ldd	r25, Y+4	; 0x04
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	f1 f7       	brne	.-4      	; 0x28a4 <LCD_init+0xd0>
    28a8:	9c 83       	std	Y+4, r25	; 0x04
    28aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ac:	8d 81       	ldd	r24, Y+5	; 0x05
    28ae:	9e 81       	ldd	r25, Y+6	; 0x06
    28b0:	01 97       	sbiw	r24, 0x01	; 1
    28b2:	9e 83       	std	Y+6, r25	; 0x06
    28b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28b6:	8d 81       	ldd	r24, Y+5	; 0x05
    28b8:	9e 81       	ldd	r25, Y+6	; 0x06
    28ba:	00 97       	sbiw	r24, 0x00	; 0
    28bc:	69 f7       	brne	.-38     	; 0x2898 <LCD_init+0xc4>
    28be:	14 c0       	rjmp	.+40     	; 0x28e8 <LCD_init+0x114>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c0:	6f 81       	ldd	r22, Y+7	; 0x07
    28c2:	78 85       	ldd	r23, Y+8	; 0x08
    28c4:	89 85       	ldd	r24, Y+9	; 0x09
    28c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c8:	0e 94 c6 00 	call	0x18c	; 0x18c <__fixunssfsi>
    28cc:	dc 01       	movw	r26, r24
    28ce:	cb 01       	movw	r24, r22
    28d0:	9e 83       	std	Y+6, r25	; 0x06
    28d2:	8d 83       	std	Y+5, r24	; 0x05
    28d4:	8d 81       	ldd	r24, Y+5	; 0x05
    28d6:	9e 81       	ldd	r25, Y+6	; 0x06
    28d8:	9a 83       	std	Y+2, r25	; 0x02
    28da:	89 83       	std	Y+1, r24	; 0x01
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	9a 81       	ldd	r25, Y+2	; 0x02
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	f1 f7       	brne	.-4      	; 0x28e0 <LCD_init+0x10c>
    28e4:	9a 83       	std	Y+2, r25	; 0x02
    28e6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);
	LCD_sendCommand(LCD_8BIT_MODE);
    28e8:	88 e3       	ldi	r24, 0x38	; 56
    28ea:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LCD_sendCommand>
	_delay_ms(20);
	LCD_sendCommand(LCD_4BIT_MODE_FIRST_COMMAND);
	LCD_sendCommand(LCD_4BIT_MODE_SECOND_COMMAND);
	LCD_sendCommand(LCD_4BIT_MODE);
#endif
	LCD_sendCommand(LCD_CURSOR_OFF);
    28ee:	8c e0       	ldi	r24, 0x0C	; 12
    28f0:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    28f4:	81 e0       	ldi	r24, 0x01	; 1
    28f6:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LCD_sendCommand>

}
    28fa:	2e 96       	adiw	r28, 0x0e	; 14
    28fc:	0f b6       	in	r0, 0x3f	; 63
    28fe:	f8 94       	cli
    2900:	de bf       	out	0x3e, r29	; 62
    2902:	0f be       	out	0x3f, r0	; 63
    2904:	cd bf       	out	0x3d, r28	; 61
    2906:	cf 91       	pop	r28
    2908:	df 91       	pop	r29
    290a:	08 95       	ret

0000290c <LCD_displayString>:
/*
 * to display string on lcd
 */
void LCD_displayString(const char *str){
    290c:	df 93       	push	r29
    290e:	cf 93       	push	r28
    2910:	00 d0       	rcall	.+0      	; 0x2912 <LCD_displayString+0x6>
    2912:	00 d0       	rcall	.+0      	; 0x2914 <LCD_displayString+0x8>
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
    2918:	9c 83       	std	Y+4, r25	; 0x04
    291a:	8b 83       	std	Y+3, r24	; 0x03
	for(int i=0;str[i]!='\0';i++){
    291c:	1a 82       	std	Y+2, r1	; 0x02
    291e:	19 82       	std	Y+1, r1	; 0x01
    2920:	0f c0       	rjmp	.+30     	; 0x2940 <LCD_displayString+0x34>
		LCD_displayChar(str[i]);
    2922:	29 81       	ldd	r18, Y+1	; 0x01
    2924:	3a 81       	ldd	r19, Y+2	; 0x02
    2926:	8b 81       	ldd	r24, Y+3	; 0x03
    2928:	9c 81       	ldd	r25, Y+4	; 0x04
    292a:	fc 01       	movw	r30, r24
    292c:	e2 0f       	add	r30, r18
    292e:	f3 1f       	adc	r31, r19
    2930:	80 81       	ld	r24, Z
    2932:	0e 94 19 11 	call	0x2232	; 0x2232 <LCD_displayChar>
}
/*
 * to display string on lcd
 */
void LCD_displayString(const char *str){
	for(int i=0;str[i]!='\0';i++){
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	9a 81       	ldd	r25, Y+2	; 0x02
    293a:	01 96       	adiw	r24, 0x01	; 1
    293c:	9a 83       	std	Y+2, r25	; 0x02
    293e:	89 83       	std	Y+1, r24	; 0x01
    2940:	29 81       	ldd	r18, Y+1	; 0x01
    2942:	3a 81       	ldd	r19, Y+2	; 0x02
    2944:	8b 81       	ldd	r24, Y+3	; 0x03
    2946:	9c 81       	ldd	r25, Y+4	; 0x04
    2948:	fc 01       	movw	r30, r24
    294a:	e2 0f       	add	r30, r18
    294c:	f3 1f       	adc	r31, r19
    294e:	80 81       	ld	r24, Z
    2950:	88 23       	and	r24, r24
    2952:	39 f7       	brne	.-50     	; 0x2922 <LCD_displayString+0x16>
		LCD_displayChar(str[i]);
	}
}
    2954:	0f 90       	pop	r0
    2956:	0f 90       	pop	r0
    2958:	0f 90       	pop	r0
    295a:	0f 90       	pop	r0
    295c:	cf 91       	pop	r28
    295e:	df 91       	pop	r29
    2960:	08 95       	ret

00002962 <LCD_moveCursor>:
/*
 * to change the position of the cursor on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col){
    2962:	df 93       	push	r29
    2964:	cf 93       	push	r28
    2966:	00 d0       	rcall	.+0      	; 0x2968 <LCD_moveCursor+0x6>
    2968:	00 d0       	rcall	.+0      	; 0x296a <LCD_moveCursor+0x8>
    296a:	0f 92       	push	r0
    296c:	cd b7       	in	r28, 0x3d	; 61
    296e:	de b7       	in	r29, 0x3e	; 62
    2970:	8a 83       	std	Y+2, r24	; 0x02
    2972:	6b 83       	std	Y+3, r22	; 0x03
	uint8 LCD_address;
	switch(row){
    2974:	8a 81       	ldd	r24, Y+2	; 0x02
    2976:	28 2f       	mov	r18, r24
    2978:	30 e0       	ldi	r19, 0x00	; 0
    297a:	3d 83       	std	Y+5, r19	; 0x05
    297c:	2c 83       	std	Y+4, r18	; 0x04
    297e:	8c 81       	ldd	r24, Y+4	; 0x04
    2980:	9d 81       	ldd	r25, Y+5	; 0x05
    2982:	81 30       	cpi	r24, 0x01	; 1
    2984:	91 05       	cpc	r25, r1
    2986:	c1 f0       	breq	.+48     	; 0x29b8 <LCD_moveCursor+0x56>
    2988:	2c 81       	ldd	r18, Y+4	; 0x04
    298a:	3d 81       	ldd	r19, Y+5	; 0x05
    298c:	22 30       	cpi	r18, 0x02	; 2
    298e:	31 05       	cpc	r19, r1
    2990:	2c f4       	brge	.+10     	; 0x299c <LCD_moveCursor+0x3a>
    2992:	8c 81       	ldd	r24, Y+4	; 0x04
    2994:	9d 81       	ldd	r25, Y+5	; 0x05
    2996:	00 97       	sbiw	r24, 0x00	; 0
    2998:	61 f0       	breq	.+24     	; 0x29b2 <LCD_moveCursor+0x50>
    299a:	19 c0       	rjmp	.+50     	; 0x29ce <LCD_moveCursor+0x6c>
    299c:	2c 81       	ldd	r18, Y+4	; 0x04
    299e:	3d 81       	ldd	r19, Y+5	; 0x05
    29a0:	22 30       	cpi	r18, 0x02	; 2
    29a2:	31 05       	cpc	r19, r1
    29a4:	69 f0       	breq	.+26     	; 0x29c0 <LCD_moveCursor+0x5e>
    29a6:	8c 81       	ldd	r24, Y+4	; 0x04
    29a8:	9d 81       	ldd	r25, Y+5	; 0x05
    29aa:	83 30       	cpi	r24, 0x03	; 3
    29ac:	91 05       	cpc	r25, r1
    29ae:	61 f0       	breq	.+24     	; 0x29c8 <LCD_moveCursor+0x66>
    29b0:	0e c0       	rjmp	.+28     	; 0x29ce <LCD_moveCursor+0x6c>
	case 0:
		LCD_address=col;
    29b2:	8b 81       	ldd	r24, Y+3	; 0x03
    29b4:	89 83       	std	Y+1, r24	; 0x01
    29b6:	0b c0       	rjmp	.+22     	; 0x29ce <LCD_moveCursor+0x6c>
		break;
	case 1:
		LCD_address=col+0x40;
    29b8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ba:	80 5c       	subi	r24, 0xC0	; 192
    29bc:	89 83       	std	Y+1, r24	; 0x01
    29be:	07 c0       	rjmp	.+14     	; 0x29ce <LCD_moveCursor+0x6c>
		break;
	case 2:
		LCD_address=col+0x10;
    29c0:	8b 81       	ldd	r24, Y+3	; 0x03
    29c2:	80 5f       	subi	r24, 0xF0	; 240
    29c4:	89 83       	std	Y+1, r24	; 0x01
    29c6:	03 c0       	rjmp	.+6      	; 0x29ce <LCD_moveCursor+0x6c>
		break;
	case 3:
		LCD_address=col+0x50;
    29c8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ca:	80 5b       	subi	r24, 0xB0	; 176
    29cc:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	LCD_sendCommand(LCD_CURSOR_TO_FIRST_LINE|LCD_address);
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	80 68       	ori	r24, 0x80	; 128
    29d2:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LCD_sendCommand>

}
    29d6:	0f 90       	pop	r0
    29d8:	0f 90       	pop	r0
    29da:	0f 90       	pop	r0
    29dc:	0f 90       	pop	r0
    29de:	0f 90       	pop	r0
    29e0:	cf 91       	pop	r28
    29e2:	df 91       	pop	r29
    29e4:	08 95       	ret

000029e6 <LCD_displayStringRowColumn>:
/*
 * to display string in the desired position
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char* str){
    29e6:	df 93       	push	r29
    29e8:	cf 93       	push	r28
    29ea:	00 d0       	rcall	.+0      	; 0x29ec <LCD_displayStringRowColumn+0x6>
    29ec:	00 d0       	rcall	.+0      	; 0x29ee <LCD_displayStringRowColumn+0x8>
    29ee:	cd b7       	in	r28, 0x3d	; 61
    29f0:	de b7       	in	r29, 0x3e	; 62
    29f2:	89 83       	std	Y+1, r24	; 0x01
    29f4:	6a 83       	std	Y+2, r22	; 0x02
    29f6:	5c 83       	std	Y+4, r21	; 0x04
    29f8:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col);
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	6a 81       	ldd	r22, Y+2	; 0x02
    29fe:	0e 94 b1 14 	call	0x2962	; 0x2962 <LCD_moveCursor>
	LCD_displayString(str);
    2a02:	8b 81       	ldd	r24, Y+3	; 0x03
    2a04:	9c 81       	ldd	r25, Y+4	; 0x04
    2a06:	0e 94 86 14 	call	0x290c	; 0x290c <LCD_displayString>
}
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	0f 90       	pop	r0
    2a10:	0f 90       	pop	r0
    2a12:	cf 91       	pop	r28
    2a14:	df 91       	pop	r29
    2a16:	08 95       	ret

00002a18 <LCD_clearScreen>:
/*
 * to clear display
 */
void LCD_clearScreen(){
    2a18:	df 93       	push	r29
    2a1a:	cf 93       	push	r28
    2a1c:	cd b7       	in	r28, 0x3d	; 61
    2a1e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_DISPLAY);
    2a20:	81 e0       	ldi	r24, 0x01	; 1
    2a22:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LCD_sendCommand>
}
    2a26:	cf 91       	pop	r28
    2a28:	df 91       	pop	r29
    2a2a:	08 95       	ret

00002a2c <LCD_integerToString>:
/*
 * to display integers
 */
void LCD_integerToString(int num){
    2a2c:	df 93       	push	r29
    2a2e:	cf 93       	push	r28
    2a30:	cd b7       	in	r28, 0x3d	; 61
    2a32:	de b7       	in	r29, 0x3e	; 62
    2a34:	2c 97       	sbiw	r28, 0x0c	; 12
    2a36:	0f b6       	in	r0, 0x3f	; 63
    2a38:	f8 94       	cli
    2a3a:	de bf       	out	0x3e, r29	; 62
    2a3c:	0f be       	out	0x3f, r0	; 63
    2a3e:	cd bf       	out	0x3d, r28	; 61
    2a40:	9c 87       	std	Y+12, r25	; 0x0c
    2a42:	8b 87       	std	Y+11, r24	; 0x0b
	char buffer[10];
	itoa(num,buffer,10);
    2a44:	8b 85       	ldd	r24, Y+11	; 0x0b
    2a46:	9c 85       	ldd	r25, Y+12	; 0x0c
    2a48:	9e 01       	movw	r18, r28
    2a4a:	2f 5f       	subi	r18, 0xFF	; 255
    2a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a4e:	b9 01       	movw	r22, r18
    2a50:	4a e0       	ldi	r20, 0x0A	; 10
    2a52:	50 e0       	ldi	r21, 0x00	; 0
    2a54:	0e 94 dc 15 	call	0x2bb8	; 0x2bb8 <itoa>
	LCD_displayString(buffer);
    2a58:	ce 01       	movw	r24, r28
    2a5a:	01 96       	adiw	r24, 0x01	; 1
    2a5c:	0e 94 86 14 	call	0x290c	; 0x290c <LCD_displayString>
}
    2a60:	2c 96       	adiw	r28, 0x0c	; 12
    2a62:	0f b6       	in	r0, 0x3f	; 63
    2a64:	f8 94       	cli
    2a66:	de bf       	out	0x3e, r29	; 62
    2a68:	0f be       	out	0x3f, r0	; 63
    2a6a:	cd bf       	out	0x3d, r28	; 61
    2a6c:	cf 91       	pop	r28
    2a6e:	df 91       	pop	r29
    2a70:	08 95       	ret

00002a72 <LCD_floatToString>:
/*
 * to display float numbers
 */
void LCD_floatToString(double num){
    2a72:	0f 93       	push	r16
    2a74:	1f 93       	push	r17
    2a76:	df 93       	push	r29
    2a78:	cf 93       	push	r28
    2a7a:	cd b7       	in	r28, 0x3d	; 61
    2a7c:	de b7       	in	r29, 0x3e	; 62
    2a7e:	68 97       	sbiw	r28, 0x18	; 24
    2a80:	0f b6       	in	r0, 0x3f	; 63
    2a82:	f8 94       	cli
    2a84:	de bf       	out	0x3e, r29	; 62
    2a86:	0f be       	out	0x3f, r0	; 63
    2a88:	cd bf       	out	0x3d, r28	; 61
    2a8a:	6d 8b       	std	Y+21, r22	; 0x15
    2a8c:	7e 8b       	std	Y+22, r23	; 0x16
    2a8e:	8f 8b       	std	Y+23, r24	; 0x17
    2a90:	98 8f       	std	Y+24, r25	; 0x18
	char buffer[20];
	dtostrf(num,5,3,buffer);
    2a92:	8d 89       	ldd	r24, Y+21	; 0x15
    2a94:	9e 89       	ldd	r25, Y+22	; 0x16
    2a96:	af 89       	ldd	r26, Y+23	; 0x17
    2a98:	b8 8d       	ldd	r27, Y+24	; 0x18
    2a9a:	bc 01       	movw	r22, r24
    2a9c:	cd 01       	movw	r24, r26
    2a9e:	45 e0       	ldi	r20, 0x05	; 5
    2aa0:	23 e0       	ldi	r18, 0x03	; 3
    2aa2:	fe 01       	movw	r30, r28
    2aa4:	31 96       	adiw	r30, 0x01	; 1
    2aa6:	8f 01       	movw	r16, r30
    2aa8:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <dtostrf>
	LCD_displayString(buffer);
    2aac:	ce 01       	movw	r24, r28
    2aae:	01 96       	adiw	r24, 0x01	; 1
    2ab0:	0e 94 86 14 	call	0x290c	; 0x290c <LCD_displayString>

}
    2ab4:	68 96       	adiw	r28, 0x18	; 24
    2ab6:	0f b6       	in	r0, 0x3f	; 63
    2ab8:	f8 94       	cli
    2aba:	de bf       	out	0x3e, r29	; 62
    2abc:	0f be       	out	0x3f, r0	; 63
    2abe:	cd bf       	out	0x3d, r28	; 61
    2ac0:	cf 91       	pop	r28
    2ac2:	df 91       	pop	r29
    2ac4:	1f 91       	pop	r17
    2ac6:	0f 91       	pop	r16
    2ac8:	08 95       	ret

00002aca <__mulsi3>:
    2aca:	62 9f       	mul	r22, r18
    2acc:	d0 01       	movw	r26, r0
    2ace:	73 9f       	mul	r23, r19
    2ad0:	f0 01       	movw	r30, r0
    2ad2:	82 9f       	mul	r24, r18
    2ad4:	e0 0d       	add	r30, r0
    2ad6:	f1 1d       	adc	r31, r1
    2ad8:	64 9f       	mul	r22, r20
    2ada:	e0 0d       	add	r30, r0
    2adc:	f1 1d       	adc	r31, r1
    2ade:	92 9f       	mul	r25, r18
    2ae0:	f0 0d       	add	r31, r0
    2ae2:	83 9f       	mul	r24, r19
    2ae4:	f0 0d       	add	r31, r0
    2ae6:	74 9f       	mul	r23, r20
    2ae8:	f0 0d       	add	r31, r0
    2aea:	65 9f       	mul	r22, r21
    2aec:	f0 0d       	add	r31, r0
    2aee:	99 27       	eor	r25, r25
    2af0:	72 9f       	mul	r23, r18
    2af2:	b0 0d       	add	r27, r0
    2af4:	e1 1d       	adc	r30, r1
    2af6:	f9 1f       	adc	r31, r25
    2af8:	63 9f       	mul	r22, r19
    2afa:	b0 0d       	add	r27, r0
    2afc:	e1 1d       	adc	r30, r1
    2afe:	f9 1f       	adc	r31, r25
    2b00:	bd 01       	movw	r22, r26
    2b02:	cf 01       	movw	r24, r30
    2b04:	11 24       	eor	r1, r1
    2b06:	08 95       	ret

00002b08 <__prologue_saves__>:
    2b08:	2f 92       	push	r2
    2b0a:	3f 92       	push	r3
    2b0c:	4f 92       	push	r4
    2b0e:	5f 92       	push	r5
    2b10:	6f 92       	push	r6
    2b12:	7f 92       	push	r7
    2b14:	8f 92       	push	r8
    2b16:	9f 92       	push	r9
    2b18:	af 92       	push	r10
    2b1a:	bf 92       	push	r11
    2b1c:	cf 92       	push	r12
    2b1e:	df 92       	push	r13
    2b20:	ef 92       	push	r14
    2b22:	ff 92       	push	r15
    2b24:	0f 93       	push	r16
    2b26:	1f 93       	push	r17
    2b28:	cf 93       	push	r28
    2b2a:	df 93       	push	r29
    2b2c:	cd b7       	in	r28, 0x3d	; 61
    2b2e:	de b7       	in	r29, 0x3e	; 62
    2b30:	ca 1b       	sub	r28, r26
    2b32:	db 0b       	sbc	r29, r27
    2b34:	0f b6       	in	r0, 0x3f	; 63
    2b36:	f8 94       	cli
    2b38:	de bf       	out	0x3e, r29	; 62
    2b3a:	0f be       	out	0x3f, r0	; 63
    2b3c:	cd bf       	out	0x3d, r28	; 61
    2b3e:	09 94       	ijmp

00002b40 <__epilogue_restores__>:
    2b40:	2a 88       	ldd	r2, Y+18	; 0x12
    2b42:	39 88       	ldd	r3, Y+17	; 0x11
    2b44:	48 88       	ldd	r4, Y+16	; 0x10
    2b46:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b48:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b4a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b4c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b4e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b50:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b52:	b9 84       	ldd	r11, Y+9	; 0x09
    2b54:	c8 84       	ldd	r12, Y+8	; 0x08
    2b56:	df 80       	ldd	r13, Y+7	; 0x07
    2b58:	ee 80       	ldd	r14, Y+6	; 0x06
    2b5a:	fd 80       	ldd	r15, Y+5	; 0x05
    2b5c:	0c 81       	ldd	r16, Y+4	; 0x04
    2b5e:	1b 81       	ldd	r17, Y+3	; 0x03
    2b60:	aa 81       	ldd	r26, Y+2	; 0x02
    2b62:	b9 81       	ldd	r27, Y+1	; 0x01
    2b64:	ce 0f       	add	r28, r30
    2b66:	d1 1d       	adc	r29, r1
    2b68:	0f b6       	in	r0, 0x3f	; 63
    2b6a:	f8 94       	cli
    2b6c:	de bf       	out	0x3e, r29	; 62
    2b6e:	0f be       	out	0x3f, r0	; 63
    2b70:	cd bf       	out	0x3d, r28	; 61
    2b72:	ed 01       	movw	r28, r26
    2b74:	08 95       	ret

00002b76 <dtostrf>:
    2b76:	ef 92       	push	r14
    2b78:	ff 92       	push	r15
    2b7a:	0f 93       	push	r16
    2b7c:	1f 93       	push	r17
    2b7e:	f2 2f       	mov	r31, r18
    2b80:	f0 2e       	mov	r15, r16
    2b82:	47 fd       	sbrc	r20, 7
    2b84:	02 c0       	rjmp	.+4      	; 0x2b8a <dtostrf+0x14>
    2b86:	e4 e0       	ldi	r30, 0x04	; 4
    2b88:	01 c0       	rjmp	.+2      	; 0x2b8c <dtostrf+0x16>
    2b8a:	e4 e1       	ldi	r30, 0x14	; 20
    2b8c:	24 2f       	mov	r18, r20
    2b8e:	33 27       	eor	r19, r19
    2b90:	27 fd       	sbrc	r18, 7
    2b92:	30 95       	com	r19
    2b94:	37 ff       	sbrs	r19, 7
    2b96:	03 c0       	rjmp	.+6      	; 0x2b9e <dtostrf+0x28>
    2b98:	30 95       	com	r19
    2b9a:	21 95       	neg	r18
    2b9c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b9e:	4f 2d       	mov	r20, r15
    2ba0:	51 2f       	mov	r21, r17
    2ba2:	0f 2f       	mov	r16, r31
    2ba4:	ee 2e       	mov	r14, r30
    2ba6:	0e 94 1d 16 	call	0x2c3a	; 0x2c3a <dtoa_prf>
    2baa:	8f 2d       	mov	r24, r15
    2bac:	91 2f       	mov	r25, r17
    2bae:	1f 91       	pop	r17
    2bb0:	0f 91       	pop	r16
    2bb2:	ff 90       	pop	r15
    2bb4:	ef 90       	pop	r14
    2bb6:	08 95       	ret

00002bb8 <itoa>:
    2bb8:	fb 01       	movw	r30, r22
    2bba:	9f 01       	movw	r18, r30
    2bbc:	e8 94       	clt
    2bbe:	42 30       	cpi	r20, 0x02	; 2
    2bc0:	c4 f0       	brlt	.+48     	; 0x2bf2 <itoa+0x3a>
    2bc2:	45 32       	cpi	r20, 0x25	; 37
    2bc4:	b4 f4       	brge	.+44     	; 0x2bf2 <itoa+0x3a>
    2bc6:	4a 30       	cpi	r20, 0x0A	; 10
    2bc8:	29 f4       	brne	.+10     	; 0x2bd4 <itoa+0x1c>
    2bca:	97 fb       	bst	r25, 7
    2bcc:	1e f4       	brtc	.+6      	; 0x2bd4 <itoa+0x1c>
    2bce:	90 95       	com	r25
    2bd0:	81 95       	neg	r24
    2bd2:	9f 4f       	sbci	r25, 0xFF	; 255
    2bd4:	64 2f       	mov	r22, r20
    2bd6:	77 27       	eor	r23, r23
    2bd8:	0e 94 b9 18 	call	0x3172	; 0x3172 <__udivmodhi4>
    2bdc:	80 5d       	subi	r24, 0xD0	; 208
    2bde:	8a 33       	cpi	r24, 0x3A	; 58
    2be0:	0c f0       	brlt	.+2      	; 0x2be4 <itoa+0x2c>
    2be2:	89 5d       	subi	r24, 0xD9	; 217
    2be4:	81 93       	st	Z+, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	00 97       	sbiw	r24, 0x00	; 0
    2bea:	a1 f7       	brne	.-24     	; 0x2bd4 <itoa+0x1c>
    2bec:	16 f4       	brtc	.+4      	; 0x2bf2 <itoa+0x3a>
    2bee:	5d e2       	ldi	r21, 0x2D	; 45
    2bf0:	51 93       	st	Z+, r21
    2bf2:	10 82       	st	Z, r1
    2bf4:	c9 01       	movw	r24, r18
    2bf6:	0c 94 57 18 	jmp	0x30ae	; 0x30ae <strrev>

00002bfa <round>:
    2bfa:	9a d2       	rcall	.+1332   	; 0x3130 <__fp_splitA>
    2bfc:	e0 f0       	brcs	.+56     	; 0x2c36 <round+0x3c>
    2bfe:	9e 37       	cpi	r25, 0x7E	; 126
    2c00:	d8 f0       	brcs	.+54     	; 0x2c38 <round+0x3e>
    2c02:	96 39       	cpi	r25, 0x96	; 150
    2c04:	b8 f4       	brcc	.+46     	; 0x2c34 <round+0x3a>
    2c06:	9e 38       	cpi	r25, 0x8E	; 142
    2c08:	48 f4       	brcc	.+18     	; 0x2c1c <round+0x22>
    2c0a:	67 2f       	mov	r22, r23
    2c0c:	78 2f       	mov	r23, r24
    2c0e:	88 27       	eor	r24, r24
    2c10:	98 5f       	subi	r25, 0xF8	; 248
    2c12:	f9 cf       	rjmp	.-14     	; 0x2c06 <round+0xc>
    2c14:	86 95       	lsr	r24
    2c16:	77 95       	ror	r23
    2c18:	67 95       	ror	r22
    2c1a:	93 95       	inc	r25
    2c1c:	95 39       	cpi	r25, 0x95	; 149
    2c1e:	d0 f3       	brcs	.-12     	; 0x2c14 <round+0x1a>
    2c20:	b6 2f       	mov	r27, r22
    2c22:	b1 70       	andi	r27, 0x01	; 1
    2c24:	6b 0f       	add	r22, r27
    2c26:	71 1d       	adc	r23, r1
    2c28:	81 1d       	adc	r24, r1
    2c2a:	20 f4       	brcc	.+8      	; 0x2c34 <round+0x3a>
    2c2c:	87 95       	ror	r24
    2c2e:	77 95       	ror	r23
    2c30:	67 95       	ror	r22
    2c32:	93 95       	inc	r25
    2c34:	4c c2       	rjmp	.+1176   	; 0x30ce <__fp_mintl>
    2c36:	66 c2       	rjmp	.+1228   	; 0x3104 <__fp_mpack>
    2c38:	96 c2       	rjmp	.+1324   	; 0x3166 <__fp_szero>

00002c3a <dtoa_prf>:
    2c3a:	a9 e0       	ldi	r26, 0x09	; 9
    2c3c:	b0 e0       	ldi	r27, 0x00	; 0
    2c3e:	e3 e2       	ldi	r30, 0x23	; 35
    2c40:	f6 e1       	ldi	r31, 0x16	; 22
    2c42:	0c 94 88 15 	jmp	0x2b10	; 0x2b10 <__prologue_saves__+0x8>
    2c46:	6a 01       	movw	r12, r20
    2c48:	12 2f       	mov	r17, r18
    2c4a:	a0 2e       	mov	r10, r16
    2c4c:	be 2c       	mov	r11, r14
    2c4e:	2b e3       	ldi	r18, 0x3B	; 59
    2c50:	20 17       	cp	r18, r16
    2c52:	18 f4       	brcc	.+6      	; 0x2c5a <dtoa_prf+0x20>
    2c54:	2c e3       	ldi	r18, 0x3C	; 60
    2c56:	92 2e       	mov	r9, r18
    2c58:	02 c0       	rjmp	.+4      	; 0x2c5e <dtoa_prf+0x24>
    2c5a:	90 2e       	mov	r9, r16
    2c5c:	93 94       	inc	r9
    2c5e:	ae 01       	movw	r20, r28
    2c60:	4f 5f       	subi	r20, 0xFF	; 255
    2c62:	5f 4f       	sbci	r21, 0xFF	; 255
    2c64:	27 e0       	ldi	r18, 0x07	; 7
    2c66:	09 2d       	mov	r16, r9
    2c68:	0e 94 7f 17 	call	0x2efe	; 0x2efe <__ftoa_engine>
    2c6c:	bc 01       	movw	r22, r24
    2c6e:	89 81       	ldd	r24, Y+1	; 0x01
    2c70:	e8 2e       	mov	r14, r24
    2c72:	ff 24       	eor	r15, r15
    2c74:	c7 01       	movw	r24, r14
    2c76:	89 70       	andi	r24, 0x09	; 9
    2c78:	90 70       	andi	r25, 0x00	; 0
    2c7a:	01 97       	sbiw	r24, 0x01	; 1
    2c7c:	11 f4       	brne	.+4      	; 0x2c82 <dtoa_prf+0x48>
    2c7e:	ad e2       	ldi	r26, 0x2D	; 45
    2c80:	09 c0       	rjmp	.+18     	; 0x2c94 <dtoa_prf+0x5a>
    2c82:	b1 fe       	sbrs	r11, 1
    2c84:	02 c0       	rjmp	.+4      	; 0x2c8a <dtoa_prf+0x50>
    2c86:	ab e2       	ldi	r26, 0x2B	; 43
    2c88:	05 c0       	rjmp	.+10     	; 0x2c94 <dtoa_prf+0x5a>
    2c8a:	b0 fc       	sbrc	r11, 0
    2c8c:	02 c0       	rjmp	.+4      	; 0x2c92 <dtoa_prf+0x58>
    2c8e:	a0 e0       	ldi	r26, 0x00	; 0
    2c90:	01 c0       	rjmp	.+2      	; 0x2c94 <dtoa_prf+0x5a>
    2c92:	a0 e2       	ldi	r26, 0x20	; 32
    2c94:	e3 fe       	sbrs	r14, 3
    2c96:	3b c0       	rjmp	.+118    	; 0x2d0e <dtoa_prf+0xd4>
    2c98:	aa 23       	and	r26, r26
    2c9a:	11 f4       	brne	.+4      	; 0x2ca0 <dtoa_prf+0x66>
    2c9c:	23 e0       	ldi	r18, 0x03	; 3
    2c9e:	01 c0       	rjmp	.+2      	; 0x2ca2 <dtoa_prf+0x68>
    2ca0:	24 e0       	ldi	r18, 0x04	; 4
    2ca2:	21 17       	cp	r18, r17
    2ca4:	10 f0       	brcs	.+4      	; 0x2caa <dtoa_prf+0x70>
    2ca6:	20 e0       	ldi	r18, 0x00	; 0
    2ca8:	02 c0       	rjmp	.+4      	; 0x2cae <dtoa_prf+0x74>
    2caa:	12 1b       	sub	r17, r18
    2cac:	21 2f       	mov	r18, r17
    2cae:	eb 2c       	mov	r14, r11
    2cb0:	b4 fe       	sbrs	r11, 4
    2cb2:	02 c0       	rjmp	.+4      	; 0x2cb8 <dtoa_prf+0x7e>
    2cb4:	32 2f       	mov	r19, r18
    2cb6:	0a c0       	rjmp	.+20     	; 0x2ccc <dtoa_prf+0x92>
    2cb8:	f6 01       	movw	r30, r12
    2cba:	32 2f       	mov	r19, r18
    2cbc:	80 e2       	ldi	r24, 0x20	; 32
    2cbe:	02 c0       	rjmp	.+4      	; 0x2cc4 <dtoa_prf+0x8a>
    2cc0:	81 93       	st	Z+, r24
    2cc2:	31 50       	subi	r19, 0x01	; 1
    2cc4:	33 23       	and	r19, r19
    2cc6:	e1 f7       	brne	.-8      	; 0x2cc0 <dtoa_prf+0x86>
    2cc8:	c2 0e       	add	r12, r18
    2cca:	d1 1c       	adc	r13, r1
    2ccc:	aa 23       	and	r26, r26
    2cce:	19 f0       	breq	.+6      	; 0x2cd6 <dtoa_prf+0x9c>
    2cd0:	f6 01       	movw	r30, r12
    2cd2:	a1 93       	st	Z+, r26
    2cd4:	6f 01       	movw	r12, r30
    2cd6:	f6 01       	movw	r30, r12
    2cd8:	31 96       	adiw	r30, 0x01	; 1
    2cda:	e2 fe       	sbrs	r14, 2
    2cdc:	05 c0       	rjmp	.+10     	; 0x2ce8 <dtoa_prf+0xae>
    2cde:	9e e4       	ldi	r25, 0x4E	; 78
    2ce0:	d6 01       	movw	r26, r12
    2ce2:	9c 93       	st	X, r25
    2ce4:	81 e4       	ldi	r24, 0x41	; 65
    2ce6:	04 c0       	rjmp	.+8      	; 0x2cf0 <dtoa_prf+0xb6>
    2ce8:	9e e6       	ldi	r25, 0x6E	; 110
    2cea:	d6 01       	movw	r26, r12
    2cec:	9c 93       	st	X, r25
    2cee:	81 e6       	ldi	r24, 0x61	; 97
    2cf0:	11 96       	adiw	r26, 0x01	; 1
    2cf2:	8c 93       	st	X, r24
    2cf4:	91 83       	std	Z+1, r25	; 0x01
    2cf6:	32 96       	adiw	r30, 0x02	; 2
    2cf8:	df 01       	movw	r26, r30
    2cfa:	83 2f       	mov	r24, r19
    2cfc:	90 e2       	ldi	r25, 0x20	; 32
    2cfe:	02 c0       	rjmp	.+4      	; 0x2d04 <dtoa_prf+0xca>
    2d00:	9d 93       	st	X+, r25
    2d02:	81 50       	subi	r24, 0x01	; 1
    2d04:	88 23       	and	r24, r24
    2d06:	e1 f7       	brne	.-8      	; 0x2d00 <dtoa_prf+0xc6>
    2d08:	e3 0f       	add	r30, r19
    2d0a:	f1 1d       	adc	r31, r1
    2d0c:	40 c0       	rjmp	.+128    	; 0x2d8e <dtoa_prf+0x154>
    2d0e:	e2 fe       	sbrs	r14, 2
    2d10:	42 c0       	rjmp	.+132    	; 0x2d96 <dtoa_prf+0x15c>
    2d12:	aa 23       	and	r26, r26
    2d14:	11 f4       	brne	.+4      	; 0x2d1a <dtoa_prf+0xe0>
    2d16:	23 e0       	ldi	r18, 0x03	; 3
    2d18:	01 c0       	rjmp	.+2      	; 0x2d1c <dtoa_prf+0xe2>
    2d1a:	24 e0       	ldi	r18, 0x04	; 4
    2d1c:	21 17       	cp	r18, r17
    2d1e:	10 f0       	brcs	.+4      	; 0x2d24 <dtoa_prf+0xea>
    2d20:	20 e0       	ldi	r18, 0x00	; 0
    2d22:	02 c0       	rjmp	.+4      	; 0x2d28 <dtoa_prf+0xee>
    2d24:	12 1b       	sub	r17, r18
    2d26:	21 2f       	mov	r18, r17
    2d28:	eb 2c       	mov	r14, r11
    2d2a:	b4 fe       	sbrs	r11, 4
    2d2c:	02 c0       	rjmp	.+4      	; 0x2d32 <dtoa_prf+0xf8>
    2d2e:	92 2f       	mov	r25, r18
    2d30:	0a c0       	rjmp	.+20     	; 0x2d46 <dtoa_prf+0x10c>
    2d32:	f6 01       	movw	r30, r12
    2d34:	92 2f       	mov	r25, r18
    2d36:	80 e2       	ldi	r24, 0x20	; 32
    2d38:	02 c0       	rjmp	.+4      	; 0x2d3e <dtoa_prf+0x104>
    2d3a:	81 93       	st	Z+, r24
    2d3c:	91 50       	subi	r25, 0x01	; 1
    2d3e:	99 23       	and	r25, r25
    2d40:	e1 f7       	brne	.-8      	; 0x2d3a <dtoa_prf+0x100>
    2d42:	c2 0e       	add	r12, r18
    2d44:	d1 1c       	adc	r13, r1
    2d46:	aa 23       	and	r26, r26
    2d48:	19 f0       	breq	.+6      	; 0x2d50 <dtoa_prf+0x116>
    2d4a:	f6 01       	movw	r30, r12
    2d4c:	a1 93       	st	Z+, r26
    2d4e:	6f 01       	movw	r12, r30
    2d50:	f6 01       	movw	r30, r12
    2d52:	31 96       	adiw	r30, 0x01	; 1
    2d54:	e2 fe       	sbrs	r14, 2
    2d56:	08 c0       	rjmp	.+16     	; 0x2d68 <dtoa_prf+0x12e>
    2d58:	89 e4       	ldi	r24, 0x49	; 73
    2d5a:	d6 01       	movw	r26, r12
    2d5c:	8c 93       	st	X, r24
    2d5e:	8e e4       	ldi	r24, 0x4E	; 78
    2d60:	11 96       	adiw	r26, 0x01	; 1
    2d62:	8c 93       	st	X, r24
    2d64:	86 e4       	ldi	r24, 0x46	; 70
    2d66:	07 c0       	rjmp	.+14     	; 0x2d76 <dtoa_prf+0x13c>
    2d68:	89 e6       	ldi	r24, 0x69	; 105
    2d6a:	d6 01       	movw	r26, r12
    2d6c:	8c 93       	st	X, r24
    2d6e:	8e e6       	ldi	r24, 0x6E	; 110
    2d70:	11 96       	adiw	r26, 0x01	; 1
    2d72:	8c 93       	st	X, r24
    2d74:	86 e6       	ldi	r24, 0x66	; 102
    2d76:	81 83       	std	Z+1, r24	; 0x01
    2d78:	32 96       	adiw	r30, 0x02	; 2
    2d7a:	df 01       	movw	r26, r30
    2d7c:	89 2f       	mov	r24, r25
    2d7e:	20 e2       	ldi	r18, 0x20	; 32
    2d80:	02 c0       	rjmp	.+4      	; 0x2d86 <dtoa_prf+0x14c>
    2d82:	2d 93       	st	X+, r18
    2d84:	81 50       	subi	r24, 0x01	; 1
    2d86:	88 23       	and	r24, r24
    2d88:	e1 f7       	brne	.-8      	; 0x2d82 <dtoa_prf+0x148>
    2d8a:	e9 0f       	add	r30, r25
    2d8c:	f1 1d       	adc	r31, r1
    2d8e:	10 82       	st	Z, r1
    2d90:	2e ef       	ldi	r18, 0xFE	; 254
    2d92:	3f ef       	ldi	r19, 0xFF	; 255
    2d94:	af c0       	rjmp	.+350    	; 0x2ef4 <dtoa_prf+0x2ba>
    2d96:	16 16       	cp	r1, r22
    2d98:	17 06       	cpc	r1, r23
    2d9a:	1c f0       	brlt	.+6      	; 0x2da2 <dtoa_prf+0x168>
    2d9c:	41 e0       	ldi	r20, 0x01	; 1
    2d9e:	50 e0       	ldi	r21, 0x00	; 0
    2da0:	03 c0       	rjmp	.+6      	; 0x2da8 <dtoa_prf+0x16e>
    2da2:	ab 01       	movw	r20, r22
    2da4:	4f 5f       	subi	r20, 0xFF	; 255
    2da6:	5f 4f       	sbci	r21, 0xFF	; 255
    2da8:	aa 20       	and	r10, r10
    2daa:	19 f4       	brne	.+6      	; 0x2db2 <dtoa_prf+0x178>
    2dac:	80 e0       	ldi	r24, 0x00	; 0
    2dae:	90 e0       	ldi	r25, 0x00	; 0
    2db0:	03 c0       	rjmp	.+6      	; 0x2db8 <dtoa_prf+0x17e>
    2db2:	8a 2d       	mov	r24, r10
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	01 96       	adiw	r24, 0x01	; 1
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	30 e0       	ldi	r19, 0x00	; 0
    2dbc:	aa 23       	and	r26, r26
    2dbe:	11 f0       	breq	.+4      	; 0x2dc4 <dtoa_prf+0x18a>
    2dc0:	21 e0       	ldi	r18, 0x01	; 1
    2dc2:	30 e0       	ldi	r19, 0x00	; 0
    2dc4:	24 0f       	add	r18, r20
    2dc6:	35 1f       	adc	r19, r21
    2dc8:	28 0f       	add	r18, r24
    2dca:	39 1f       	adc	r19, r25
    2dcc:	81 2f       	mov	r24, r17
    2dce:	90 e0       	ldi	r25, 0x00	; 0
    2dd0:	28 17       	cp	r18, r24
    2dd2:	39 07       	cpc	r19, r25
    2dd4:	14 f0       	brlt	.+4      	; 0x2dda <dtoa_prf+0x1a0>
    2dd6:	20 e0       	ldi	r18, 0x00	; 0
    2dd8:	02 c0       	rjmp	.+4      	; 0x2dde <dtoa_prf+0x1a4>
    2dda:	12 1b       	sub	r17, r18
    2ddc:	21 2f       	mov	r18, r17
    2dde:	4b 2d       	mov	r20, r11
    2de0:	50 e0       	ldi	r21, 0x00	; 0
    2de2:	ca 01       	movw	r24, r20
    2de4:	80 71       	andi	r24, 0x10	; 16
    2de6:	90 70       	andi	r25, 0x00	; 0
    2de8:	b4 fc       	sbrc	r11, 4
    2dea:	0d c0       	rjmp	.+26     	; 0x2e06 <dtoa_prf+0x1cc>
    2dec:	b3 fc       	sbrc	r11, 3
    2dee:	0b c0       	rjmp	.+22     	; 0x2e06 <dtoa_prf+0x1cc>
    2df0:	f6 01       	movw	r30, r12
    2df2:	32 2f       	mov	r19, r18
    2df4:	40 e2       	ldi	r20, 0x20	; 32
    2df6:	02 c0       	rjmp	.+4      	; 0x2dfc <dtoa_prf+0x1c2>
    2df8:	41 93       	st	Z+, r20
    2dfa:	31 50       	subi	r19, 0x01	; 1
    2dfc:	33 23       	and	r19, r19
    2dfe:	e1 f7       	brne	.-8      	; 0x2df8 <dtoa_prf+0x1be>
    2e00:	c2 0e       	add	r12, r18
    2e02:	d1 1c       	adc	r13, r1
    2e04:	01 c0       	rjmp	.+2      	; 0x2e08 <dtoa_prf+0x1ce>
    2e06:	32 2f       	mov	r19, r18
    2e08:	aa 23       	and	r26, r26
    2e0a:	19 f0       	breq	.+6      	; 0x2e12 <dtoa_prf+0x1d8>
    2e0c:	f6 01       	movw	r30, r12
    2e0e:	a1 93       	st	Z+, r26
    2e10:	6f 01       	movw	r12, r30
    2e12:	89 2b       	or	r24, r25
    2e14:	11 f0       	breq	.+4      	; 0x2e1a <dtoa_prf+0x1e0>
    2e16:	13 2f       	mov	r17, r19
    2e18:	0a c0       	rjmp	.+20     	; 0x2e2e <dtoa_prf+0x1f4>
    2e1a:	f6 01       	movw	r30, r12
    2e1c:	13 2f       	mov	r17, r19
    2e1e:	80 e3       	ldi	r24, 0x30	; 48
    2e20:	02 c0       	rjmp	.+4      	; 0x2e26 <dtoa_prf+0x1ec>
    2e22:	81 93       	st	Z+, r24
    2e24:	11 50       	subi	r17, 0x01	; 1
    2e26:	11 23       	and	r17, r17
    2e28:	e1 f7       	brne	.-8      	; 0x2e22 <dtoa_prf+0x1e8>
    2e2a:	c3 0e       	add	r12, r19
    2e2c:	d1 1c       	adc	r13, r1
    2e2e:	09 2d       	mov	r16, r9
    2e30:	06 0f       	add	r16, r22
    2e32:	ba 80       	ldd	r11, Y+2	; 0x02
    2e34:	90 e1       	ldi	r25, 0x10	; 16
    2e36:	89 2e       	mov	r8, r25
    2e38:	91 2c       	mov	r9, r1
    2e3a:	8e 20       	and	r8, r14
    2e3c:	9f 20       	and	r9, r15
    2e3e:	e4 fe       	sbrs	r14, 4
    2e40:	04 c0       	rjmp	.+8      	; 0x2e4a <dtoa_prf+0x210>
    2e42:	f1 e3       	ldi	r31, 0x31	; 49
    2e44:	bf 16       	cp	r11, r31
    2e46:	09 f4       	brne	.+2      	; 0x2e4a <dtoa_prf+0x210>
    2e48:	01 50       	subi	r16, 0x01	; 1
    2e4a:	10 16       	cp	r1, r16
    2e4c:	14 f0       	brlt	.+4      	; 0x2e52 <dtoa_prf+0x218>
    2e4e:	01 e0       	ldi	r16, 0x01	; 1
    2e50:	03 c0       	rjmp	.+6      	; 0x2e58 <dtoa_prf+0x21e>
    2e52:	09 30       	cpi	r16, 0x09	; 9
    2e54:	08 f0       	brcs	.+2      	; 0x2e58 <dtoa_prf+0x21e>
    2e56:	08 e0       	ldi	r16, 0x08	; 8
    2e58:	9b 01       	movw	r18, r22
    2e5a:	77 ff       	sbrs	r23, 7
    2e5c:	02 c0       	rjmp	.+4      	; 0x2e62 <dtoa_prf+0x228>
    2e5e:	20 e0       	ldi	r18, 0x00	; 0
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	cb 01       	movw	r24, r22
    2e64:	01 96       	adiw	r24, 0x01	; 1
    2e66:	82 1b       	sub	r24, r18
    2e68:	93 0b       	sbc	r25, r19
    2e6a:	fe 01       	movw	r30, r28
    2e6c:	31 96       	adiw	r30, 0x01	; 1
    2e6e:	e8 0f       	add	r30, r24
    2e70:	f9 1f       	adc	r31, r25
    2e72:	8e e2       	ldi	r24, 0x2E	; 46
    2e74:	f8 2e       	mov	r15, r24
    2e76:	3b 01       	movw	r6, r22
    2e78:	60 1a       	sub	r6, r16
    2e7a:	71 08       	sbc	r7, r1
    2e7c:	8a 2d       	mov	r24, r10
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	44 27       	eor	r20, r20
    2e82:	55 27       	eor	r21, r21
    2e84:	48 1b       	sub	r20, r24
    2e86:	59 0b       	sbc	r21, r25
    2e88:	8f ef       	ldi	r24, 0xFF	; 255
    2e8a:	2f 3f       	cpi	r18, 0xFF	; 255
    2e8c:	38 07       	cpc	r19, r24
    2e8e:	19 f4       	brne	.+6      	; 0x2e96 <dtoa_prf+0x25c>
    2e90:	d6 01       	movw	r26, r12
    2e92:	fd 92       	st	X+, r15
    2e94:	6d 01       	movw	r12, r26
    2e96:	62 17       	cp	r22, r18
    2e98:	73 07       	cpc	r23, r19
    2e9a:	2c f0       	brlt	.+10     	; 0x2ea6 <dtoa_prf+0x26c>
    2e9c:	62 16       	cp	r6, r18
    2e9e:	73 06       	cpc	r7, r19
    2ea0:	14 f4       	brge	.+4      	; 0x2ea6 <dtoa_prf+0x26c>
    2ea2:	80 81       	ld	r24, Z
    2ea4:	01 c0       	rjmp	.+2      	; 0x2ea8 <dtoa_prf+0x26e>
    2ea6:	80 e3       	ldi	r24, 0x30	; 48
    2ea8:	21 50       	subi	r18, 0x01	; 1
    2eaa:	30 40       	sbci	r19, 0x00	; 0
    2eac:	31 96       	adiw	r30, 0x01	; 1
    2eae:	24 17       	cp	r18, r20
    2eb0:	35 07       	cpc	r19, r21
    2eb2:	24 f0       	brlt	.+8      	; 0x2ebc <dtoa_prf+0x282>
    2eb4:	d6 01       	movw	r26, r12
    2eb6:	8d 93       	st	X+, r24
    2eb8:	6d 01       	movw	r12, r26
    2eba:	e6 cf       	rjmp	.-52     	; 0x2e88 <dtoa_prf+0x24e>
    2ebc:	26 17       	cp	r18, r22
    2ebe:	37 07       	cpc	r19, r23
    2ec0:	49 f4       	brne	.+18     	; 0x2ed4 <dtoa_prf+0x29a>
    2ec2:	b5 e3       	ldi	r27, 0x35	; 53
    2ec4:	bb 15       	cp	r27, r11
    2ec6:	28 f0       	brcs	.+10     	; 0x2ed2 <dtoa_prf+0x298>
    2ec8:	bb 16       	cp	r11, r27
    2eca:	21 f4       	brne	.+8      	; 0x2ed4 <dtoa_prf+0x29a>
    2ecc:	81 14       	cp	r8, r1
    2ece:	91 04       	cpc	r9, r1
    2ed0:	09 f4       	brne	.+2      	; 0x2ed4 <dtoa_prf+0x29a>
    2ed2:	81 e3       	ldi	r24, 0x31	; 49
    2ed4:	f6 01       	movw	r30, r12
    2ed6:	81 93       	st	Z+, r24
    2ed8:	d6 01       	movw	r26, r12
    2eda:	81 2f       	mov	r24, r17
    2edc:	90 e2       	ldi	r25, 0x20	; 32
    2ede:	02 c0       	rjmp	.+4      	; 0x2ee4 <dtoa_prf+0x2aa>
    2ee0:	9c 93       	st	X, r25
    2ee2:	81 50       	subi	r24, 0x01	; 1
    2ee4:	11 96       	adiw	r26, 0x01	; 1
    2ee6:	88 23       	and	r24, r24
    2ee8:	d9 f7       	brne	.-10     	; 0x2ee0 <dtoa_prf+0x2a6>
    2eea:	e1 0f       	add	r30, r17
    2eec:	f1 1d       	adc	r31, r1
    2eee:	10 82       	st	Z, r1
    2ef0:	20 e0       	ldi	r18, 0x00	; 0
    2ef2:	30 e0       	ldi	r19, 0x00	; 0
    2ef4:	c9 01       	movw	r24, r18
    2ef6:	29 96       	adiw	r28, 0x09	; 9
    2ef8:	ee e0       	ldi	r30, 0x0E	; 14
    2efa:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__epilogue_restores__+0x8>

00002efe <__ftoa_engine>:
    2efe:	28 30       	cpi	r18, 0x08	; 8
    2f00:	08 f0       	brcs	.+2      	; 0x2f04 <__ftoa_engine+0x6>
    2f02:	27 e0       	ldi	r18, 0x07	; 7
    2f04:	33 27       	eor	r19, r19
    2f06:	da 01       	movw	r26, r20
    2f08:	99 0f       	add	r25, r25
    2f0a:	31 1d       	adc	r19, r1
    2f0c:	87 fd       	sbrc	r24, 7
    2f0e:	91 60       	ori	r25, 0x01	; 1
    2f10:	00 96       	adiw	r24, 0x00	; 0
    2f12:	61 05       	cpc	r22, r1
    2f14:	71 05       	cpc	r23, r1
    2f16:	39 f4       	brne	.+14     	; 0x2f26 <__ftoa_engine+0x28>
    2f18:	32 60       	ori	r19, 0x02	; 2
    2f1a:	2e 5f       	subi	r18, 0xFE	; 254
    2f1c:	3d 93       	st	X+, r19
    2f1e:	30 e3       	ldi	r19, 0x30	; 48
    2f20:	2a 95       	dec	r18
    2f22:	e1 f7       	brne	.-8      	; 0x2f1c <__ftoa_engine+0x1e>
    2f24:	08 95       	ret
    2f26:	9f 3f       	cpi	r25, 0xFF	; 255
    2f28:	30 f0       	brcs	.+12     	; 0x2f36 <__ftoa_engine+0x38>
    2f2a:	80 38       	cpi	r24, 0x80	; 128
    2f2c:	71 05       	cpc	r23, r1
    2f2e:	61 05       	cpc	r22, r1
    2f30:	09 f0       	breq	.+2      	; 0x2f34 <__ftoa_engine+0x36>
    2f32:	3c 5f       	subi	r19, 0xFC	; 252
    2f34:	3c 5f       	subi	r19, 0xFC	; 252
    2f36:	3d 93       	st	X+, r19
    2f38:	91 30       	cpi	r25, 0x01	; 1
    2f3a:	08 f0       	brcs	.+2      	; 0x2f3e <__ftoa_engine+0x40>
    2f3c:	80 68       	ori	r24, 0x80	; 128
    2f3e:	91 1d       	adc	r25, r1
    2f40:	df 93       	push	r29
    2f42:	cf 93       	push	r28
    2f44:	1f 93       	push	r17
    2f46:	0f 93       	push	r16
    2f48:	ff 92       	push	r15
    2f4a:	ef 92       	push	r14
    2f4c:	19 2f       	mov	r17, r25
    2f4e:	98 7f       	andi	r25, 0xF8	; 248
    2f50:	96 95       	lsr	r25
    2f52:	e9 2f       	mov	r30, r25
    2f54:	96 95       	lsr	r25
    2f56:	96 95       	lsr	r25
    2f58:	e9 0f       	add	r30, r25
    2f5a:	ff 27       	eor	r31, r31
    2f5c:	e2 55       	subi	r30, 0x52	; 82
    2f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f60:	99 27       	eor	r25, r25
    2f62:	33 27       	eor	r19, r19
    2f64:	ee 24       	eor	r14, r14
    2f66:	ff 24       	eor	r15, r15
    2f68:	a7 01       	movw	r20, r14
    2f6a:	e7 01       	movw	r28, r14
    2f6c:	05 90       	lpm	r0, Z+
    2f6e:	08 94       	sec
    2f70:	07 94       	ror	r0
    2f72:	28 f4       	brcc	.+10     	; 0x2f7e <__ftoa_engine+0x80>
    2f74:	36 0f       	add	r19, r22
    2f76:	e7 1e       	adc	r14, r23
    2f78:	f8 1e       	adc	r15, r24
    2f7a:	49 1f       	adc	r20, r25
    2f7c:	51 1d       	adc	r21, r1
    2f7e:	66 0f       	add	r22, r22
    2f80:	77 1f       	adc	r23, r23
    2f82:	88 1f       	adc	r24, r24
    2f84:	99 1f       	adc	r25, r25
    2f86:	06 94       	lsr	r0
    2f88:	a1 f7       	brne	.-24     	; 0x2f72 <__ftoa_engine+0x74>
    2f8a:	05 90       	lpm	r0, Z+
    2f8c:	07 94       	ror	r0
    2f8e:	28 f4       	brcc	.+10     	; 0x2f9a <__ftoa_engine+0x9c>
    2f90:	e7 0e       	add	r14, r23
    2f92:	f8 1e       	adc	r15, r24
    2f94:	49 1f       	adc	r20, r25
    2f96:	56 1f       	adc	r21, r22
    2f98:	c1 1d       	adc	r28, r1
    2f9a:	77 0f       	add	r23, r23
    2f9c:	88 1f       	adc	r24, r24
    2f9e:	99 1f       	adc	r25, r25
    2fa0:	66 1f       	adc	r22, r22
    2fa2:	06 94       	lsr	r0
    2fa4:	a1 f7       	brne	.-24     	; 0x2f8e <__ftoa_engine+0x90>
    2fa6:	05 90       	lpm	r0, Z+
    2fa8:	07 94       	ror	r0
    2faa:	28 f4       	brcc	.+10     	; 0x2fb6 <__ftoa_engine+0xb8>
    2fac:	f8 0e       	add	r15, r24
    2fae:	49 1f       	adc	r20, r25
    2fb0:	56 1f       	adc	r21, r22
    2fb2:	c7 1f       	adc	r28, r23
    2fb4:	d1 1d       	adc	r29, r1
    2fb6:	88 0f       	add	r24, r24
    2fb8:	99 1f       	adc	r25, r25
    2fba:	66 1f       	adc	r22, r22
    2fbc:	77 1f       	adc	r23, r23
    2fbe:	06 94       	lsr	r0
    2fc0:	a1 f7       	brne	.-24     	; 0x2faa <__ftoa_engine+0xac>
    2fc2:	05 90       	lpm	r0, Z+
    2fc4:	07 94       	ror	r0
    2fc6:	20 f4       	brcc	.+8      	; 0x2fd0 <__ftoa_engine+0xd2>
    2fc8:	49 0f       	add	r20, r25
    2fca:	56 1f       	adc	r21, r22
    2fcc:	c7 1f       	adc	r28, r23
    2fce:	d8 1f       	adc	r29, r24
    2fd0:	99 0f       	add	r25, r25
    2fd2:	66 1f       	adc	r22, r22
    2fd4:	77 1f       	adc	r23, r23
    2fd6:	88 1f       	adc	r24, r24
    2fd8:	06 94       	lsr	r0
    2fda:	a9 f7       	brne	.-22     	; 0x2fc6 <__ftoa_engine+0xc8>
    2fdc:	84 91       	lpm	r24, Z+
    2fde:	10 95       	com	r17
    2fe0:	17 70       	andi	r17, 0x07	; 7
    2fe2:	41 f0       	breq	.+16     	; 0x2ff4 <__ftoa_engine+0xf6>
    2fe4:	d6 95       	lsr	r29
    2fe6:	c7 95       	ror	r28
    2fe8:	57 95       	ror	r21
    2fea:	47 95       	ror	r20
    2fec:	f7 94       	ror	r15
    2fee:	e7 94       	ror	r14
    2ff0:	1a 95       	dec	r17
    2ff2:	c1 f7       	brne	.-16     	; 0x2fe4 <__ftoa_engine+0xe6>
    2ff4:	e4 e5       	ldi	r30, 0x54	; 84
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	68 94       	set
    2ffa:	15 90       	lpm	r1, Z+
    2ffc:	15 91       	lpm	r17, Z+
    2ffe:	35 91       	lpm	r19, Z+
    3000:	65 91       	lpm	r22, Z+
    3002:	95 91       	lpm	r25, Z+
    3004:	05 90       	lpm	r0, Z+
    3006:	7f e2       	ldi	r23, 0x2F	; 47
    3008:	73 95       	inc	r23
    300a:	e1 18       	sub	r14, r1
    300c:	f1 0a       	sbc	r15, r17
    300e:	43 0b       	sbc	r20, r19
    3010:	56 0b       	sbc	r21, r22
    3012:	c9 0b       	sbc	r28, r25
    3014:	d0 09       	sbc	r29, r0
    3016:	c0 f7       	brcc	.-16     	; 0x3008 <__ftoa_engine+0x10a>
    3018:	e1 0c       	add	r14, r1
    301a:	f1 1e       	adc	r15, r17
    301c:	43 1f       	adc	r20, r19
    301e:	56 1f       	adc	r21, r22
    3020:	c9 1f       	adc	r28, r25
    3022:	d0 1d       	adc	r29, r0
    3024:	7e f4       	brtc	.+30     	; 0x3044 <__ftoa_engine+0x146>
    3026:	70 33       	cpi	r23, 0x30	; 48
    3028:	11 f4       	brne	.+4      	; 0x302e <__ftoa_engine+0x130>
    302a:	8a 95       	dec	r24
    302c:	e6 cf       	rjmp	.-52     	; 0x2ffa <__ftoa_engine+0xfc>
    302e:	e8 94       	clt
    3030:	01 50       	subi	r16, 0x01	; 1
    3032:	30 f0       	brcs	.+12     	; 0x3040 <__ftoa_engine+0x142>
    3034:	08 0f       	add	r16, r24
    3036:	0a f4       	brpl	.+2      	; 0x303a <__ftoa_engine+0x13c>
    3038:	00 27       	eor	r16, r16
    303a:	02 17       	cp	r16, r18
    303c:	08 f4       	brcc	.+2      	; 0x3040 <__ftoa_engine+0x142>
    303e:	20 2f       	mov	r18, r16
    3040:	23 95       	inc	r18
    3042:	02 2f       	mov	r16, r18
    3044:	7a 33       	cpi	r23, 0x3A	; 58
    3046:	28 f0       	brcs	.+10     	; 0x3052 <__ftoa_engine+0x154>
    3048:	79 e3       	ldi	r23, 0x39	; 57
    304a:	7d 93       	st	X+, r23
    304c:	2a 95       	dec	r18
    304e:	e9 f7       	brne	.-6      	; 0x304a <__ftoa_engine+0x14c>
    3050:	10 c0       	rjmp	.+32     	; 0x3072 <__ftoa_engine+0x174>
    3052:	7d 93       	st	X+, r23
    3054:	2a 95       	dec	r18
    3056:	89 f6       	brne	.-94     	; 0x2ffa <__ftoa_engine+0xfc>
    3058:	06 94       	lsr	r0
    305a:	97 95       	ror	r25
    305c:	67 95       	ror	r22
    305e:	37 95       	ror	r19
    3060:	17 95       	ror	r17
    3062:	17 94       	ror	r1
    3064:	e1 18       	sub	r14, r1
    3066:	f1 0a       	sbc	r15, r17
    3068:	43 0b       	sbc	r20, r19
    306a:	56 0b       	sbc	r21, r22
    306c:	c9 0b       	sbc	r28, r25
    306e:	d0 09       	sbc	r29, r0
    3070:	98 f0       	brcs	.+38     	; 0x3098 <__ftoa_engine+0x19a>
    3072:	23 95       	inc	r18
    3074:	7e 91       	ld	r23, -X
    3076:	73 95       	inc	r23
    3078:	7a 33       	cpi	r23, 0x3A	; 58
    307a:	08 f0       	brcs	.+2      	; 0x307e <__ftoa_engine+0x180>
    307c:	70 e3       	ldi	r23, 0x30	; 48
    307e:	7c 93       	st	X, r23
    3080:	20 13       	cpse	r18, r16
    3082:	b8 f7       	brcc	.-18     	; 0x3072 <__ftoa_engine+0x174>
    3084:	7e 91       	ld	r23, -X
    3086:	70 61       	ori	r23, 0x10	; 16
    3088:	7d 93       	st	X+, r23
    308a:	30 f0       	brcs	.+12     	; 0x3098 <__ftoa_engine+0x19a>
    308c:	83 95       	inc	r24
    308e:	71 e3       	ldi	r23, 0x31	; 49
    3090:	7d 93       	st	X+, r23
    3092:	70 e3       	ldi	r23, 0x30	; 48
    3094:	2a 95       	dec	r18
    3096:	e1 f7       	brne	.-8      	; 0x3090 <__ftoa_engine+0x192>
    3098:	11 24       	eor	r1, r1
    309a:	ef 90       	pop	r14
    309c:	ff 90       	pop	r15
    309e:	0f 91       	pop	r16
    30a0:	1f 91       	pop	r17
    30a2:	cf 91       	pop	r28
    30a4:	df 91       	pop	r29
    30a6:	99 27       	eor	r25, r25
    30a8:	87 fd       	sbrc	r24, 7
    30aa:	90 95       	com	r25
    30ac:	08 95       	ret

000030ae <strrev>:
    30ae:	dc 01       	movw	r26, r24
    30b0:	fc 01       	movw	r30, r24
    30b2:	67 2f       	mov	r22, r23
    30b4:	71 91       	ld	r23, Z+
    30b6:	77 23       	and	r23, r23
    30b8:	e1 f7       	brne	.-8      	; 0x30b2 <strrev+0x4>
    30ba:	32 97       	sbiw	r30, 0x02	; 2
    30bc:	04 c0       	rjmp	.+8      	; 0x30c6 <strrev+0x18>
    30be:	7c 91       	ld	r23, X
    30c0:	6d 93       	st	X+, r22
    30c2:	70 83       	st	Z, r23
    30c4:	62 91       	ld	r22, -Z
    30c6:	ae 17       	cp	r26, r30
    30c8:	bf 07       	cpc	r27, r31
    30ca:	c8 f3       	brcs	.-14     	; 0x30be <strrev+0x10>
    30cc:	08 95       	ret

000030ce <__fp_mintl>:
    30ce:	88 23       	and	r24, r24
    30d0:	71 f4       	brne	.+28     	; 0x30ee <__fp_mintl+0x20>
    30d2:	77 23       	and	r23, r23
    30d4:	21 f0       	breq	.+8      	; 0x30de <__fp_mintl+0x10>
    30d6:	98 50       	subi	r25, 0x08	; 8
    30d8:	87 2b       	or	r24, r23
    30da:	76 2f       	mov	r23, r22
    30dc:	07 c0       	rjmp	.+14     	; 0x30ec <__fp_mintl+0x1e>
    30de:	66 23       	and	r22, r22
    30e0:	11 f4       	brne	.+4      	; 0x30e6 <__fp_mintl+0x18>
    30e2:	99 27       	eor	r25, r25
    30e4:	0d c0       	rjmp	.+26     	; 0x3100 <__fp_mintl+0x32>
    30e6:	90 51       	subi	r25, 0x10	; 16
    30e8:	86 2b       	or	r24, r22
    30ea:	70 e0       	ldi	r23, 0x00	; 0
    30ec:	60 e0       	ldi	r22, 0x00	; 0
    30ee:	2a f0       	brmi	.+10     	; 0x30fa <__fp_mintl+0x2c>
    30f0:	9a 95       	dec	r25
    30f2:	66 0f       	add	r22, r22
    30f4:	77 1f       	adc	r23, r23
    30f6:	88 1f       	adc	r24, r24
    30f8:	da f7       	brpl	.-10     	; 0x30f0 <__fp_mintl+0x22>
    30fa:	88 0f       	add	r24, r24
    30fc:	96 95       	lsr	r25
    30fe:	87 95       	ror	r24
    3100:	97 f9       	bld	r25, 7
    3102:	08 95       	ret

00003104 <__fp_mpack>:
    3104:	9f 3f       	cpi	r25, 0xFF	; 255
    3106:	31 f0       	breq	.+12     	; 0x3114 <__fp_mpack_finite+0xc>

00003108 <__fp_mpack_finite>:
    3108:	91 50       	subi	r25, 0x01	; 1
    310a:	20 f4       	brcc	.+8      	; 0x3114 <__fp_mpack_finite+0xc>
    310c:	87 95       	ror	r24
    310e:	77 95       	ror	r23
    3110:	67 95       	ror	r22
    3112:	b7 95       	ror	r27
    3114:	88 0f       	add	r24, r24
    3116:	91 1d       	adc	r25, r1
    3118:	96 95       	lsr	r25
    311a:	87 95       	ror	r24
    311c:	97 f9       	bld	r25, 7
    311e:	08 95       	ret

00003120 <__fp_split3>:
    3120:	57 fd       	sbrc	r21, 7
    3122:	90 58       	subi	r25, 0x80	; 128
    3124:	44 0f       	add	r20, r20
    3126:	55 1f       	adc	r21, r21
    3128:	59 f0       	breq	.+22     	; 0x3140 <__fp_splitA+0x10>
    312a:	5f 3f       	cpi	r21, 0xFF	; 255
    312c:	71 f0       	breq	.+28     	; 0x314a <__fp_splitA+0x1a>
    312e:	47 95       	ror	r20

00003130 <__fp_splitA>:
    3130:	88 0f       	add	r24, r24
    3132:	97 fb       	bst	r25, 7
    3134:	99 1f       	adc	r25, r25
    3136:	61 f0       	breq	.+24     	; 0x3150 <__fp_splitA+0x20>
    3138:	9f 3f       	cpi	r25, 0xFF	; 255
    313a:	79 f0       	breq	.+30     	; 0x315a <__fp_splitA+0x2a>
    313c:	87 95       	ror	r24
    313e:	08 95       	ret
    3140:	12 16       	cp	r1, r18
    3142:	13 06       	cpc	r1, r19
    3144:	14 06       	cpc	r1, r20
    3146:	55 1f       	adc	r21, r21
    3148:	f2 cf       	rjmp	.-28     	; 0x312e <__fp_split3+0xe>
    314a:	46 95       	lsr	r20
    314c:	f1 df       	rcall	.-30     	; 0x3130 <__fp_splitA>
    314e:	08 c0       	rjmp	.+16     	; 0x3160 <__fp_splitA+0x30>
    3150:	16 16       	cp	r1, r22
    3152:	17 06       	cpc	r1, r23
    3154:	18 06       	cpc	r1, r24
    3156:	99 1f       	adc	r25, r25
    3158:	f1 cf       	rjmp	.-30     	; 0x313c <__fp_splitA+0xc>
    315a:	86 95       	lsr	r24
    315c:	71 05       	cpc	r23, r1
    315e:	61 05       	cpc	r22, r1
    3160:	08 94       	sec
    3162:	08 95       	ret

00003164 <__fp_zero>:
    3164:	e8 94       	clt

00003166 <__fp_szero>:
    3166:	bb 27       	eor	r27, r27
    3168:	66 27       	eor	r22, r22
    316a:	77 27       	eor	r23, r23
    316c:	cb 01       	movw	r24, r22
    316e:	97 f9       	bld	r25, 7
    3170:	08 95       	ret

00003172 <__udivmodhi4>:
    3172:	aa 1b       	sub	r26, r26
    3174:	bb 1b       	sub	r27, r27
    3176:	51 e1       	ldi	r21, 0x11	; 17
    3178:	07 c0       	rjmp	.+14     	; 0x3188 <__udivmodhi4_ep>

0000317a <__udivmodhi4_loop>:
    317a:	aa 1f       	adc	r26, r26
    317c:	bb 1f       	adc	r27, r27
    317e:	a6 17       	cp	r26, r22
    3180:	b7 07       	cpc	r27, r23
    3182:	10 f0       	brcs	.+4      	; 0x3188 <__udivmodhi4_ep>
    3184:	a6 1b       	sub	r26, r22
    3186:	b7 0b       	sbc	r27, r23

00003188 <__udivmodhi4_ep>:
    3188:	88 1f       	adc	r24, r24
    318a:	99 1f       	adc	r25, r25
    318c:	5a 95       	dec	r21
    318e:	a9 f7       	brne	.-22     	; 0x317a <__udivmodhi4_loop>
    3190:	80 95       	com	r24
    3192:	90 95       	com	r25
    3194:	bc 01       	movw	r22, r24
    3196:	cd 01       	movw	r24, r26
    3198:	08 95       	ret

0000319a <_exit>:
    319a:	f8 94       	cli

0000319c <__stop_program>:
    319c:	ff cf       	rjmp	.-2      	; 0x319c <__stop_program>
